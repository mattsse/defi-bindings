pub use mapleloantests_mod::*;
#[allow(clippy::too_many_arguments)]
mod mapleloantests_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "MapleLoanTests was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static MAPLELOANTESTS_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptBorrower_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptLender_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_extraFunds\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_pullPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_pushPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_claimFunds_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_pullPatternAsBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_pullPatternAsNonBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_pullPatternUsingDrawable\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_pushPatternAsBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_pushPatternAsNonBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_pushPatternUsingDrawable\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_drawdownFunds_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_drawdownFunds_pullPatternForCollateral\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_drawdownFunds_pushPatternForCollateral\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_drawdownFunds_withoutAdditionalCollateralRequired\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_excessCollateral_varyCollateral\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_excessCollateral_varyDrawableFunds\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_excessCollateral_varyPrincipal\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pullPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pullPatternFundsRedirect\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pullPatternOverFund\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pushPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pushPatternExtraFundsWhileActive\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pushPatternExtraFundsWhileNotActive\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pushPatternFundsRedirect\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_fundLoan_pushPatternOverFund\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_getAdditionalCollateralRequiredFor_varyAmount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_getAdditionalCollateralRequiredFor_varyCollateralRequired\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_getAdditionalCollateralRequiredFor_varyDrawableFunds\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_getAdditionalCollateralRequiredFor_varyPrincipal\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_makePayment_pullPatternAsBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_makePayment_pullPatternAsNonBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_makePayment_pullPatternUsingDrawable\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_makePayment_pushPatternAsBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_makePayment_pushPatternAsNonBorrower\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_makePayment_pushPatternUsingDrawable\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_migrate_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_postCollateral_pullPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_postCollateral_pushPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_proposeNewTerms_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_proposeNewTerms_invalidDeadline\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_rejectNewTerms_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_removeCollateral_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_repossess_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_returnFunds_pullPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_returnFunds_pushPattern\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_setBorrower_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_setImplementation_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_setLender_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_skim_acl\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_superFactory\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_upgrade_acl\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static MAPLELOANTESTS_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct MapleLoanTests<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for MapleLoanTests<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for MapleLoanTests<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(MapleLoanTests))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> MapleLoanTests<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), MAPLELOANTESTS_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                MAPLELOANTESTS_ABI.clone(),
                MAPLELOANTESTS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptBorrower_acl` (0xe42b9ecf) function"]
        pub fn test_accept_borrower_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([228, 43, 158, 207], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptLender_acl` (0x7fe2a109) function"]
        pub fn test_accept_lender_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([127, 226, 161, 9], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_acl` (0xa9b2912b) function"]
        pub fn test_accept_new_terms_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([169, 178, 145, 43], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_extraFunds` (0x46e1abe6) function"]
        pub fn test_accept_new_terms_extra_funds(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([70, 225, 171, 230], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_pullPattern` (0xd67883c7) function"]
        pub fn test_accept_new_terms_pull_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([214, 120, 131, 199], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_pushPattern` (0x61f21cba) function"]
        pub fn test_accept_new_terms_push_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([97, 242, 28, 186], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_claimFunds_acl` (0x64dc4d44) function"]
        pub fn test_claim_funds_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([100, 220, 77, 68], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_pullPatternAsBorrower` (0x2e5d0cdd) function"]
        pub fn test_close_loan_pull_pattern_as_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([46, 93, 12, 221], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_pullPatternAsNonBorrower` (0x26cd3a2c) function"]
        pub fn test_close_loan_pull_pattern_as_non_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([38, 205, 58, 44], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_pullPatternUsingDrawable` (0x3ddf264f) function"]
        pub fn test_close_loan_pull_pattern_using_drawable(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([61, 223, 38, 79], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_pushPatternAsBorrower` (0xefaed5eb) function"]
        pub fn test_close_loan_push_pattern_as_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([239, 174, 213, 235], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_pushPatternAsNonBorrower` (0x77c01cd1) function"]
        pub fn test_close_loan_push_pattern_as_non_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([119, 192, 28, 209], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_pushPatternUsingDrawable` (0x16ca7886) function"]
        pub fn test_close_loan_push_pattern_using_drawable(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([22, 202, 120, 134], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_drawdownFunds_acl` (0xc54f3265) function"]
        pub fn test_drawdown_funds_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([197, 79, 50, 101], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_drawdownFunds_pullPatternForCollateral` (0xcf1e3c6a) function"]
        pub fn test_drawdown_funds_pull_pattern_for_collateral(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([207, 30, 60, 106], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_drawdownFunds_pushPatternForCollateral` (0xe7cb3446) function"]
        pub fn test_drawdown_funds_push_pattern_for_collateral(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([231, 203, 52, 70], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_drawdownFunds_withoutAdditionalCollateralRequired` (0x801bee25) function"]
        pub fn test_drawdown_funds_without_additional_collateral_required(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([128, 27, 238, 37], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_excessCollateral_varyCollateral` (0xda001450) function"]
        pub fn test_excess_collateral_vary_collateral(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([218, 0, 20, 80], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_excessCollateral_varyDrawableFunds` (0xfc7fdae0) function"]
        pub fn test_excess_collateral_vary_drawable_funds(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([252, 127, 218, 224], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_excessCollateral_varyPrincipal` (0xafc7359d) function"]
        pub fn test_excess_collateral_vary_principal(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 199, 53, 157], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pullPattern` (0x4d768336) function"]
        pub fn test_fund_loan_pull_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([77, 118, 131, 54], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pullPatternFundsRedirect` (0x37e74df7) function"]
        pub fn test_fund_loan_pull_pattern_funds_redirect(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([55, 231, 77, 247], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pullPatternOverFund` (0x8e6b1a27) function"]
        pub fn test_fund_loan_pull_pattern_over_fund(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([142, 107, 26, 39], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pushPattern` (0xa711f07e) function"]
        pub fn test_fund_loan_push_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([167, 17, 240, 126], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pushPatternExtraFundsWhileActive` (0xa5e7970b) function"]
        pub fn test_fund_loan_push_pattern_extra_funds_while_active(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([165, 231, 151, 11], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pushPatternExtraFundsWhileNotActive` (0x742ce15c) function"]
        pub fn test_fund_loan_push_pattern_extra_funds_while_not_active(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([116, 44, 225, 92], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pushPatternFundsRedirect` (0x3199e53a) function"]
        pub fn test_fund_loan_push_pattern_funds_redirect(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([49, 153, 229, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_fundLoan_pushPatternOverFund` (0x321c5e79) function"]
        pub fn test_fund_loan_push_pattern_over_fund(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([50, 28, 94, 121], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_getAdditionalCollateralRequiredFor_varyAmount` (0x5759ce15) function"]
        pub fn test_get_additional_collateral_required_for_vary_amount(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([87, 89, 206, 21], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_getAdditionalCollateralRequiredFor_varyCollateralRequired` (0x37981f50) function"]
        pub fn test_get_additional_collateral_required_for_vary_collateral_required(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([55, 152, 31, 80], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_getAdditionalCollateralRequiredFor_varyDrawableFunds` (0x7db51319) function"]
        pub fn test_get_additional_collateral_required_for_vary_drawable_funds(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([125, 181, 19, 25], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_getAdditionalCollateralRequiredFor_varyPrincipal` (0x97943b38) function"]
        pub fn test_get_additional_collateral_required_for_vary_principal(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 148, 59, 56], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_makePayment_pullPatternAsBorrower` (0x6f21e1cd) function"]
        pub fn test_make_payment_pull_pattern_as_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 33, 225, 205], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_makePayment_pullPatternAsNonBorrower` (0x4c53bd6c) function"]
        pub fn test_make_payment_pull_pattern_as_non_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([76, 83, 189, 108], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_makePayment_pullPatternUsingDrawable` (0x02ef68ad) function"]
        pub fn test_make_payment_pull_pattern_using_drawable(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([2, 239, 104, 173], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_makePayment_pushPatternAsBorrower` (0x084061dc) function"]
        pub fn test_make_payment_push_pattern_as_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([8, 64, 97, 220], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_makePayment_pushPatternAsNonBorrower` (0x49262358) function"]
        pub fn test_make_payment_push_pattern_as_non_borrower(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([73, 38, 35, 88], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_makePayment_pushPatternUsingDrawable` (0x8ab1e279) function"]
        pub fn test_make_payment_push_pattern_using_drawable(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([138, 177, 226, 121], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_migrate_acl` (0xa013a465) function"]
        pub fn test_migrate_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([160, 19, 164, 101], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_postCollateral_pullPattern` (0x666bc6f0) function"]
        pub fn test_post_collateral_pull_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([102, 107, 198, 240], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_postCollateral_pushPattern` (0x3cd773c6) function"]
        pub fn test_post_collateral_push_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([60, 215, 115, 198], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_proposeNewTerms_acl` (0x372299bd) function"]
        pub fn test_propose_new_terms_acl(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([55, 34, 153, 189], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_proposeNewTerms_invalidDeadline` (0x46027e73) function"]
        pub fn test_propose_new_terms_invalid_deadline(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([70, 2, 126, 115], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_rejectNewTerms_acl` (0xe7f770cc) function"]
        pub fn test_reject_new_terms_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([231, 247, 112, 204], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_removeCollateral_acl` (0x01a53f1c) function"]
        pub fn test_remove_collateral_acl(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([1, 165, 63, 28], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_repossess_acl` (0x4d1d3365) function"]
        pub fn test_repossess_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([77, 29, 51, 101], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_returnFunds_pullPattern` (0xed123e84) function"]
        pub fn test_return_funds_pull_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([237, 18, 62, 132], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_returnFunds_pushPattern` (0xb6a94d5a) function"]
        pub fn test_return_funds_push_pattern(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([182, 169, 77, 90], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_setBorrower_acl` (0xe47cc8e2) function"]
        pub fn test_set_borrower_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([228, 124, 200, 226], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_setImplementation_acl` (0xf368638c) function"]
        pub fn test_set_implementation_acl(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([243, 104, 99, 140], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_setLender_acl` (0x0ac2bdf1) function"]
        pub fn test_set_lender_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 194, 189, 241], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_skim_acl` (0x3bdcbc0b) function"]
        pub fn test_skim_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 220, 188, 11], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_superFactory` (0x403ada59) function"]
        pub fn test_super_factory(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([64, 58, 218, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_upgrade_acl` (0xbe537318) function"]
        pub fn test_upgrade_acl(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([190, 83, 115, 24], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, MapleLoanTestsEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for MapleLoanTests<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanTestsEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for MapleLoanTestsEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(MapleLoanTestsEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for MapleLoanTestsEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MapleLoanTestsEvents::LogFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogAddressFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogBytesFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogBytes32Filter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogIntFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedAddressFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedBytesFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedIntFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedStringFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogNamedUintFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogStringFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogUintFilter(element) => element.fmt(f),
                MapleLoanTestsEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `test_acceptBorrower_acl`function with signature `test_acceptBorrower_acl()` and selector `[228, 43, 158, 207]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_acceptBorrower_acl", abi = "test_acceptBorrower_acl()")]
    pub struct TestAcceptBorrowerAclCall;
    #[doc = "Container type for all input parameters for the `test_acceptLender_acl`function with signature `test_acceptLender_acl()` and selector `[127, 226, 161, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_acceptLender_acl", abi = "test_acceptLender_acl()")]
    pub struct TestAcceptLenderAclCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_acl`function with signature `test_acceptNewTerms_acl()` and selector `[169, 178, 145, 43]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_acceptNewTerms_acl", abi = "test_acceptNewTerms_acl()")]
    pub struct TestAcceptNewTermsAclCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_extraFunds`function with signature `test_acceptNewTerms_extraFunds()` and selector `[70, 225, 171, 230]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_extraFunds",
        abi = "test_acceptNewTerms_extraFunds()"
    )]
    pub struct TestAcceptNewTermsExtraFundsCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_pullPattern`function with signature `test_acceptNewTerms_pullPattern()` and selector `[214, 120, 131, 199]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_pullPattern",
        abi = "test_acceptNewTerms_pullPattern()"
    )]
    pub struct TestAcceptNewTermsPullPatternCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_pushPattern`function with signature `test_acceptNewTerms_pushPattern()` and selector `[97, 242, 28, 186]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_pushPattern",
        abi = "test_acceptNewTerms_pushPattern()"
    )]
    pub struct TestAcceptNewTermsPushPatternCall;
    #[doc = "Container type for all input parameters for the `test_claimFunds_acl`function with signature `test_claimFunds_acl()` and selector `[100, 220, 77, 68]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_claimFunds_acl", abi = "test_claimFunds_acl()")]
    pub struct TestClaimFundsAclCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_pullPatternAsBorrower`function with signature `test_closeLoan_pullPatternAsBorrower()` and selector `[46, 93, 12, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_pullPatternAsBorrower",
        abi = "test_closeLoan_pullPatternAsBorrower()"
    )]
    pub struct TestCloseLoanPullPatternAsBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_pullPatternAsNonBorrower`function with signature `test_closeLoan_pullPatternAsNonBorrower()` and selector `[38, 205, 58, 44]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_pullPatternAsNonBorrower",
        abi = "test_closeLoan_pullPatternAsNonBorrower()"
    )]
    pub struct TestCloseLoanPullPatternAsNonBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_pullPatternUsingDrawable`function with signature `test_closeLoan_pullPatternUsingDrawable()` and selector `[61, 223, 38, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_pullPatternUsingDrawable",
        abi = "test_closeLoan_pullPatternUsingDrawable()"
    )]
    pub struct TestCloseLoanPullPatternUsingDrawableCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_pushPatternAsBorrower`function with signature `test_closeLoan_pushPatternAsBorrower()` and selector `[239, 174, 213, 235]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_pushPatternAsBorrower",
        abi = "test_closeLoan_pushPatternAsBorrower()"
    )]
    pub struct TestCloseLoanPushPatternAsBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_pushPatternAsNonBorrower`function with signature `test_closeLoan_pushPatternAsNonBorrower()` and selector `[119, 192, 28, 209]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_pushPatternAsNonBorrower",
        abi = "test_closeLoan_pushPatternAsNonBorrower()"
    )]
    pub struct TestCloseLoanPushPatternAsNonBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_pushPatternUsingDrawable`function with signature `test_closeLoan_pushPatternUsingDrawable()` and selector `[22, 202, 120, 134]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_pushPatternUsingDrawable",
        abi = "test_closeLoan_pushPatternUsingDrawable()"
    )]
    pub struct TestCloseLoanPushPatternUsingDrawableCall;
    #[doc = "Container type for all input parameters for the `test_drawdownFunds_acl`function with signature `test_drawdownFunds_acl()` and selector `[197, 79, 50, 101]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_drawdownFunds_acl", abi = "test_drawdownFunds_acl()")]
    pub struct TestDrawdownFundsAclCall;
    #[doc = "Container type for all input parameters for the `test_drawdownFunds_pullPatternForCollateral`function with signature `test_drawdownFunds_pullPatternForCollateral()` and selector `[207, 30, 60, 106]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_drawdownFunds_pullPatternForCollateral",
        abi = "test_drawdownFunds_pullPatternForCollateral()"
    )]
    pub struct TestDrawdownFundsPullPatternForCollateralCall;
    #[doc = "Container type for all input parameters for the `test_drawdownFunds_pushPatternForCollateral`function with signature `test_drawdownFunds_pushPatternForCollateral()` and selector `[231, 203, 52, 70]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_drawdownFunds_pushPatternForCollateral",
        abi = "test_drawdownFunds_pushPatternForCollateral()"
    )]
    pub struct TestDrawdownFundsPushPatternForCollateralCall;
    #[doc = "Container type for all input parameters for the `test_drawdownFunds_withoutAdditionalCollateralRequired`function with signature `test_drawdownFunds_withoutAdditionalCollateralRequired()` and selector `[128, 27, 238, 37]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_drawdownFunds_withoutAdditionalCollateralRequired",
        abi = "test_drawdownFunds_withoutAdditionalCollateralRequired()"
    )]
    pub struct TestDrawdownFundsWithoutAdditionalCollateralRequiredCall;
    #[doc = "Container type for all input parameters for the `test_excessCollateral_varyCollateral`function with signature `test_excessCollateral_varyCollateral()` and selector `[218, 0, 20, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_excessCollateral_varyCollateral",
        abi = "test_excessCollateral_varyCollateral()"
    )]
    pub struct TestExcessCollateralVaryCollateralCall;
    #[doc = "Container type for all input parameters for the `test_excessCollateral_varyDrawableFunds`function with signature `test_excessCollateral_varyDrawableFunds()` and selector `[252, 127, 218, 224]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_excessCollateral_varyDrawableFunds",
        abi = "test_excessCollateral_varyDrawableFunds()"
    )]
    pub struct TestExcessCollateralVaryDrawableFundsCall;
    #[doc = "Container type for all input parameters for the `test_excessCollateral_varyPrincipal`function with signature `test_excessCollateral_varyPrincipal()` and selector `[175, 199, 53, 157]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_excessCollateral_varyPrincipal",
        abi = "test_excessCollateral_varyPrincipal()"
    )]
    pub struct TestExcessCollateralVaryPrincipalCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pullPattern`function with signature `test_fundLoan_pullPattern()` and selector `[77, 118, 131, 54]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pullPattern",
        abi = "test_fundLoan_pullPattern()"
    )]
    pub struct TestFundLoanPullPatternCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pullPatternFundsRedirect`function with signature `test_fundLoan_pullPatternFundsRedirect()` and selector `[55, 231, 77, 247]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pullPatternFundsRedirect",
        abi = "test_fundLoan_pullPatternFundsRedirect()"
    )]
    pub struct TestFundLoanPullPatternFundsRedirectCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pullPatternOverFund`function with signature `test_fundLoan_pullPatternOverFund()` and selector `[142, 107, 26, 39]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pullPatternOverFund",
        abi = "test_fundLoan_pullPatternOverFund()"
    )]
    pub struct TestFundLoanPullPatternOverFundCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pushPattern`function with signature `test_fundLoan_pushPattern()` and selector `[167, 17, 240, 126]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pushPattern",
        abi = "test_fundLoan_pushPattern()"
    )]
    pub struct TestFundLoanPushPatternCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pushPatternExtraFundsWhileActive`function with signature `test_fundLoan_pushPatternExtraFundsWhileActive()` and selector `[165, 231, 151, 11]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pushPatternExtraFundsWhileActive",
        abi = "test_fundLoan_pushPatternExtraFundsWhileActive()"
    )]
    pub struct TestFundLoanPushPatternExtraFundsWhileActiveCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pushPatternExtraFundsWhileNotActive`function with signature `test_fundLoan_pushPatternExtraFundsWhileNotActive()` and selector `[116, 44, 225, 92]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pushPatternExtraFundsWhileNotActive",
        abi = "test_fundLoan_pushPatternExtraFundsWhileNotActive()"
    )]
    pub struct TestFundLoanPushPatternExtraFundsWhileNotActiveCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pushPatternFundsRedirect`function with signature `test_fundLoan_pushPatternFundsRedirect()` and selector `[49, 153, 229, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pushPatternFundsRedirect",
        abi = "test_fundLoan_pushPatternFundsRedirect()"
    )]
    pub struct TestFundLoanPushPatternFundsRedirectCall;
    #[doc = "Container type for all input parameters for the `test_fundLoan_pushPatternOverFund`function with signature `test_fundLoan_pushPatternOverFund()` and selector `[50, 28, 94, 121]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_fundLoan_pushPatternOverFund",
        abi = "test_fundLoan_pushPatternOverFund()"
    )]
    pub struct TestFundLoanPushPatternOverFundCall;
    #[doc = "Container type for all input parameters for the `test_getAdditionalCollateralRequiredFor_varyAmount`function with signature `test_getAdditionalCollateralRequiredFor_varyAmount()` and selector `[87, 89, 206, 21]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_getAdditionalCollateralRequiredFor_varyAmount",
        abi = "test_getAdditionalCollateralRequiredFor_varyAmount()"
    )]
    pub struct TestGetAdditionalCollateralRequiredForVaryAmountCall;
    #[doc = "Container type for all input parameters for the `test_getAdditionalCollateralRequiredFor_varyCollateralRequired`function with signature `test_getAdditionalCollateralRequiredFor_varyCollateralRequired()` and selector `[55, 152, 31, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_getAdditionalCollateralRequiredFor_varyCollateralRequired",
        abi = "test_getAdditionalCollateralRequiredFor_varyCollateralRequired()"
    )]
    pub struct TestGetAdditionalCollateralRequiredForVaryCollateralRequiredCall;
    #[doc = "Container type for all input parameters for the `test_getAdditionalCollateralRequiredFor_varyDrawableFunds`function with signature `test_getAdditionalCollateralRequiredFor_varyDrawableFunds()` and selector `[125, 181, 19, 25]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_getAdditionalCollateralRequiredFor_varyDrawableFunds",
        abi = "test_getAdditionalCollateralRequiredFor_varyDrawableFunds()"
    )]
    pub struct TestGetAdditionalCollateralRequiredForVaryDrawableFundsCall;
    #[doc = "Container type for all input parameters for the `test_getAdditionalCollateralRequiredFor_varyPrincipal`function with signature `test_getAdditionalCollateralRequiredFor_varyPrincipal()` and selector `[151, 148, 59, 56]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_getAdditionalCollateralRequiredFor_varyPrincipal",
        abi = "test_getAdditionalCollateralRequiredFor_varyPrincipal()"
    )]
    pub struct TestGetAdditionalCollateralRequiredForVaryPrincipalCall;
    #[doc = "Container type for all input parameters for the `test_makePayment_pullPatternAsBorrower`function with signature `test_makePayment_pullPatternAsBorrower()` and selector `[111, 33, 225, 205]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_makePayment_pullPatternAsBorrower",
        abi = "test_makePayment_pullPatternAsBorrower()"
    )]
    pub struct TestMakePaymentPullPatternAsBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_makePayment_pullPatternAsNonBorrower`function with signature `test_makePayment_pullPatternAsNonBorrower()` and selector `[76, 83, 189, 108]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_makePayment_pullPatternAsNonBorrower",
        abi = "test_makePayment_pullPatternAsNonBorrower()"
    )]
    pub struct TestMakePaymentPullPatternAsNonBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_makePayment_pullPatternUsingDrawable`function with signature `test_makePayment_pullPatternUsingDrawable()` and selector `[2, 239, 104, 173]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_makePayment_pullPatternUsingDrawable",
        abi = "test_makePayment_pullPatternUsingDrawable()"
    )]
    pub struct TestMakePaymentPullPatternUsingDrawableCall;
    #[doc = "Container type for all input parameters for the `test_makePayment_pushPatternAsBorrower`function with signature `test_makePayment_pushPatternAsBorrower()` and selector `[8, 64, 97, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_makePayment_pushPatternAsBorrower",
        abi = "test_makePayment_pushPatternAsBorrower()"
    )]
    pub struct TestMakePaymentPushPatternAsBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_makePayment_pushPatternAsNonBorrower`function with signature `test_makePayment_pushPatternAsNonBorrower()` and selector `[73, 38, 35, 88]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_makePayment_pushPatternAsNonBorrower",
        abi = "test_makePayment_pushPatternAsNonBorrower()"
    )]
    pub struct TestMakePaymentPushPatternAsNonBorrowerCall;
    #[doc = "Container type for all input parameters for the `test_makePayment_pushPatternUsingDrawable`function with signature `test_makePayment_pushPatternUsingDrawable()` and selector `[138, 177, 226, 121]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_makePayment_pushPatternUsingDrawable",
        abi = "test_makePayment_pushPatternUsingDrawable()"
    )]
    pub struct TestMakePaymentPushPatternUsingDrawableCall;
    #[doc = "Container type for all input parameters for the `test_migrate_acl`function with signature `test_migrate_acl()` and selector `[160, 19, 164, 101]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_migrate_acl", abi = "test_migrate_acl()")]
    pub struct TestMigrateAclCall;
    #[doc = "Container type for all input parameters for the `test_postCollateral_pullPattern`function with signature `test_postCollateral_pullPattern()` and selector `[102, 107, 198, 240]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_postCollateral_pullPattern",
        abi = "test_postCollateral_pullPattern()"
    )]
    pub struct TestPostCollateralPullPatternCall;
    #[doc = "Container type for all input parameters for the `test_postCollateral_pushPattern`function with signature `test_postCollateral_pushPattern()` and selector `[60, 215, 115, 198]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_postCollateral_pushPattern",
        abi = "test_postCollateral_pushPattern()"
    )]
    pub struct TestPostCollateralPushPatternCall;
    #[doc = "Container type for all input parameters for the `test_proposeNewTerms_acl`function with signature `test_proposeNewTerms_acl()` and selector `[55, 34, 153, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_proposeNewTerms_acl", abi = "test_proposeNewTerms_acl()")]
    pub struct TestProposeNewTermsAclCall;
    #[doc = "Container type for all input parameters for the `test_proposeNewTerms_invalidDeadline`function with signature `test_proposeNewTerms_invalidDeadline()` and selector `[70, 2, 126, 115]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_proposeNewTerms_invalidDeadline",
        abi = "test_proposeNewTerms_invalidDeadline()"
    )]
    pub struct TestProposeNewTermsInvalidDeadlineCall;
    #[doc = "Container type for all input parameters for the `test_rejectNewTerms_acl`function with signature `test_rejectNewTerms_acl()` and selector `[231, 247, 112, 204]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_rejectNewTerms_acl", abi = "test_rejectNewTerms_acl()")]
    pub struct TestRejectNewTermsAclCall;
    #[doc = "Container type for all input parameters for the `test_removeCollateral_acl`function with signature `test_removeCollateral_acl()` and selector `[1, 165, 63, 28]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_removeCollateral_acl",
        abi = "test_removeCollateral_acl()"
    )]
    pub struct TestRemoveCollateralAclCall;
    #[doc = "Container type for all input parameters for the `test_repossess_acl`function with signature `test_repossess_acl()` and selector `[77, 29, 51, 101]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_repossess_acl", abi = "test_repossess_acl()")]
    pub struct TestRepossessAclCall;
    #[doc = "Container type for all input parameters for the `test_returnFunds_pullPattern`function with signature `test_returnFunds_pullPattern()` and selector `[237, 18, 62, 132]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_returnFunds_pullPattern",
        abi = "test_returnFunds_pullPattern()"
    )]
    pub struct TestReturnFundsPullPatternCall;
    #[doc = "Container type for all input parameters for the `test_returnFunds_pushPattern`function with signature `test_returnFunds_pushPattern()` and selector `[182, 169, 77, 90]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_returnFunds_pushPattern",
        abi = "test_returnFunds_pushPattern()"
    )]
    pub struct TestReturnFundsPushPatternCall;
    #[doc = "Container type for all input parameters for the `test_setBorrower_acl`function with signature `test_setBorrower_acl()` and selector `[228, 124, 200, 226]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_setBorrower_acl", abi = "test_setBorrower_acl()")]
    pub struct TestSetBorrowerAclCall;
    #[doc = "Container type for all input parameters for the `test_setImplementation_acl`function with signature `test_setImplementation_acl()` and selector `[243, 104, 99, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_setImplementation_acl",
        abi = "test_setImplementation_acl()"
    )]
    pub struct TestSetImplementationAclCall;
    #[doc = "Container type for all input parameters for the `test_setLender_acl`function with signature `test_setLender_acl()` and selector `[10, 194, 189, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_setLender_acl", abi = "test_setLender_acl()")]
    pub struct TestSetLenderAclCall;
    #[doc = "Container type for all input parameters for the `test_skim_acl`function with signature `test_skim_acl()` and selector `[59, 220, 188, 11]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_skim_acl", abi = "test_skim_acl()")]
    pub struct TestSkimAclCall;
    #[doc = "Container type for all input parameters for the `test_superFactory`function with signature `test_superFactory()` and selector `[64, 58, 218, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_superFactory", abi = "test_superFactory()")]
    pub struct TestSuperFactoryCall;
    #[doc = "Container type for all input parameters for the `test_upgrade_acl`function with signature `test_upgrade_acl()` and selector `[190, 83, 115, 24]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_upgrade_acl", abi = "test_upgrade_acl()")]
    pub struct TestUpgradeAclCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanTestsCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestAcceptBorrowerAcl(TestAcceptBorrowerAclCall),
        TestAcceptLenderAcl(TestAcceptLenderAclCall),
        TestAcceptNewTermsAcl(TestAcceptNewTermsAclCall),
        TestAcceptNewTermsExtraFunds(TestAcceptNewTermsExtraFundsCall),
        TestAcceptNewTermsPullPattern(TestAcceptNewTermsPullPatternCall),
        TestAcceptNewTermsPushPattern(TestAcceptNewTermsPushPatternCall),
        TestClaimFundsAcl(TestClaimFundsAclCall),
        TestCloseLoanPullPatternAsBorrower(TestCloseLoanPullPatternAsBorrowerCall),
        TestCloseLoanPullPatternAsNonBorrower(TestCloseLoanPullPatternAsNonBorrowerCall),
        TestCloseLoanPullPatternUsingDrawable(TestCloseLoanPullPatternUsingDrawableCall),
        TestCloseLoanPushPatternAsBorrower(TestCloseLoanPushPatternAsBorrowerCall),
        TestCloseLoanPushPatternAsNonBorrower(TestCloseLoanPushPatternAsNonBorrowerCall),
        TestCloseLoanPushPatternUsingDrawable(TestCloseLoanPushPatternUsingDrawableCall),
        TestDrawdownFundsAcl(TestDrawdownFundsAclCall),
        TestDrawdownFundsPullPatternForCollateral(TestDrawdownFundsPullPatternForCollateralCall),
        TestDrawdownFundsPushPatternForCollateral(TestDrawdownFundsPushPatternForCollateralCall),
        TestDrawdownFundsWithoutAdditionalCollateralRequired(
            TestDrawdownFundsWithoutAdditionalCollateralRequiredCall,
        ),
        TestExcessCollateralVaryCollateral(TestExcessCollateralVaryCollateralCall),
        TestExcessCollateralVaryDrawableFunds(TestExcessCollateralVaryDrawableFundsCall),
        TestExcessCollateralVaryPrincipal(TestExcessCollateralVaryPrincipalCall),
        TestFundLoanPullPattern(TestFundLoanPullPatternCall),
        TestFundLoanPullPatternFundsRedirect(TestFundLoanPullPatternFundsRedirectCall),
        TestFundLoanPullPatternOverFund(TestFundLoanPullPatternOverFundCall),
        TestFundLoanPushPattern(TestFundLoanPushPatternCall),
        TestFundLoanPushPatternExtraFundsWhileActive(
            TestFundLoanPushPatternExtraFundsWhileActiveCall,
        ),
        TestFundLoanPushPatternExtraFundsWhileNotActive(
            TestFundLoanPushPatternExtraFundsWhileNotActiveCall,
        ),
        TestFundLoanPushPatternFundsRedirect(TestFundLoanPushPatternFundsRedirectCall),
        TestFundLoanPushPatternOverFund(TestFundLoanPushPatternOverFundCall),
        TestGetAdditionalCollateralRequiredForVaryAmount(
            TestGetAdditionalCollateralRequiredForVaryAmountCall,
        ),
        TestGetAdditionalCollateralRequiredForVaryCollateralRequired(
            TestGetAdditionalCollateralRequiredForVaryCollateralRequiredCall,
        ),
        TestGetAdditionalCollateralRequiredForVaryDrawableFunds(
            TestGetAdditionalCollateralRequiredForVaryDrawableFundsCall,
        ),
        TestGetAdditionalCollateralRequiredForVaryPrincipal(
            TestGetAdditionalCollateralRequiredForVaryPrincipalCall,
        ),
        TestMakePaymentPullPatternAsBorrower(TestMakePaymentPullPatternAsBorrowerCall),
        TestMakePaymentPullPatternAsNonBorrower(TestMakePaymentPullPatternAsNonBorrowerCall),
        TestMakePaymentPullPatternUsingDrawable(TestMakePaymentPullPatternUsingDrawableCall),
        TestMakePaymentPushPatternAsBorrower(TestMakePaymentPushPatternAsBorrowerCall),
        TestMakePaymentPushPatternAsNonBorrower(TestMakePaymentPushPatternAsNonBorrowerCall),
        TestMakePaymentPushPatternUsingDrawable(TestMakePaymentPushPatternUsingDrawableCall),
        TestMigrateAcl(TestMigrateAclCall),
        TestPostCollateralPullPattern(TestPostCollateralPullPatternCall),
        TestPostCollateralPushPattern(TestPostCollateralPushPatternCall),
        TestProposeNewTermsAcl(TestProposeNewTermsAclCall),
        TestProposeNewTermsInvalidDeadline(TestProposeNewTermsInvalidDeadlineCall),
        TestRejectNewTermsAcl(TestRejectNewTermsAclCall),
        TestRemoveCollateralAcl(TestRemoveCollateralAclCall),
        TestRepossessAcl(TestRepossessAclCall),
        TestReturnFundsPullPattern(TestReturnFundsPullPatternCall),
        TestReturnFundsPushPattern(TestReturnFundsPushPatternCall),
        TestSetBorrowerAcl(TestSetBorrowerAclCall),
        TestSetImplementationAcl(TestSetImplementationAclCall),
        TestSetLenderAcl(TestSetLenderAclCall),
        TestSkimAcl(TestSkimAclCall),
        TestSuperFactory(TestSuperFactoryCall),
        TestUpgradeAcl(TestUpgradeAclCall),
    }
    impl ethers::core::abi::AbiDecode for MapleLoanTestsCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestAcceptBorrowerAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestAcceptBorrowerAcl(decoded));
            }
            if let Ok(decoded) =
                <TestAcceptLenderAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestAcceptLenderAcl(decoded));
            }
            if let Ok(decoded) =
                <TestAcceptNewTermsAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestAcceptNewTermsAcl(decoded));
            }
            if let Ok(decoded) =
                <TestAcceptNewTermsExtraFundsCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestAcceptNewTermsExtraFunds(decoded));
            }
            if let Ok(decoded) =
                <TestAcceptNewTermsPullPatternCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestAcceptNewTermsPullPattern(decoded));
            }
            if let Ok(decoded) =
                <TestAcceptNewTermsPushPatternCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestAcceptNewTermsPushPattern(decoded));
            }
            if let Ok(decoded) =
                <TestClaimFundsAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestClaimFundsAcl(decoded));
            }
            if let Ok(decoded) =
                <TestCloseLoanPullPatternAsBorrowerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestCloseLoanPullPatternAsBorrower(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCloseLoanPullPatternAsNonBorrowerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestCloseLoanPullPatternAsNonBorrower(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCloseLoanPullPatternUsingDrawableCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestCloseLoanPullPatternUsingDrawable(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCloseLoanPushPatternAsBorrowerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestCloseLoanPushPatternAsBorrower(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCloseLoanPushPatternAsNonBorrowerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestCloseLoanPushPatternAsNonBorrower(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCloseLoanPushPatternUsingDrawableCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestCloseLoanPushPatternUsingDrawable(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestDrawdownFundsAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestDrawdownFundsAcl(decoded));
            }
            if let Ok (decoded) = < TestDrawdownFundsPullPatternForCollateralCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestDrawdownFundsPullPatternForCollateral (decoded)) }
            if let Ok (decoded) = < TestDrawdownFundsPushPatternForCollateralCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestDrawdownFundsPushPatternForCollateral (decoded)) }
            if let Ok (decoded) = < TestDrawdownFundsWithoutAdditionalCollateralRequiredCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestDrawdownFundsWithoutAdditionalCollateralRequired (decoded)) }
            if let Ok(decoded) =
                <TestExcessCollateralVaryCollateralCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestExcessCollateralVaryCollateral(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestExcessCollateralVaryDrawableFundsCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestExcessCollateralVaryDrawableFunds(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestExcessCollateralVaryPrincipalCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestExcessCollateralVaryPrincipal(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFundLoanPullPatternCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestFundLoanPullPattern(decoded));
            }
            if let Ok(decoded) =
                <TestFundLoanPullPatternFundsRedirectCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestFundLoanPullPatternFundsRedirect(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFundLoanPullPatternOverFundCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestFundLoanPullPatternOverFund(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFundLoanPushPatternCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestFundLoanPushPattern(decoded));
            }
            if let Ok (decoded) = < TestFundLoanPushPatternExtraFundsWhileActiveCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestFundLoanPushPatternExtraFundsWhileActive (decoded)) }
            if let Ok (decoded) = < TestFundLoanPushPatternExtraFundsWhileNotActiveCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestFundLoanPushPatternExtraFundsWhileNotActive (decoded)) }
            if let Ok(decoded) =
                <TestFundLoanPushPatternFundsRedirectCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestFundLoanPushPatternFundsRedirect(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFundLoanPushPatternOverFundCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestFundLoanPushPatternOverFund(
                    decoded,
                ));
            }
            if let Ok (decoded) = < TestGetAdditionalCollateralRequiredForVaryAmountCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryAmount (decoded)) }
            if let Ok (decoded) = < TestGetAdditionalCollateralRequiredForVaryCollateralRequiredCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryCollateralRequired (decoded)) }
            if let Ok (decoded) = < TestGetAdditionalCollateralRequiredForVaryDrawableFundsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryDrawableFunds (decoded)) }
            if let Ok (decoded) = < TestGetAdditionalCollateralRequiredForVaryPrincipalCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryPrincipal (decoded)) }
            if let Ok(decoded) =
                <TestMakePaymentPullPatternAsBorrowerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestMakePaymentPullPatternAsBorrower(
                    decoded,
                ));
            }
            if let Ok (decoded) = < TestMakePaymentPullPatternAsNonBorrowerCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestMakePaymentPullPatternAsNonBorrower (decoded)) }
            if let Ok (decoded) = < TestMakePaymentPullPatternUsingDrawableCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestMakePaymentPullPatternUsingDrawable (decoded)) }
            if let Ok(decoded) =
                <TestMakePaymentPushPatternAsBorrowerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestMakePaymentPushPatternAsBorrower(
                    decoded,
                ));
            }
            if let Ok (decoded) = < TestMakePaymentPushPatternAsNonBorrowerCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestMakePaymentPushPatternAsNonBorrower (decoded)) }
            if let Ok (decoded) = < TestMakePaymentPushPatternUsingDrawableCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanTestsCalls :: TestMakePaymentPushPatternUsingDrawable (decoded)) }
            if let Ok(decoded) =
                <TestMigrateAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestMigrateAcl(decoded));
            }
            if let Ok(decoded) =
                <TestPostCollateralPullPatternCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestPostCollateralPullPattern(decoded));
            }
            if let Ok(decoded) =
                <TestPostCollateralPushPatternCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestPostCollateralPushPattern(decoded));
            }
            if let Ok(decoded) =
                <TestProposeNewTermsAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestProposeNewTermsAcl(decoded));
            }
            if let Ok(decoded) =
                <TestProposeNewTermsInvalidDeadlineCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestProposeNewTermsInvalidDeadline(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestRejectNewTermsAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestRejectNewTermsAcl(decoded));
            }
            if let Ok(decoded) =
                <TestRemoveCollateralAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestRemoveCollateralAcl(decoded));
            }
            if let Ok(decoded) =
                <TestRepossessAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestRepossessAcl(decoded));
            }
            if let Ok(decoded) =
                <TestReturnFundsPullPatternCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestReturnFundsPullPattern(decoded));
            }
            if let Ok(decoded) =
                <TestReturnFundsPushPatternCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestReturnFundsPushPattern(decoded));
            }
            if let Ok(decoded) =
                <TestSetBorrowerAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestSetBorrowerAcl(decoded));
            }
            if let Ok(decoded) =
                <TestSetImplementationAclCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MapleLoanTestsCalls::TestSetImplementationAcl(decoded));
            }
            if let Ok(decoded) =
                <TestSetLenderAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestSetLenderAcl(decoded));
            }
            if let Ok(decoded) =
                <TestSkimAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestSkimAcl(decoded));
            }
            if let Ok(decoded) =
                <TestSuperFactoryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestSuperFactory(decoded));
            }
            if let Ok(decoded) =
                <TestUpgradeAclCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanTestsCalls::TestUpgradeAcl(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for MapleLoanTestsCalls {
        fn encode(self) -> Vec<u8> {
            match self { MapleLoanTestsCalls :: IsTest (element) => element . encode () , MapleLoanTestsCalls :: Failed (element) => element . encode () , MapleLoanTestsCalls :: SetUp (element) => element . encode () , MapleLoanTestsCalls :: TestAcceptBorrowerAcl (element) => element . encode () , MapleLoanTestsCalls :: TestAcceptLenderAcl (element) => element . encode () , MapleLoanTestsCalls :: TestAcceptNewTermsAcl (element) => element . encode () , MapleLoanTestsCalls :: TestAcceptNewTermsExtraFunds (element) => element . encode () , MapleLoanTestsCalls :: TestAcceptNewTermsPullPattern (element) => element . encode () , MapleLoanTestsCalls :: TestAcceptNewTermsPushPattern (element) => element . encode () , MapleLoanTestsCalls :: TestClaimFundsAcl (element) => element . encode () , MapleLoanTestsCalls :: TestCloseLoanPullPatternAsBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestCloseLoanPullPatternAsNonBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestCloseLoanPullPatternUsingDrawable (element) => element . encode () , MapleLoanTestsCalls :: TestCloseLoanPushPatternAsBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestCloseLoanPushPatternAsNonBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestCloseLoanPushPatternUsingDrawable (element) => element . encode () , MapleLoanTestsCalls :: TestDrawdownFundsAcl (element) => element . encode () , MapleLoanTestsCalls :: TestDrawdownFundsPullPatternForCollateral (element) => element . encode () , MapleLoanTestsCalls :: TestDrawdownFundsPushPatternForCollateral (element) => element . encode () , MapleLoanTestsCalls :: TestDrawdownFundsWithoutAdditionalCollateralRequired (element) => element . encode () , MapleLoanTestsCalls :: TestExcessCollateralVaryCollateral (element) => element . encode () , MapleLoanTestsCalls :: TestExcessCollateralVaryDrawableFunds (element) => element . encode () , MapleLoanTestsCalls :: TestExcessCollateralVaryPrincipal (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPullPattern (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPullPatternFundsRedirect (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPullPatternOverFund (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPushPattern (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPushPatternExtraFundsWhileActive (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPushPatternExtraFundsWhileNotActive (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPushPatternFundsRedirect (element) => element . encode () , MapleLoanTestsCalls :: TestFundLoanPushPatternOverFund (element) => element . encode () , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryAmount (element) => element . encode () , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryCollateralRequired (element) => element . encode () , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryDrawableFunds (element) => element . encode () , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryPrincipal (element) => element . encode () , MapleLoanTestsCalls :: TestMakePaymentPullPatternAsBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestMakePaymentPullPatternAsNonBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestMakePaymentPullPatternUsingDrawable (element) => element . encode () , MapleLoanTestsCalls :: TestMakePaymentPushPatternAsBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestMakePaymentPushPatternAsNonBorrower (element) => element . encode () , MapleLoanTestsCalls :: TestMakePaymentPushPatternUsingDrawable (element) => element . encode () , MapleLoanTestsCalls :: TestMigrateAcl (element) => element . encode () , MapleLoanTestsCalls :: TestPostCollateralPullPattern (element) => element . encode () , MapleLoanTestsCalls :: TestPostCollateralPushPattern (element) => element . encode () , MapleLoanTestsCalls :: TestProposeNewTermsAcl (element) => element . encode () , MapleLoanTestsCalls :: TestProposeNewTermsInvalidDeadline (element) => element . encode () , MapleLoanTestsCalls :: TestRejectNewTermsAcl (element) => element . encode () , MapleLoanTestsCalls :: TestRemoveCollateralAcl (element) => element . encode () , MapleLoanTestsCalls :: TestRepossessAcl (element) => element . encode () , MapleLoanTestsCalls :: TestReturnFundsPullPattern (element) => element . encode () , MapleLoanTestsCalls :: TestReturnFundsPushPattern (element) => element . encode () , MapleLoanTestsCalls :: TestSetBorrowerAcl (element) => element . encode () , MapleLoanTestsCalls :: TestSetImplementationAcl (element) => element . encode () , MapleLoanTestsCalls :: TestSetLenderAcl (element) => element . encode () , MapleLoanTestsCalls :: TestSkimAcl (element) => element . encode () , MapleLoanTestsCalls :: TestSuperFactory (element) => element . encode () , MapleLoanTestsCalls :: TestUpgradeAcl (element) => element . encode () }
        }
    }
    impl ::std::fmt::Display for MapleLoanTestsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self { MapleLoanTestsCalls :: IsTest (element) => element . fmt (f) , MapleLoanTestsCalls :: Failed (element) => element . fmt (f) , MapleLoanTestsCalls :: SetUp (element) => element . fmt (f) , MapleLoanTestsCalls :: TestAcceptBorrowerAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestAcceptLenderAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestAcceptNewTermsAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestAcceptNewTermsExtraFunds (element) => element . fmt (f) , MapleLoanTestsCalls :: TestAcceptNewTermsPullPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestAcceptNewTermsPushPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestClaimFundsAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestCloseLoanPullPatternAsBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestCloseLoanPullPatternAsNonBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestCloseLoanPullPatternUsingDrawable (element) => element . fmt (f) , MapleLoanTestsCalls :: TestCloseLoanPushPatternAsBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestCloseLoanPushPatternAsNonBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestCloseLoanPushPatternUsingDrawable (element) => element . fmt (f) , MapleLoanTestsCalls :: TestDrawdownFundsAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestDrawdownFundsPullPatternForCollateral (element) => element . fmt (f) , MapleLoanTestsCalls :: TestDrawdownFundsPushPatternForCollateral (element) => element . fmt (f) , MapleLoanTestsCalls :: TestDrawdownFundsWithoutAdditionalCollateralRequired (element) => element . fmt (f) , MapleLoanTestsCalls :: TestExcessCollateralVaryCollateral (element) => element . fmt (f) , MapleLoanTestsCalls :: TestExcessCollateralVaryDrawableFunds (element) => element . fmt (f) , MapleLoanTestsCalls :: TestExcessCollateralVaryPrincipal (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPullPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPullPatternFundsRedirect (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPullPatternOverFund (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPushPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPushPatternExtraFundsWhileActive (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPushPatternExtraFundsWhileNotActive (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPushPatternFundsRedirect (element) => element . fmt (f) , MapleLoanTestsCalls :: TestFundLoanPushPatternOverFund (element) => element . fmt (f) , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryAmount (element) => element . fmt (f) , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryCollateralRequired (element) => element . fmt (f) , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryDrawableFunds (element) => element . fmt (f) , MapleLoanTestsCalls :: TestGetAdditionalCollateralRequiredForVaryPrincipal (element) => element . fmt (f) , MapleLoanTestsCalls :: TestMakePaymentPullPatternAsBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestMakePaymentPullPatternAsNonBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestMakePaymentPullPatternUsingDrawable (element) => element . fmt (f) , MapleLoanTestsCalls :: TestMakePaymentPushPatternAsBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestMakePaymentPushPatternAsNonBorrower (element) => element . fmt (f) , MapleLoanTestsCalls :: TestMakePaymentPushPatternUsingDrawable (element) => element . fmt (f) , MapleLoanTestsCalls :: TestMigrateAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestPostCollateralPullPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestPostCollateralPushPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestProposeNewTermsAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestProposeNewTermsInvalidDeadline (element) => element . fmt (f) , MapleLoanTestsCalls :: TestRejectNewTermsAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestRemoveCollateralAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestRepossessAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestReturnFundsPullPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestReturnFundsPushPattern (element) => element . fmt (f) , MapleLoanTestsCalls :: TestSetBorrowerAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestSetImplementationAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestSetLenderAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestSkimAcl (element) => element . fmt (f) , MapleLoanTestsCalls :: TestSuperFactory (element) => element . fmt (f) , MapleLoanTestsCalls :: TestUpgradeAcl (element) => element . fmt (f) }
        }
    }
    impl ::std::convert::From<IsTestCall> for MapleLoanTestsCalls {
        fn from(var: IsTestCall) -> Self {
            MapleLoanTestsCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for MapleLoanTestsCalls {
        fn from(var: FailedCall) -> Self {
            MapleLoanTestsCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for MapleLoanTestsCalls {
        fn from(var: SetUpCall) -> Self {
            MapleLoanTestsCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestAcceptBorrowerAclCall> for MapleLoanTestsCalls {
        fn from(var: TestAcceptBorrowerAclCall) -> Self {
            MapleLoanTestsCalls::TestAcceptBorrowerAcl(var)
        }
    }
    impl ::std::convert::From<TestAcceptLenderAclCall> for MapleLoanTestsCalls {
        fn from(var: TestAcceptLenderAclCall) -> Self {
            MapleLoanTestsCalls::TestAcceptLenderAcl(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsAclCall> for MapleLoanTestsCalls {
        fn from(var: TestAcceptNewTermsAclCall) -> Self {
            MapleLoanTestsCalls::TestAcceptNewTermsAcl(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsExtraFundsCall> for MapleLoanTestsCalls {
        fn from(var: TestAcceptNewTermsExtraFundsCall) -> Self {
            MapleLoanTestsCalls::TestAcceptNewTermsExtraFunds(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsPullPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestAcceptNewTermsPullPatternCall) -> Self {
            MapleLoanTestsCalls::TestAcceptNewTermsPullPattern(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsPushPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestAcceptNewTermsPushPatternCall) -> Self {
            MapleLoanTestsCalls::TestAcceptNewTermsPushPattern(var)
        }
    }
    impl ::std::convert::From<TestClaimFundsAclCall> for MapleLoanTestsCalls {
        fn from(var: TestClaimFundsAclCall) -> Self {
            MapleLoanTestsCalls::TestClaimFundsAcl(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanPullPatternAsBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestCloseLoanPullPatternAsBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestCloseLoanPullPatternAsBorrower(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanPullPatternAsNonBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestCloseLoanPullPatternAsNonBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestCloseLoanPullPatternAsNonBorrower(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanPullPatternUsingDrawableCall> for MapleLoanTestsCalls {
        fn from(var: TestCloseLoanPullPatternUsingDrawableCall) -> Self {
            MapleLoanTestsCalls::TestCloseLoanPullPatternUsingDrawable(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanPushPatternAsBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestCloseLoanPushPatternAsBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestCloseLoanPushPatternAsBorrower(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanPushPatternAsNonBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestCloseLoanPushPatternAsNonBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestCloseLoanPushPatternAsNonBorrower(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanPushPatternUsingDrawableCall> for MapleLoanTestsCalls {
        fn from(var: TestCloseLoanPushPatternUsingDrawableCall) -> Self {
            MapleLoanTestsCalls::TestCloseLoanPushPatternUsingDrawable(var)
        }
    }
    impl ::std::convert::From<TestDrawdownFundsAclCall> for MapleLoanTestsCalls {
        fn from(var: TestDrawdownFundsAclCall) -> Self {
            MapleLoanTestsCalls::TestDrawdownFundsAcl(var)
        }
    }
    impl ::std::convert::From<TestDrawdownFundsPullPatternForCollateralCall> for MapleLoanTestsCalls {
        fn from(var: TestDrawdownFundsPullPatternForCollateralCall) -> Self {
            MapleLoanTestsCalls::TestDrawdownFundsPullPatternForCollateral(var)
        }
    }
    impl ::std::convert::From<TestDrawdownFundsPushPatternForCollateralCall> for MapleLoanTestsCalls {
        fn from(var: TestDrawdownFundsPushPatternForCollateralCall) -> Self {
            MapleLoanTestsCalls::TestDrawdownFundsPushPatternForCollateral(var)
        }
    }
    impl ::std::convert::From<TestDrawdownFundsWithoutAdditionalCollateralRequiredCall>
        for MapleLoanTestsCalls
    {
        fn from(var: TestDrawdownFundsWithoutAdditionalCollateralRequiredCall) -> Self {
            MapleLoanTestsCalls::TestDrawdownFundsWithoutAdditionalCollateralRequired(var)
        }
    }
    impl ::std::convert::From<TestExcessCollateralVaryCollateralCall> for MapleLoanTestsCalls {
        fn from(var: TestExcessCollateralVaryCollateralCall) -> Self {
            MapleLoanTestsCalls::TestExcessCollateralVaryCollateral(var)
        }
    }
    impl ::std::convert::From<TestExcessCollateralVaryDrawableFundsCall> for MapleLoanTestsCalls {
        fn from(var: TestExcessCollateralVaryDrawableFundsCall) -> Self {
            MapleLoanTestsCalls::TestExcessCollateralVaryDrawableFunds(var)
        }
    }
    impl ::std::convert::From<TestExcessCollateralVaryPrincipalCall> for MapleLoanTestsCalls {
        fn from(var: TestExcessCollateralVaryPrincipalCall) -> Self {
            MapleLoanTestsCalls::TestExcessCollateralVaryPrincipal(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPullPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestFundLoanPullPatternCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPullPattern(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPullPatternFundsRedirectCall> for MapleLoanTestsCalls {
        fn from(var: TestFundLoanPullPatternFundsRedirectCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPullPatternFundsRedirect(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPullPatternOverFundCall> for MapleLoanTestsCalls {
        fn from(var: TestFundLoanPullPatternOverFundCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPullPatternOverFund(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPushPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestFundLoanPushPatternCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPushPattern(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPushPatternExtraFundsWhileActiveCall>
        for MapleLoanTestsCalls
    {
        fn from(var: TestFundLoanPushPatternExtraFundsWhileActiveCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPushPatternExtraFundsWhileActive(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPushPatternExtraFundsWhileNotActiveCall>
        for MapleLoanTestsCalls
    {
        fn from(var: TestFundLoanPushPatternExtraFundsWhileNotActiveCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPushPatternExtraFundsWhileNotActive(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPushPatternFundsRedirectCall> for MapleLoanTestsCalls {
        fn from(var: TestFundLoanPushPatternFundsRedirectCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPushPatternFundsRedirect(var)
        }
    }
    impl ::std::convert::From<TestFundLoanPushPatternOverFundCall> for MapleLoanTestsCalls {
        fn from(var: TestFundLoanPushPatternOverFundCall) -> Self {
            MapleLoanTestsCalls::TestFundLoanPushPatternOverFund(var)
        }
    }
    impl ::std::convert::From<TestGetAdditionalCollateralRequiredForVaryAmountCall>
        for MapleLoanTestsCalls
    {
        fn from(var: TestGetAdditionalCollateralRequiredForVaryAmountCall) -> Self {
            MapleLoanTestsCalls::TestGetAdditionalCollateralRequiredForVaryAmount(var)
        }
    }
    impl ::std::convert::From<TestGetAdditionalCollateralRequiredForVaryCollateralRequiredCall>
        for MapleLoanTestsCalls
    {
        fn from(var: TestGetAdditionalCollateralRequiredForVaryCollateralRequiredCall) -> Self {
            MapleLoanTestsCalls::TestGetAdditionalCollateralRequiredForVaryCollateralRequired(var)
        }
    }
    impl ::std::convert::From<TestGetAdditionalCollateralRequiredForVaryDrawableFundsCall>
        for MapleLoanTestsCalls
    {
        fn from(var: TestGetAdditionalCollateralRequiredForVaryDrawableFundsCall) -> Self {
            MapleLoanTestsCalls::TestGetAdditionalCollateralRequiredForVaryDrawableFunds(var)
        }
    }
    impl ::std::convert::From<TestGetAdditionalCollateralRequiredForVaryPrincipalCall>
        for MapleLoanTestsCalls
    {
        fn from(var: TestGetAdditionalCollateralRequiredForVaryPrincipalCall) -> Self {
            MapleLoanTestsCalls::TestGetAdditionalCollateralRequiredForVaryPrincipal(var)
        }
    }
    impl ::std::convert::From<TestMakePaymentPullPatternAsBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestMakePaymentPullPatternAsBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestMakePaymentPullPatternAsBorrower(var)
        }
    }
    impl ::std::convert::From<TestMakePaymentPullPatternAsNonBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestMakePaymentPullPatternAsNonBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestMakePaymentPullPatternAsNonBorrower(var)
        }
    }
    impl ::std::convert::From<TestMakePaymentPullPatternUsingDrawableCall> for MapleLoanTestsCalls {
        fn from(var: TestMakePaymentPullPatternUsingDrawableCall) -> Self {
            MapleLoanTestsCalls::TestMakePaymentPullPatternUsingDrawable(var)
        }
    }
    impl ::std::convert::From<TestMakePaymentPushPatternAsBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestMakePaymentPushPatternAsBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestMakePaymentPushPatternAsBorrower(var)
        }
    }
    impl ::std::convert::From<TestMakePaymentPushPatternAsNonBorrowerCall> for MapleLoanTestsCalls {
        fn from(var: TestMakePaymentPushPatternAsNonBorrowerCall) -> Self {
            MapleLoanTestsCalls::TestMakePaymentPushPatternAsNonBorrower(var)
        }
    }
    impl ::std::convert::From<TestMakePaymentPushPatternUsingDrawableCall> for MapleLoanTestsCalls {
        fn from(var: TestMakePaymentPushPatternUsingDrawableCall) -> Self {
            MapleLoanTestsCalls::TestMakePaymentPushPatternUsingDrawable(var)
        }
    }
    impl ::std::convert::From<TestMigrateAclCall> for MapleLoanTestsCalls {
        fn from(var: TestMigrateAclCall) -> Self {
            MapleLoanTestsCalls::TestMigrateAcl(var)
        }
    }
    impl ::std::convert::From<TestPostCollateralPullPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestPostCollateralPullPatternCall) -> Self {
            MapleLoanTestsCalls::TestPostCollateralPullPattern(var)
        }
    }
    impl ::std::convert::From<TestPostCollateralPushPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestPostCollateralPushPatternCall) -> Self {
            MapleLoanTestsCalls::TestPostCollateralPushPattern(var)
        }
    }
    impl ::std::convert::From<TestProposeNewTermsAclCall> for MapleLoanTestsCalls {
        fn from(var: TestProposeNewTermsAclCall) -> Self {
            MapleLoanTestsCalls::TestProposeNewTermsAcl(var)
        }
    }
    impl ::std::convert::From<TestProposeNewTermsInvalidDeadlineCall> for MapleLoanTestsCalls {
        fn from(var: TestProposeNewTermsInvalidDeadlineCall) -> Self {
            MapleLoanTestsCalls::TestProposeNewTermsInvalidDeadline(var)
        }
    }
    impl ::std::convert::From<TestRejectNewTermsAclCall> for MapleLoanTestsCalls {
        fn from(var: TestRejectNewTermsAclCall) -> Self {
            MapleLoanTestsCalls::TestRejectNewTermsAcl(var)
        }
    }
    impl ::std::convert::From<TestRemoveCollateralAclCall> for MapleLoanTestsCalls {
        fn from(var: TestRemoveCollateralAclCall) -> Self {
            MapleLoanTestsCalls::TestRemoveCollateralAcl(var)
        }
    }
    impl ::std::convert::From<TestRepossessAclCall> for MapleLoanTestsCalls {
        fn from(var: TestRepossessAclCall) -> Self {
            MapleLoanTestsCalls::TestRepossessAcl(var)
        }
    }
    impl ::std::convert::From<TestReturnFundsPullPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestReturnFundsPullPatternCall) -> Self {
            MapleLoanTestsCalls::TestReturnFundsPullPattern(var)
        }
    }
    impl ::std::convert::From<TestReturnFundsPushPatternCall> for MapleLoanTestsCalls {
        fn from(var: TestReturnFundsPushPatternCall) -> Self {
            MapleLoanTestsCalls::TestReturnFundsPushPattern(var)
        }
    }
    impl ::std::convert::From<TestSetBorrowerAclCall> for MapleLoanTestsCalls {
        fn from(var: TestSetBorrowerAclCall) -> Self {
            MapleLoanTestsCalls::TestSetBorrowerAcl(var)
        }
    }
    impl ::std::convert::From<TestSetImplementationAclCall> for MapleLoanTestsCalls {
        fn from(var: TestSetImplementationAclCall) -> Self {
            MapleLoanTestsCalls::TestSetImplementationAcl(var)
        }
    }
    impl ::std::convert::From<TestSetLenderAclCall> for MapleLoanTestsCalls {
        fn from(var: TestSetLenderAclCall) -> Self {
            MapleLoanTestsCalls::TestSetLenderAcl(var)
        }
    }
    impl ::std::convert::From<TestSkimAclCall> for MapleLoanTestsCalls {
        fn from(var: TestSkimAclCall) -> Self {
            MapleLoanTestsCalls::TestSkimAcl(var)
        }
    }
    impl ::std::convert::From<TestSuperFactoryCall> for MapleLoanTestsCalls {
        fn from(var: TestSuperFactoryCall) -> Self {
            MapleLoanTestsCalls::TestSuperFactory(var)
        }
    }
    impl ::std::convert::From<TestUpgradeAclCall> for MapleLoanTestsCalls {
        fn from(var: TestUpgradeAclCall) -> Self {
            MapleLoanTestsCalls::TestUpgradeAcl(var)
        }
    }
}
