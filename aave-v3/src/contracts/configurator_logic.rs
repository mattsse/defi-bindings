pub use configuratorlogic_mod::*;
#[allow(clippy::too_many_arguments)]
mod configuratorlogic_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "ConfiguratorLogic was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static CONFIGURATORLOGIC_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ATokenUpgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ReserveInitialized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"StableDebtTokenUpgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"VariableDebtTokenUpgraded\",\"outputs\":[],\"anonymous\":false}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CONFIGURATORLOGIC_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x611bb761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063b0f093551461005b578063b13c96a81461007d578063df59b8b21461009d578063f5b50e70146100bd575b600080fd5b81801561006757600080fd5b5061007b610076366004610d21565b6100dd565b005b81801561008957600080fd5b5061007b610098366004610d78565b610357565b8180156100a957600080fd5b5061007b6100b8366004610dc4565b610540565b8180156100c957600080fd5b5061007b6100d8366004610d21565b61092c565b60006001600160a01b0383166335ea6a756100fb6020850185610e11565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016101e060405180830381865afa158015610140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190610f14565b905060006102216001600160a01b03851663c44b11f76101876020870187610e11565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef9190611037565b5161ffff80821692601083901c821692602081901c83169260ff603083901c811693604084901c9092169260a81c1690565b5090945060009350636111764560e11b925087915061024590506020870187610e11565b6102556040880160208901610e11565b8561026360408a018a611053565b61027060608c018c611053565b61027d60a08e018e611053565b6040516024016102969a999897969594939291906110ca565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526101408401519091506102eb906102e560a0870160808801610e11565b83610b06565b6102fb60a0850160808601610e11565b6101408401516001600160a01b03918216911661031b6020870187610e11565b6001600160a01b03167f9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d8160405160405180910390a45050505050565b60006001600160a01b0383166335ea6a756103756020850185610e11565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016101e060405180830381865afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190610f14565b905060006104016001600160a01b03851663c44b11f76101876020870187610e11565b50509350505050600063183fb41360e01b858560200160208101906104269190610e11565b6104336020880188610e11565b6104436060890160408a01610e11565b8661045160608b018b611053565b61045e60808d018d611053565b61046b60c08f018f611053565b6040516024016104859b9a9998979695949392919061113f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526101008401519091506104d4906102e560c0870160a08801610e11565b6104e460c0850160a08601610e11565b6101008401516001600160a01b0391821691166105046020870187610e11565b6001600160a01b03167fa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb7360405160405180910390a45050505050565b60006106176105526020840184610e11565b63183fb41360e01b8561056b60e0870160c08801610e11565b61057b60c0880160a08901610e11565b61058c610100890160e08a01610e11565b61059c60808a0160608b016111c0565b6105aa6101008b018b611053565b6105b86101208d018d611053565b6105c66101c08f018f611053565b6040516024016105e09b9a999897969594939291906111e3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b6e565b905060006106ab61062e6040850160208601610e11565b636111764560e11b8661064760c0880160a08901610e11565b610658610100890160e08a01610e11565b61066860808a0160608b016111c0565b6106766101808b018b611053565b6106846101a08d018d611053565b6106926101c08f018f611053565b6040516024016105e09a9998979695949392919061122a565b905060006107296106c26060860160408701610e11565b636111764560e11b876106db60c0890160a08a01610e11565b6106ec6101008a0160e08b01610e11565b6106fc60808b0160608c016111c0565b61070a6101408c018c611053565b6107186101608e018e611053565b8e806101c001906106929190611053565b90506001600160a01b038516637a708e9261074a60c0870160a08801610e11565b85858561075d60a08b0160808c01610e11565b60405160e087901b6001600160e01b03191681526001600160a01b0395861660048201529385166024850152918416604484015283166064830152909116608482015260a401600060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b5050604080516020810190915260008152915061080390506107f960808701606088016111c0565b829060ff16610c16565b61080e816001610c72565b610819816000610ca0565b610824816000610cce565b6001600160a01b03861663f51e435b61084360c0880160a08901610e11565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015283516024820152604401600060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b5050506001600160a01b03851690506108be60c0870160a08801610e11565b6001600160a01b03167f3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f85856108fa60a08b0160808c01610e11565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190a3505050505050565b60006001600160a01b0383166335ea6a7561094a6020850185610e11565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016101e060405180830381865afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190610f14565b905060006109d66001600160a01b03851663c44b11f76101876020870187610e11565b5090945060009350636111764560e11b92508791506109fa90506020870187610e11565b610a0a6040880160208901610e11565b85610a1860408a018a611053565b610a2560608c018c611053565b610a3260a08e018e611053565b604051602401610a4b9a999897969594939291906110ca565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610120840151909150610a9a906102e560a0870160808801610e11565b610aaa60a0850160808601610e11565b6101208401516001600160a01b039182169116610aca6020870187610e11565b6001600160a01b03167f7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc2860405160405180910390a45050505050565b60405163278f794360e11b815283906001600160a01b03821690634f1ef28690610b3690869086906004016112b5565b600060405180830381600087803b158015610b5057600080fd5b505af1158015610b64573d6000803e3d6000fd5b5050505050505050565b60008030604051610b7e90610cfc565b6001600160a01b039091168152602001604051809103906000f080158015610baa573d6000803e3d6000fd5b5060405163347d5e2560e21b81529091506001600160a01b0382169063d1f5789490610bdc90879087906004016112b5565b600060405180830381600087803b158015610bf657600080fd5b505af1158015610c0a573d6000803e3d6000fd5b50929695505050505050565b6040805180820190915260028152611b1b60f11b602082015260ff821115610c5a5760405162461bcd60e51b8152600401610c5191906112e1565b60405180910390fd5b50815166ff000000000000191660309190911b179052565b603881610c80576000610c83565b60015b8351670100000000000000191660ff9190911690911b1790915250565b603c81610cae576000610cb1565b60015b8351671000000000000000191660ff9190911690911b1790915250565b603981610cdc576000610cdf565b60015b8351670200000000000000191660ff9190911690911b1790915250565b61088d806112f583390190565b6001600160a01b0381168114610d1e57600080fd5b50565b60008060408385031215610d3457600080fd5b8235610d3f81610d09565b9150602083013567ffffffffffffffff811115610d5b57600080fd5b830160c08186031215610d6d57600080fd5b809150509250929050565b60008060408385031215610d8b57600080fd5b8235610d9681610d09565b9150602083013567ffffffffffffffff811115610db257600080fd5b830160e08186031215610d6d57600080fd5b60008060408385031215610dd757600080fd5b8235610de281610d09565b9150602083013567ffffffffffffffff811115610dfe57600080fd5b83016101e08186031215610d6d57600080fd5b600060208284031215610e2357600080fd5b8135610e2e81610d09565b9392505050565b6040516101e0810167ffffffffffffffff81118282101715610e6757634e487b7160e01b600052604160045260246000fd5b60405290565b600060208284031215610e7f57600080fd5b6040516020810181811067ffffffffffffffff82111715610eb057634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114610edd57600080fd5b919050565b805164ffffffffff81168114610edd57600080fd5b805161ffff81168114610edd57600080fd5b8051610edd81610d09565b60006101e08284031215610f2757600080fd5b610f2f610e35565b610f398484610e6d565b8152610f4760208401610ebd565b6020820152610f5860408401610ebd565b6040820152610f6960608401610ebd565b6060820152610f7a60808401610ebd565b6080820152610f8b60a08401610ebd565b60a0820152610f9c60c08401610ee2565b60c0820152610fad60e08401610ef7565b60e0820152610100610fc0818501610f09565b90820152610120610fd2848201610f09565b90820152610140610fe4848201610f09565b90820152610160610ff6848201610f09565b90820152610180611008848201610ebd565b908201526101a061101a848201610ebd565b908201526101c061102c848201610ebd565b908201529392505050565b60006020828403121561104957600080fd5b610e2e8383610e6d565b6000808335601e1984360301811261106a57600080fd5b83018035915067ffffffffffffffff82111561108557600080fd5b60200191503681900382131561109a57600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038b811682528a81166020830152891660408201526060810188905260e060808201819052600090611106908301888a6110a1565b82810360a08401526111198187896110a1565b905082810360c084015261112e8185876110a1565b9d9c50505050505050505050505050565b6001600160a01b038c811682528b811660208301528a81166040830152891660608201526080810188905261010060a08201819052600090611184838201898b6110a1565b905082810360c08401526111998187896110a1565b905082810360e08401526111ae8185876110a1565b9e9d5050505050505050505050505050565b6000602082840312156111d257600080fd5b813560ff81168114610e2e57600080fd5b6001600160a01b038c811682528b811660208301528a811660408301528916606082015260ff8816608082015261010060a08201819052600090611184838201898b6110a1565b6001600160a01b038b811682528a811660208301528916604082015260ff8816606082015260e060808201819052600090611106908301888a6110a1565b6000815180845260005b8181101561128e57602081850181015186830182015201611272565b818111156112a0576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906112d990830184611268565b949350505050565b602081526000610e2e602083018461126856fe60a060405234801561001057600080fd5b5060405161088d38038061088d83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107df6100ae600039600081816101130152818161015801528181610211015281816103510152818161037a01526104a501526107df6000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100745780635c60da1b14610087578063d1f57894146100b8578063f851a440146100cb575b6100526100e0565b005b34801561006057600080fd5b5061005261006f366004610586565b610108565b6100526100823660046105a8565b61014d565b34801561009357600080fd5b5061009c610204565b6040516001600160a01b03909116815260200160405180910390f35b6100526100c6366004610641565b610256565b3480156100d757600080fd5b5061009c610344565b6100e861039c565b61010661010160008051602061078a8339815191525490565b6103a4565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561014557610142816103c8565b50565b6101426100e0565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101f757610187836103c8565b6000836001600160a01b031683836040516101a3929190610703565b600060405180830381855af49150503d80600081146101de576040519150601f19603f3d011682016040523d82523d6000602084013e6101e3565b606091505b50509050806101f157600080fd5b50505050565b6101ff6100e0565b505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561024b575060008051602061078a8339815191525490565b6102536100e0565b90565b600061026e60008051602061078a8339815191525490565b6001600160a01b03161461028157600080fd5b6102ac60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610713565b60008051602061078a833981519152146102c8576102c8610738565b6102d182610408565b805115610340576000826001600160a01b0316826040516102f2919061074e565b600060405180830381855af49150503d806000811461032d576040519150601f19603f3d011682016040523d82523d6000602084013e610332565b606091505b50509050806101ff57600080fd5b5050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561024b57507f000000000000000000000000000000000000000000000000000000000000000090565b61010661049a565b3660008037600080366000845af43d6000803e8080156103c3573d6000f35b3d6000fd5b6103d181610408565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6104118161052e565b6104885760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b60008051602061078a83398151915255565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101065760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527137b6903a343290383937bc3c9030b236b4b760711b606482015260840161047f565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061056257508115155b949350505050565b80356001600160a01b038116811461058157600080fd5b919050565b60006020828403121561059857600080fd5b6105a18261056a565b9392505050565b6000806000604084860312156105bd57600080fd5b6105c68461056a565b9250602084013567ffffffffffffffff808211156105e357600080fd5b818601915086601f8301126105f757600080fd5b81358181111561060657600080fd5b87602082850101111561061857600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561065457600080fd5b61065d8361056a565b9150602083013567ffffffffffffffff8082111561067a57600080fd5b818501915085601f83011261068e57600080fd5b8135818111156106a0576106a061062b565b604051601f8201601f19908116603f011681019083821181831017156106c8576106c861062b565b816040528281528860208487010111156106e157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b60008282101561073357634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825160005b8181101561076f5760208186018101518583015201610755565b8181111561077e576000828501525b50919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122035ff0e387ac5cbedddb5f9eb27906f62e214188bc377e7c565d3483bff5ea83364736f6c634300080a0033a26469706673582212205512a674be05a1f5e3d797db3d05bcccb5b8fd3b991e9901e7bfe5dfd7c8983e64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct ConfiguratorLogic<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for ConfiguratorLogic<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for ConfiguratorLogic<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(ConfiguratorLogic))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> ConfiguratorLogic<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), CONFIGURATORLOGIC_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CONFIGURATORLOGIC_ABI.clone(),
                CONFIGURATORLOGIC_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Gets the contract's `ATokenUpgraded` event"]
        pub fn a_token_upgraded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AtokenUpgradedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ReserveInitialized` event"]
        pub fn reserve_initialized_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ReserveInitializedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `StableDebtTokenUpgraded` event"]
        pub fn stable_debt_token_upgraded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, StableDebtTokenUpgradedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `VariableDebtTokenUpgraded` event"]
        pub fn variable_debt_token_upgraded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, VariableDebtTokenUpgradedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, ConfiguratorLogicEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for ConfiguratorLogic<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "ATokenUpgraded",
        abi = "ATokenUpgraded(address,address,address)"
    )]
    pub struct AtokenUpgradedFilter {
        #[ethevent(indexed)]
        pub asset: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub proxy: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub implementation: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "ReserveInitialized",
        abi = "ReserveInitialized(address,address,address,address,address)"
    )]
    pub struct ReserveInitializedFilter {
        #[ethevent(indexed)]
        pub asset: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub a_token: ethers::core::types::Address,
        pub stable_debt_token: ethers::core::types::Address,
        pub variable_debt_token: ethers::core::types::Address,
        pub interest_rate_strategy_address: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "StableDebtTokenUpgraded",
        abi = "StableDebtTokenUpgraded(address,address,address)"
    )]
    pub struct StableDebtTokenUpgradedFilter {
        #[ethevent(indexed)]
        pub asset: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub proxy: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub implementation: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "VariableDebtTokenUpgraded",
        abi = "VariableDebtTokenUpgraded(address,address,address)"
    )]
    pub struct VariableDebtTokenUpgradedFilter {
        #[ethevent(indexed)]
        pub asset: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub proxy: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub implementation: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ConfiguratorLogicEvents {
        AtokenUpgradedFilter(AtokenUpgradedFilter),
        ReserveInitializedFilter(ReserveInitializedFilter),
        StableDebtTokenUpgradedFilter(StableDebtTokenUpgradedFilter),
        VariableDebtTokenUpgradedFilter(VariableDebtTokenUpgradedFilter),
    }
    impl ethers::contract::EthLogDecode for ConfiguratorLogicEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AtokenUpgradedFilter::decode_log(log) {
                return Ok(ConfiguratorLogicEvents::AtokenUpgradedFilter(decoded));
            }
            if let Ok(decoded) = ReserveInitializedFilter::decode_log(log) {
                return Ok(ConfiguratorLogicEvents::ReserveInitializedFilter(decoded));
            }
            if let Ok(decoded) = StableDebtTokenUpgradedFilter::decode_log(log) {
                return Ok(ConfiguratorLogicEvents::StableDebtTokenUpgradedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = VariableDebtTokenUpgradedFilter::decode_log(log) {
                return Ok(ConfiguratorLogicEvents::VariableDebtTokenUpgradedFilter(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for ConfiguratorLogicEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ConfiguratorLogicEvents::AtokenUpgradedFilter(element) => element.fmt(f),
                ConfiguratorLogicEvents::ReserveInitializedFilter(element) => element.fmt(f),
                ConfiguratorLogicEvents::StableDebtTokenUpgradedFilter(element) => element.fmt(f),
                ConfiguratorLogicEvents::VariableDebtTokenUpgradedFilter(element) => element.fmt(f),
            }
        }
    }
}
