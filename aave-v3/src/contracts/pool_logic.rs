pub use poollogic_mod::*;
#[allow(clippy::too_many_arguments)]
mod poollogic_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "PoolLogic was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static POOLLOGIC_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"IsolationModeTotalDebtUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MintedToTreasury\",\"outputs\":[],\"anonymous\":false}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static POOLLOGIC_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x611cce61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80631e3b41451461007157806326ec273f1461009357806348c2ca8c146100d857806369fc1bdf146100f857806387b322b2146101285780639cf5702314610148575b600080fd5b81801561007d57600080fd5b5061009161008c3660046117e1565b610168565b005b6100a66100a13660046118a6565b610239565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0015b60405180910390f35b8180156100e457600080fd5b506100916100f3366004611961565b610276565b81801561010457600080fd5b506101186101133660046119f2565b6103fb565b60405190151581526020016100cf565b81801561013457600080fd5b50610091610143366004611aaf565b610678565b81801561015457600080fd5b50610091610163366004611aeb565b610691565b6001600160a01b03811660009081526020838152604091829020825191820190925290549081905260d41c64ffffffffff16604080518082019091526002815261383160f01b602082015290156101db5760405162461bcd60e51b81526004016101d29190611b20565b60405180910390fd5b506001600160a01b03811660008181526020848152604080832060090180546001600160801b0319169055519182527faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a25050565b60008060008060008061024e8a8a8a8a61075e565b5093995091975090945092509050610267868684610c3f565b93509499939850945094509450565b60005b818110156103f557600083838381811061029557610295611b75565b90506020020160208101906102aa9190611b8b565b6001600160a01b03811660009081526020878152604091829020825191820190925281549081905291925090670100000000000000166102eb5750506103e3565b60088101546001600160801b031680156103df576008820180546001600160801b0319169055600061031c83610c73565b9050600061032a8383610cd7565b600480860154604051637df5bd3b60e01b81529293506001600160a01b031691637df5bd3b91610367918591879101918252602082015260400190565b600060405180830381600087803b15801561038157600080fd5b505af1158015610395573d6000803e3d6000fd5b50505050846001600160a01b03167fbfa21aa5d5f9a1f0120a95e7c0749f389863cbdbfff531aa7339077a5bc919de826040516103d491815260200190565b60405180910390a250505b5050505b806103ed81611bbc565b915050610279565b50505050565b600061040a8260000151610d1b565b604051806040016040528060018152602001603960f81b815250906104425760405162461bcd60e51b81526004016101d29190611b20565b506020808301516040808501516060860151608087015187516001600160a01b03166000908152958a90529290942061047d94909392610d57565b81516001600160a01b0316600090815260208590526040812060030154600160a81b900461ffff161515806104cd575082516000808052602086905260409020546001600160a01b039081169116145b90508015604051806040016040528060028152602001610c4d60f21b8152509061050a5760405162461bcd60e51b81526004016101d29190611b20565b5060005b8360a0015161ffff168161ffff1610156105ba5761ffff81166000908152602086905260409020546001600160a01b03166105a85783516001600160a01b03908116600090815260208881526040808320600301805461ffff60a81b1916600160a81b61ffff97909716968702179055875194835290889052812080546001600160a01b0319169390921692909217905591506106719050565b806105b281611bd7565b91505061050e565b508260c0015161ffff168360a0015161ffff161060405180604001604052806002815260200161313560f01b815250906106075760405162461bcd60e51b81526004016101d29190611b20565b50505060a08101805182516001600160a01b03908116600090815260208781526040808320600301805461ffff60a81b1916600160a81b61ffff978816021790558651955190941682528690529190912080546001600160a01b0319169290911691909117905560015b9392505050565b61068c6001600160a01b0384168383610e2b565b505050565b6001600160a01b03811660009081526020849052604090206106b4838284610eb6565b506001600160a01b0316600081815260208481526040808320600381018054600160a81b900461ffff16855295835290832080546001600160a01b0319908116909155938352949052808455600184018190556002840181905582546001600160b81b0319169092556004830180548216905560058301805482169055600683018054821690556007830180549091169055600882015560090180546001600160801b0319169055565b6000806000806000806107748760000151511590565b15610792575060009450849350839250829150600019905081610c32565b6108346040518061026001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581526020016000151581525090565b608088015160ff161561087957608088015160ff16600090815260208a90526040902060608901516108669190611170565b6101808401526101c08301526101a08201525b87602001518160c001511015610b585760c081015188516108999161121c565b6108ad5760c0810180516001019052610879565b60c0810151600090815260208b905260409020546001600160a01b031661020082018190526108e65760c0810180516001019052610879565b6102008101516001600160a01b0316600090815260208c8152604091829020825180830190935280549283905260ff60a884901c81166101e0860152603084901c166060850181905261ffff601085901c811660a08701529093166080850152600a9290920a908301526101808201511580159061096f5750816101e00151896080015160ff16145b6109ed57606089015161020083015160405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190611bf9565b6109f4565b8161018001515b825260a082015115801590610a14575060c08201518951610a149161126c565b15610b0457610a31896040015182846000015185602001516112bb565b6040830181905261010083018051610a4a908390611c12565b90525060808901516101e0830151610a659160ff169061136e565b1515610240830152608082015115610abb57816102400151610a8b578160800151610a92565b816101a001515b8260400151610aa19190611c2a565b8261014001818151610ab39190611c12565b905250610ac4565b60016102208301525b816102400151610ad8578160a00151610adf565b816101c001515b8260400151610aee9190611c2a565b8261016001818151610b009190611c12565b9052505b60c08201518951610b149161137f565b15610b4757610b31896040015182846000015185602001516113cc565b8261012001818151610b439190611c12565b9052505b5060c0810180516001019052610879565b610100810151610b69576000610b84565b80610100015181610140015181610b8257610b82611c49565b045b610140820152610100810151610b9b576000610bb6565b80610100015181610160015181610bb457610bb4611c49565b045b61016082015261012081015115610bf857610bf3816101200151610bed83610160015184610100015161150090919063ffffffff16565b90611526565b610bfc565b6000195b60e0820181905261010082015161012083015161014084015161016085015161022090950151929a509098509650919450925090505b9499939850945094509450565b600080610c4c8584611500565b905083811015610c60576000915050610671565b610c6a8482611c5f565b95945050505050565b6003810154600090600160801b900464ffffffffff1642811415610ca3575050600101546001600160801b031690565b6001830154610671906001600160801b0380821691610ccb91600160801b909104168461155d565b90610cd7565b50919050565b600081156b019d971e4fe8401e740000001983900484111517610cf957600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610d4f57508115155b949350505050565b6004850154604080518082019091526002815261363160f01b6020820152906001600160a01b031615610d9d5760405162461bcd60e51b81526004016101d29190611b20565b506001850180546b033b2e3c9fd0803ce80000006001600160801b0319918216811790925560028701805490911690911790556004850180546001600160a01b03199081166001600160a01b03968716179091556005860180548216948616949094179093556006850180548416928516929092179091556007909301805490911692909116919091179055565b60405163a9059cbb60e01b8082526001600160a01b0384166004830152602482018390529060008060448382895af1610e68573d6000803e3d6000fd5b50610e728461159a565b6103f55760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b60448201526064016101d2565b604080518082019091526002815261373760f01b60208201526001600160a01b038216610ef65760405162461bcd60e51b81526004016101d29190611b20565b506003820154600160a81b900461ffff16151580610f2d57506000808052602084905260409020546001600160a01b038281169116145b604051806040016040528060028152602001611c1960f11b81525090610f665760405162461bcd60e51b81526004016101d29190611b20565b508160050160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe09190611bf9565b604080518082019091526002815261353560f01b602082015290156110185760405162461bcd60e51b81526004016101d29190611b20565b508160060160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110929190611bf9565b6040805180820190915260028152611a9b60f11b602082015290156110ca5760405162461bcd60e51b81526004016101d29190611b20565b50600480830154604080516318160ddd60e01b815290516001600160a01b03909216926318160ddd9282820192602092908290030181865afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111389190611bf9565b6040805180820190915260028152610d4d60f21b602082015290156103f55760405162461bcd60e51b81526004016101d29190611b20565b8154600090819081908190660100000000000090046001600160a01b031680156112015760405163b3596f0760e01b81526001600160a01b03828116600483015287169063b3596f0790602401602060405180830381865afa1580156111da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fe9190611bf9565b91505b50945461ffff80821697620100009092041695945092505050565b6040805180820190915260028152610dcd60f21b6020820152600090608083106112595760405162461bcd60e51b81526004016101d29190611b20565b5050905160019190911b1c600316151590565b6040805180820190915260028152610dcd60f21b6020820152600090608083106112a95760405162461bcd60e51b81526004016101d29190611b20565b50509051600191821b82011c16151590565b6000806112c785610c73565b600486810154604051630ed1279f60e11b81526001600160a01b038a8116938201939093529293506000928792611347928692911690631da24f3e90602401602060405180830381865afa158015611323573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190611bf9565b6113519190611c2a565b905083818161136257611362611c49565b04979650505050505050565b600082158015906106715750501490565b6040805180820190915260028152610dcd60f21b6020820152600090608083106113bc5760405162461bcd60e51b81526004016101d29190611b20565b50509051600191821b1c16151590565b6006830154604051630ed1279f60e11b81526001600160a01b0386811660048301526000928392911690631da24f3e90602401602060405180830381865afa15801561141c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114409190611bf9565b9050801561145e5761145b61145486611641565b8290610cd7565b90505b60058501546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa1580156114aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ce9190611bf9565b6114d89082611c12565b90506114e48185611c2a565b90508281816114f5576114f5611c49565b049695505050505050565b60008115611388198390048411151761151857600080fd5b506127109102611388010490565b60008115670de0b6b3a76400006002840419048411171561154657600080fd5b50670de0b6b3a76400009190910260028204010490565b60008061157164ffffffffff841642611c5f565b61157b9085611c2a565b6301e1338090049050610d4f816b033b2e3c9fd0803ce8000000611c12565b60006115c0565b62461bcd60e51b60005260206004528060245250806044525060646000fd5b3d80156115ff5760208114611630576115fa7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6115a1565b610cd1565b823b611627576116277311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b60146115a1565b60019150610cd1565b3d6000803e50506000511515919050565b6003810154600090600160801b900464ffffffffff1642811415611671575050600201546001600160801b031690565b6002830154610671906001600160801b0380821691610ccb91600160801b909104168460006106718383426000806116b064ffffffffff851684611c5f565b9050806116cc576b033b2e3c9fd0803ce8000000915050610671565b600019810160008080600285116116e45760006116e9565b600285035b925066038882915c40006116fd8a80610cd7565b8161170a5761170a611c49565b0491506301e1338061171c838b610cd7565b8161172957611729611c49565b0490506000826117398688611c2a565b6117439190611c2a565b60029004905060008285611757888a611c2a565b6117619190611c2a565b61176b9190611c2a565b60069004905080826301e133806117828a8f611c2a565b61178c9190611c76565b6117a2906b033b2e3c9fd0803ce8000000611c12565b6117ac9190611c12565b6117b69190611c12565b9b9a5050505050505050505050565b80356001600160a01b03811681146117dc57600080fd5b919050565b600080604083850312156117f457600080fd5b82359150611804602084016117c5565b90509250929050565b60405160a0810167ffffffffffffffff8111828210171561183e57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516020810167ffffffffffffffff8111828210171561183e57634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561183e57634e487b7160e01b600052604160045260246000fd5b6000806000808486036101008112156118be57600080fd5b853594506020860135935060408601359250605f190160a08112156118e257600080fd5b6118ea61180d565b60208212156118f857600080fd5b611900611844565b9150606087013582528181526080870135602082015261192260a088016117c5565b604082015261193360c088016117c5565b606082015260e0870135915060ff8216821461194e57600080fd5b6080810191909152939692955090935050565b60008060006040848603121561197657600080fd5b83359250602084013567ffffffffffffffff8082111561199557600080fd5b818601915086601f8301126119a957600080fd5b8135818111156119b857600080fd5b8760208260051b85010111156119cd57600080fd5b6020830194508093505050509250925092565b803561ffff811681146117dc57600080fd5b6000806000838503610120811215611a0957600080fd5b843593506020850135925060e0603f1982011215611a2657600080fd5b50611a2f611875565b611a3b604086016117c5565b8152611a49606086016117c5565b6020820152611a5a608086016117c5565b6040820152611a6b60a086016117c5565b6060820152611a7c60c086016117c5565b6080820152611a8d60e086016119e0565b60a0820152611a9f61010086016119e0565b60c0820152809150509250925092565b600080600060608486031215611ac457600080fd5b611acd846117c5565b9250611adb602085016117c5565b9150604084013590509250925092565b600080600060608486031215611b0057600080fd5b8335925060208401359150611b17604085016117c5565b90509250925092565b600060208083528351808285015260005b81811015611b4d57858101830151858201604001528201611b31565b81811115611b5f576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b9d57600080fd5b610671826117c5565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bd057611bd0611ba6565b5060010190565b600061ffff80831681811415611bef57611bef611ba6565b6001019392505050565b600060208284031215611c0b57600080fd5b5051919050565b60008219821115611c2557611c25611ba6565b500190565b6000816000190483118215151615611c4457611c44611ba6565b500290565b634e487b7160e01b600052601260045260246000fd5b600082821015611c7157611c71611ba6565b500390565b600082611c9357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a7c6ebb4029673325293825d8868923ed62d0c9ef77376d374dd9dbdd5fc814a64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct PoolLogic<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for PoolLogic<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for PoolLogic<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(PoolLogic))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> PoolLogic<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), POOLLOGIC_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                POOLLOGIC_ABI.clone(),
                POOLLOGIC_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Gets the contract's `IsolationModeTotalDebtUpdated` event"]
        pub fn isolation_mode_total_debt_updated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, IsolationModeTotalDebtUpdatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `MintedToTreasury` event"]
        pub fn minted_to_treasury_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MintedToTreasuryFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, PoolLogicEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for PoolLogic<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "IsolationModeTotalDebtUpdated",
        abi = "IsolationModeTotalDebtUpdated(address,uint256)"
    )]
    pub struct IsolationModeTotalDebtUpdatedFilter {
        #[ethevent(indexed)]
        pub asset: ethers::core::types::Address,
        pub total_debt: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MintedToTreasury", abi = "MintedToTreasury(address,uint256)")]
    pub struct MintedToTreasuryFilter {
        #[ethevent(indexed)]
        pub reserve: ethers::core::types::Address,
        pub amount_minted: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum PoolLogicEvents {
        IsolationModeTotalDebtUpdatedFilter(IsolationModeTotalDebtUpdatedFilter),
        MintedToTreasuryFilter(MintedToTreasuryFilter),
    }
    impl ethers::contract::EthLogDecode for PoolLogicEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = IsolationModeTotalDebtUpdatedFilter::decode_log(log) {
                return Ok(PoolLogicEvents::IsolationModeTotalDebtUpdatedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = MintedToTreasuryFilter::decode_log(log) {
                return Ok(PoolLogicEvents::MintedToTreasuryFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for PoolLogicEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                PoolLogicEvents::IsolationModeTotalDebtUpdatedFilter(element) => element.fmt(f),
                PoolLogicEvents::MintedToTreasuryFilter(element) => element.fmt(f),
            }
        }
    }
}
