pub use aaveprotocoldataprovider_mod::*;
#[allow(clippy::too_many_arguments)]
mod aaveprotocoldataprovider_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "AaveProtocolDataProvider was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static AAVEPROTOCOLDATAPROVIDER_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"addressesProvider\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getATokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAllATokens\",\"outputs\":[{\"internalType\":\"struct AaveProtocolDataProvider.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]}]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAllReservesTokens\",\"outputs\":[{\"internalType\":\"struct AaveProtocolDataProvider.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getDebtCeilingDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getInterestRateStrategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"irStrategyAddress\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLiquidationProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getReserveCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getReserveConfigurationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getReserveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unbacked\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"accruedToTreasuryScaled\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalAToken\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getReserveEModeCategory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getReserveTokensAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getSiloedBorrowing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getUnbackedMintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getUserReserveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentATokenBalance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"currentStableDebt\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"currentVariableDebt\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"principalStableDebt\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"scaledVariableDebt\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint40\",\"name\":\"stableRateLastUpdated\",\"type\":\"uint40\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static AAVEPROTOCOLDATAPROVIDER_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "0x60a06040523480156200001157600080fd5b506040516200281b3803806200281b833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b6080516127106200010b60003960008181610120015281816103f001528181610500015281816105f301528181610a6801528181610daf01528181610eb601528181610fc00152818161110e01528181611222015281816113ee01528181611549015281816116490152818161174901528181611ada01528181611bdd01528181611cf00152611fac01526127106000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806351460e25116100a2578063b316ff8911610071578063b316ff891461035b578063b55d990414610370578063d2493b6c14610393578063f561ae41146103d0578063fcf40a62146103d857600080fd5b806351460e251461031b5780636744362a1461032e57806369b169e1146103415780637ba1ae361461034857600080fd5b80633c798109116100e95780633c798109146102535780633cb8a622146102665780633e1501411461027957806346fbe558146102e05780634d44ac4f1461030857600080fd5b80630542975c1461011b578063163a0f201461015f57806328dd2d011461018057806335ea6a75146101e0575b600080fd5b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017261016d366004612160565b6103eb565b604051908152602001610156565b61019361018e36600461217d565b6104ef565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015264ffffffffff1660e0830152151561010082015261012001610156565b6101f36101ee366004612160565b610a52565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e086015261010085015261012084015261014083015264ffffffffff1661016082015261018001610156565b610172610261366004612160565b610da8565b610172610274366004612160565b610eaf565b61028c610287366004612160565b610fad565b604080519a8b5260208b01999099529789019690965260608801949094526080870192909252151560a0860152151560c0850152151560e08401521515610100830152151561012082015261014001610156565b6102f36102ee366004612160565b611106565b60408051928352602083019190915201610156565b610172610316366004612160565b61121d565b610172610329366004612160565b6113e9565b61014261033c366004612160565b611544565b6002610172565b610172610356366004612160565b611642565b610363611743565b6040516101569190612212565b61038361037e366004612160565b611ad3565b6040519015158152602001610156565b6103a66103a1366004612160565b611bd5565b604080516001600160a01b0394851681529284166020840152921691810191909152606001610156565b610363611cea565b6103836103e6366004612160565b611fa5565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047091906122a1565b60405163c44b11f760e01b81526001600160a01b038581166004830152919091169063c44b11f790602401602060405180830381865afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190612371565b805190915060a81c60ff165b9392505050565b6000806000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058091906122a1565b6040516335ea6a7560e01b81526001600160a01b038e8116600483015291909116906335ea6a75906024016101e060405180830381865afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed91906123cb565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067391906122a1565b604051634417a58360e01b81526001600160a01b038e811660048301529190911690634417a58390602401602060405180830381865afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df9190612371565b6101008301516040516370a0823160e01b81526001600160a01b038f811660048301529293509116906370a0823190602401602060405180830381865afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075291906124ee565b6101408301516040516370a0823160e01b81526001600160a01b038f81166004830152929d509116906370a0823190602401602060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c591906124ee565b6101208301516040516370a0823160e01b81526001600160a01b038f81166004830152929b509116906370a0823190602401602060405180830381865afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083891906124ee565b61012083015160405163631a6fd560e11b81526001600160a01b038f81166004830152929c5091169063c634dfaa90602401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab91906124ee565b610140830151604051630ed1279f60e11b81526001600160a01b038f81166004830152929a50911690631da24f3e90602401602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906124ee565b965081604001516001600160801b031694508161012001516001600160a01b031663e78c9b3b8d6040518263ffffffff1660e01b815260040161097091906001600160a01b0391909116815260200190565b602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906124ee565b610120830151604051631e739ae360e21b81526001600160a01b038f811660048301529298509116906379ce6b8c90602401602060405180830381865afa158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a249190612507565b9350610a418260e0015161ffff16826120a890919063ffffffff16565b925050509295985092959850929598565b60008060008060008060008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae891906122a1565b6001600160a01b03166335ea6a758f6040518263ffffffff1660e01b8152600401610b2291906001600160a01b0391909116815260200190565b6101e060405180830381865afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906123cb565b9050806101a001518161018001518261010001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd991906124ee565b8361012001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4091906124ee565b8461014001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca791906124ee565b856040015186608001518760a001518861012001516001600160a01b03166390f6fcf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d91906124ee565b89602001518a606001518b60c001518b6001600160801b03169b508a6001600160801b03169a50866001600160801b03169650856001600160801b03169550846001600160801b03169450826001600160801b03169250816001600160801b031691509c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b6000610ea97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f91906122a1565b60405163c44b11f760e01b81526001600160a01b038581166004830152919091169063c44b11f790602401602060405180830381865afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612371565b5160d41c64ffffffffff1690565b92915050565b6000610ea97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3691906122a1565b60405163c44b11f760e01b81526001600160a01b038581166004830152919091169063c44b11f790602401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190612371565b5160981c61ffff1690565b60008060008060008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104091906122a1565b60405163c44b11f760e01b81526001600160a01b038e81166004830152919091169063c44b11f790602401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190612371565b8051603081901c60ff169c5061ffff8082169c50601082901c81169b50602082901c81169a5060409190911c16975090506110e681612100565b509d9f9c9e509a9c999b989a8d15159a9099909850919650945092505050565b6000806112137f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561116a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118e91906122a1565b60405163c44b11f760e01b81526001600160a01b038681166004830152919091169063c44b11f790602401602060405180830381865afa1580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190612371565b51640fffffffff605082901c81169260749290921c1690565b9094909350915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a291906122a1565b6040516335ea6a7560e01b81526001600160a01b03858116600483015291909116906335ea6a75906024016101e060405180830381865afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130f91906123cb565b90508061014001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137891906124ee565b8161012001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113df91906124ee565b6104e89190612538565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146e91906122a1565b6040516335ea6a7560e01b81526001600160a01b03858116600483015291909116906335ea6a75906024016101e060405180830381865afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db91906123cb565b90508061010001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e891906124ee565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c991906122a1565b6040516335ea6a7560e01b81526001600160a01b03858116600483015291909116906335ea6a75906024016101e060405180830381865afa158015611612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163691906123cb565b61016001519392505050565b6000610ea97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c991906122a1565b60405163c44b11f760e01b81526001600160a01b038581166004830152919091169063c44b11f790602401602060405180830381865afa158015611711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117359190612371565b5160b01c640fffffffff1690565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c991906122a1565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561180b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118339190810190612550565b90506000815167ffffffffffffffff811115611851576118516122be565b60405190808252806020026020018201604052801561189757816020015b60408051808201909152606081526000602082015281526020019060019003908161186f5790505b50905060005b8251811015611acb57739f8f72aa9304c8b593d555f12ef6589cc3a579a26001600160a01b03168382815181106118d6576118d6612602565b60200260200101516001600160a01b031614156119615760405180604001604052806040518060400160405280600381526020016226a5a960e91b815250815260200184838151811061192b5761192b612602565b60200260200101516001600160a01b031681525082828151811061195157611951612602565b6020026020010181905250611ab9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031683828151811061199157611991612602565b60200260200101516001600160a01b031614156119e65760405180604001604052806040518060400160405280600381526020016208aa8960eb1b815250815260200184838151811061192b5761192b612602565b6040518060400160405280848381518110611a0357611a03612602565b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a709190810190612618565b8152602001848381518110611a8757611a87612602565b60200260200101516001600160a01b0316815250828281518110611aad57611aad612602565b60200260200101819052505b80611ac3816126ac565b91505061189d565b509392505050565b6000611bcb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a91906122a1565b60405163c44b11f760e01b81526001600160a01b038581166004830152919091169063c44b11f790602401602060405180830381865afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc69190612371565b612100565b9695505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d91906122a1565b6040516335ea6a7560e01b81526001600160a01b03878116600483015291909116906335ea6a75906024016101e060405180830381865afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca91906123cb565b610100810151610120820151610140909201519097919650945092505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7091906122a1565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611db2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dda9190810190612550565b90506000815167ffffffffffffffff811115611df857611df86122be565b604051908082528060200260200182016040528015611e3e57816020015b604080518082019091526060815260006020820152815260200190600190039081611e165790505b50905060005b8251811015611acb576000846001600160a01b03166335ea6a75858481518110611e7057611e70612602565b60200260200101516040518263ffffffff1660e01b8152600401611ea391906001600160a01b0391909116815260200190565b6101e060405180830381865afa158015611ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee591906123cb565b905060405180604001604052808261010001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611f35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5d9190810190612618565b81526020018261010001516001600160a01b0316815250838381518110611f8657611f86612602565b6020026020010181905250508080611f9d906126ac565b915050611e44565b6000610ea97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202c91906122a1565b60405163c44b11f760e01b81526001600160a01b038581166004830152919091169063c44b11f790602401602060405180830381865afa158015612074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120989190612371565b5167400000000000000016151590565b6040805180820190915260028152610dcd60f21b6020820152600090608083106120ee5760405162461bcd60e51b81526004016120e591906126c7565b60405180910390fd5b50509051600191821b82011c16151590565b51670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b6001600160a01b038116811461215d57600080fd5b50565b60006020828403121561217257600080fd5b81356104e881612148565b6000806040838503121561219057600080fd5b823561219b81612148565b915060208301356121ab81612148565b809150509250929050565b60005b838110156121d15781810151838201526020016121b9565b838111156121e0576000848401525b50505050565b600081518084526121fe8160208601602086016121b6565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561228357888303603f190185528151805187855261225d888601826121e6565b918901516001600160a01b03169489019490945294870194925090860190600101612239565b509098975050505050505050565b805161229c81612148565b919050565b6000602082840312156122b357600080fd5b81516104e881612148565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156122f8576122f86122be565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612327576123276122be565b604052919050565b60006020828403121561234157600080fd5b6040516020810181811067ffffffffffffffff82111715612364576123646122be565b6040529151825250919050565b60006020828403121561238357600080fd5b6104e8838361232f565b80516001600160801b038116811461229c57600080fd5b805164ffffffffff8116811461229c57600080fd5b805161ffff8116811461229c57600080fd5b60006101e082840312156123de57600080fd5b6123e66122d4565b6123f0848461232f565b81526123fe6020840161238d565b602082015261240f6040840161238d565b60408201526124206060840161238d565b60608201526124316080840161238d565b608082015261244260a0840161238d565b60a082015261245360c084016123a4565b60c082015261246460e084016123b9565b60e0820152610100612477818501612291565b90820152610120612489848201612291565b9082015261014061249b848201612291565b908201526101606124ad848201612291565b908201526101806124bf84820161238d565b908201526101a06124d184820161238d565b908201526101c06124e384820161238d565b908201529392505050565b60006020828403121561250057600080fd5b5051919050565b60006020828403121561251957600080fd5b6104e8826123a4565b634e487b7160e01b600052601160045260246000fd5b6000821982111561254b5761254b612522565b500190565b6000602080838503121561256357600080fd5b825167ffffffffffffffff8082111561257b57600080fd5b818501915085601f83011261258f57600080fd5b8151818111156125a1576125a16122be565b8060051b91506125b28483016122fe565b81815291830184019184810190888411156125cc57600080fd5b938501935b838510156125f657845192506125e683612148565b82825293850193908501906125d1565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561262a57600080fd5b815167ffffffffffffffff8082111561264257600080fd5b818401915084601f83011261265657600080fd5b815181811115612668576126686122be565b61267b601f8201601f19166020016122fe565b915080825285602082850101111561269257600080fd5b6126a38160208401602086016121b6565b50949350505050565b60006000198214156126c0576126c0612522565b5060010190565b6020815260006104e860208301846121e656fea26469706673582212200a04bc5e4c9d7c66165c34f7c4cac3072b6ce1964b56a364a5fe7fc384933dba64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
    });
    #[derive(Clone)]
    pub struct AaveProtocolDataProvider<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for AaveProtocolDataProvider<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for AaveProtocolDataProvider<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(AaveProtocolDataProvider))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> AaveProtocolDataProvider<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                AAVEPROTOCOLDATAPROVIDER_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                AAVEPROTOCOLDATAPROVIDER_ABI.clone(),
                AAVEPROTOCOLDATAPROVIDER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `ADDRESSES_PROVIDER` (0x0542975c) function"]
        pub fn addresses_provider(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([5, 66, 151, 92], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getATokenTotalSupply` (0x51460e25) function"]
        pub fn get_a_token_total_supply(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([81, 70, 14, 37], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getAllATokens` (0xf561ae41) function"]
        pub fn get_all_a_tokens(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<TokenData>> {
            self.0
                .method_hash([245, 97, 174, 65], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getAllReservesTokens` (0xb316ff89) function"]
        pub fn get_all_reserves_tokens(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<TokenData>> {
            self.0
                .method_hash([179, 22, 255, 137], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getDebtCeiling` (0x3c798109) function"]
        pub fn get_debt_ceiling(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([60, 121, 129, 9], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getDebtCeilingDecimals` (0x69b169e1) function"]
        pub fn get_debt_ceiling_decimals(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([105, 177, 105, 225], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getInterestRateStrategyAddress` (0x6744362a) function"]
        pub fn get_interest_rate_strategy_address(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([103, 68, 54, 42], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLiquidationProtocolFee` (0x3cb8a622) function"]
        pub fn get_liquidation_protocol_fee(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([60, 184, 166, 34], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getPaused` (0xb55d9904) function"]
        pub fn get_paused(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([181, 93, 153, 4], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReserveCaps` (0x46fbe558) function"]
        pub fn get_reserve_caps(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::U256, ethers::core::types::U256),
        > {
            self.0
                .method_hash([70, 251, 229, 88], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReserveConfigurationData` (0x3e150141) function"]
        pub fn get_reserve_configuration_data(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                bool,
                bool,
                bool,
                bool,
                bool,
            ),
        > {
            self.0
                .method_hash([62, 21, 1, 65], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReserveData` (0x35ea6a75) function"]
        pub fn get_reserve_data(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                u64,
            ),
        > {
            self.0
                .method_hash([53, 234, 106, 117], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReserveEModeCategory` (0x163a0f20) function"]
        pub fn get_reserve_e_mode_category(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([22, 58, 15, 32], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReserveTokensAddresses` (0xd2493b6c) function"]
        pub fn get_reserve_tokens_addresses(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::Address,
                ethers::core::types::Address,
                ethers::core::types::Address,
            ),
        > {
            self.0
                .method_hash([210, 73, 59, 108], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getSiloedBorrowing` (0xfcf40a62) function"]
        pub fn get_siloed_borrowing(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([252, 244, 10, 98], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getTotalDebt` (0x4d44ac4f) function"]
        pub fn get_total_debt(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([77, 68, 172, 79], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getUnbackedMintCap` (0x7ba1ae36) function"]
        pub fn get_unbacked_mint_cap(
            &self,
            asset: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([123, 161, 174, 54], asset)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getUserReserveData` (0x28dd2d01) function"]
        pub fn get_user_reserve_data(
            &self,
            asset: ethers::core::types::Address,
            user: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                u64,
                bool,
            ),
        > {
            self.0
                .method_hash([40, 221, 45, 1], (asset, user))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for AaveProtocolDataProvider<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `ADDRESSES_PROVIDER`function with signature `ADDRESSES_PROVIDER()` and selector `[5, 66, 151, 92]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "ADDRESSES_PROVIDER", abi = "ADDRESSES_PROVIDER()")]
    pub struct AddressesProviderCall;
    #[doc = "Container type for all input parameters for the `getATokenTotalSupply`function with signature `getATokenTotalSupply(address)` and selector `[81, 70, 14, 37]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getATokenTotalSupply", abi = "getATokenTotalSupply(address)")]
    pub struct GetATokenTotalSupplyCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getAllATokens`function with signature `getAllATokens()` and selector `[245, 97, 174, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getAllATokens", abi = "getAllATokens()")]
    pub struct GetAllATokensCall;
    #[doc = "Container type for all input parameters for the `getAllReservesTokens`function with signature `getAllReservesTokens()` and selector `[179, 22, 255, 137]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getAllReservesTokens", abi = "getAllReservesTokens()")]
    pub struct GetAllReservesTokensCall;
    #[doc = "Container type for all input parameters for the `getDebtCeiling`function with signature `getDebtCeiling(address)` and selector `[60, 121, 129, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getDebtCeiling", abi = "getDebtCeiling(address)")]
    pub struct GetDebtCeilingCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getDebtCeilingDecimals`function with signature `getDebtCeilingDecimals()` and selector `[105, 177, 105, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getDebtCeilingDecimals", abi = "getDebtCeilingDecimals()")]
    pub struct GetDebtCeilingDecimalsCall;
    #[doc = "Container type for all input parameters for the `getInterestRateStrategyAddress`function with signature `getInterestRateStrategyAddress(address)` and selector `[103, 68, 54, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getInterestRateStrategyAddress",
        abi = "getInterestRateStrategyAddress(address)"
    )]
    pub struct GetInterestRateStrategyAddressCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getLiquidationProtocolFee`function with signature `getLiquidationProtocolFee(address)` and selector `[60, 184, 166, 34]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getLiquidationProtocolFee",
        abi = "getLiquidationProtocolFee(address)"
    )]
    pub struct GetLiquidationProtocolFeeCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getPaused`function with signature `getPaused(address)` and selector `[181, 93, 153, 4]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getPaused", abi = "getPaused(address)")]
    pub struct GetPausedCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getReserveCaps`function with signature `getReserveCaps(address)` and selector `[70, 251, 229, 88]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getReserveCaps", abi = "getReserveCaps(address)")]
    pub struct GetReserveCapsCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getReserveConfigurationData`function with signature `getReserveConfigurationData(address)` and selector `[62, 21, 1, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getReserveConfigurationData",
        abi = "getReserveConfigurationData(address)"
    )]
    pub struct GetReserveConfigurationDataCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getReserveData`function with signature `getReserveData(address)` and selector `[53, 234, 106, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getReserveData", abi = "getReserveData(address)")]
    pub struct GetReserveDataCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getReserveEModeCategory`function with signature `getReserveEModeCategory(address)` and selector `[22, 58, 15, 32]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getReserveEModeCategory",
        abi = "getReserveEModeCategory(address)"
    )]
    pub struct GetReserveEModeCategoryCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getReserveTokensAddresses`function with signature `getReserveTokensAddresses(address)` and selector `[210, 73, 59, 108]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getReserveTokensAddresses",
        abi = "getReserveTokensAddresses(address)"
    )]
    pub struct GetReserveTokensAddressesCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getSiloedBorrowing`function with signature `getSiloedBorrowing(address)` and selector `[252, 244, 10, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getSiloedBorrowing", abi = "getSiloedBorrowing(address)")]
    pub struct GetSiloedBorrowingCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getTotalDebt`function with signature `getTotalDebt(address)` and selector `[77, 68, 172, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getTotalDebt", abi = "getTotalDebt(address)")]
    pub struct GetTotalDebtCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getUnbackedMintCap`function with signature `getUnbackedMintCap(address)` and selector `[123, 161, 174, 54]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getUnbackedMintCap", abi = "getUnbackedMintCap(address)")]
    pub struct GetUnbackedMintCapCall {
        pub asset: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getUserReserveData`function with signature `getUserReserveData(address,address)` and selector `[40, 221, 45, 1]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getUserReserveData",
        abi = "getUserReserveData(address,address)"
    )]
    pub struct GetUserReserveDataCall {
        pub asset: ethers::core::types::Address,
        pub user: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AaveProtocolDataProviderCalls {
        AddressesProvider(AddressesProviderCall),
        GetATokenTotalSupply(GetATokenTotalSupplyCall),
        GetAllATokens(GetAllATokensCall),
        GetAllReservesTokens(GetAllReservesTokensCall),
        GetDebtCeiling(GetDebtCeilingCall),
        GetDebtCeilingDecimals(GetDebtCeilingDecimalsCall),
        GetInterestRateStrategyAddress(GetInterestRateStrategyAddressCall),
        GetLiquidationProtocolFee(GetLiquidationProtocolFeeCall),
        GetPaused(GetPausedCall),
        GetReserveCaps(GetReserveCapsCall),
        GetReserveConfigurationData(GetReserveConfigurationDataCall),
        GetReserveData(GetReserveDataCall),
        GetReserveEModeCategory(GetReserveEModeCategoryCall),
        GetReserveTokensAddresses(GetReserveTokensAddressesCall),
        GetSiloedBorrowing(GetSiloedBorrowingCall),
        GetTotalDebt(GetTotalDebtCall),
        GetUnbackedMintCap(GetUnbackedMintCapCall),
        GetUserReserveData(GetUserReserveDataCall),
    }
    impl ethers::core::abi::AbiDecode for AaveProtocolDataProviderCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AddressesProviderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::AddressesProvider(decoded));
            }
            if let Ok(decoded) =
                <GetATokenTotalSupplyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetATokenTotalSupply(decoded));
            }
            if let Ok(decoded) =
                <GetAllATokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetAllATokens(decoded));
            }
            if let Ok(decoded) =
                <GetAllReservesTokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetAllReservesTokens(decoded));
            }
            if let Ok(decoded) =
                <GetDebtCeilingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetDebtCeiling(decoded));
            }
            if let Ok(decoded) =
                <GetDebtCeilingDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetDebtCeilingDecimals(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GetInterestRateStrategyAddressCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AaveProtocolDataProviderCalls::GetInterestRateStrategyAddress(decoded));
            }
            if let Ok(decoded) =
                <GetLiquidationProtocolFeeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AaveProtocolDataProviderCalls::GetLiquidationProtocolFee(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GetPausedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetPaused(decoded));
            }
            if let Ok(decoded) =
                <GetReserveCapsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetReserveCaps(decoded));
            }
            if let Ok(decoded) =
                <GetReserveConfigurationDataCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AaveProtocolDataProviderCalls::GetReserveConfigurationData(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GetReserveDataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetReserveData(decoded));
            }
            if let Ok(decoded) =
                <GetReserveEModeCategoryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetReserveEModeCategory(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GetReserveTokensAddressesCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AaveProtocolDataProviderCalls::GetReserveTokensAddresses(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GetSiloedBorrowingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetSiloedBorrowing(decoded));
            }
            if let Ok(decoded) =
                <GetTotalDebtCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetTotalDebt(decoded));
            }
            if let Ok(decoded) =
                <GetUnbackedMintCapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetUnbackedMintCap(decoded));
            }
            if let Ok(decoded) =
                <GetUserReserveDataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AaveProtocolDataProviderCalls::GetUserReserveData(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for AaveProtocolDataProviderCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                AaveProtocolDataProviderCalls::AddressesProvider(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetATokenTotalSupply(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetAllATokens(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetAllReservesTokens(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetDebtCeiling(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetDebtCeilingDecimals(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetInterestRateStrategyAddress(element) => {
                    element.encode()
                }
                AaveProtocolDataProviderCalls::GetLiquidationProtocolFee(element) => {
                    element.encode()
                }
                AaveProtocolDataProviderCalls::GetPaused(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetReserveCaps(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetReserveConfigurationData(element) => {
                    element.encode()
                }
                AaveProtocolDataProviderCalls::GetReserveData(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetReserveEModeCategory(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetReserveTokensAddresses(element) => {
                    element.encode()
                }
                AaveProtocolDataProviderCalls::GetSiloedBorrowing(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetTotalDebt(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetUnbackedMintCap(element) => element.encode(),
                AaveProtocolDataProviderCalls::GetUserReserveData(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for AaveProtocolDataProviderCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AaveProtocolDataProviderCalls::AddressesProvider(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetATokenTotalSupply(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetAllATokens(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetAllReservesTokens(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetDebtCeiling(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetDebtCeilingDecimals(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetInterestRateStrategyAddress(element) => {
                    element.fmt(f)
                }
                AaveProtocolDataProviderCalls::GetLiquidationProtocolFee(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetPaused(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetReserveCaps(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetReserveConfigurationData(element) => {
                    element.fmt(f)
                }
                AaveProtocolDataProviderCalls::GetReserveData(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetReserveEModeCategory(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetReserveTokensAddresses(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetSiloedBorrowing(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetTotalDebt(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetUnbackedMintCap(element) => element.fmt(f),
                AaveProtocolDataProviderCalls::GetUserReserveData(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AddressesProviderCall> for AaveProtocolDataProviderCalls {
        fn from(var: AddressesProviderCall) -> Self {
            AaveProtocolDataProviderCalls::AddressesProvider(var)
        }
    }
    impl ::std::convert::From<GetATokenTotalSupplyCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetATokenTotalSupplyCall) -> Self {
            AaveProtocolDataProviderCalls::GetATokenTotalSupply(var)
        }
    }
    impl ::std::convert::From<GetAllATokensCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetAllATokensCall) -> Self {
            AaveProtocolDataProviderCalls::GetAllATokens(var)
        }
    }
    impl ::std::convert::From<GetAllReservesTokensCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetAllReservesTokensCall) -> Self {
            AaveProtocolDataProviderCalls::GetAllReservesTokens(var)
        }
    }
    impl ::std::convert::From<GetDebtCeilingCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetDebtCeilingCall) -> Self {
            AaveProtocolDataProviderCalls::GetDebtCeiling(var)
        }
    }
    impl ::std::convert::From<GetDebtCeilingDecimalsCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetDebtCeilingDecimalsCall) -> Self {
            AaveProtocolDataProviderCalls::GetDebtCeilingDecimals(var)
        }
    }
    impl ::std::convert::From<GetInterestRateStrategyAddressCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetInterestRateStrategyAddressCall) -> Self {
            AaveProtocolDataProviderCalls::GetInterestRateStrategyAddress(var)
        }
    }
    impl ::std::convert::From<GetLiquidationProtocolFeeCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetLiquidationProtocolFeeCall) -> Self {
            AaveProtocolDataProviderCalls::GetLiquidationProtocolFee(var)
        }
    }
    impl ::std::convert::From<GetPausedCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetPausedCall) -> Self {
            AaveProtocolDataProviderCalls::GetPaused(var)
        }
    }
    impl ::std::convert::From<GetReserveCapsCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetReserveCapsCall) -> Self {
            AaveProtocolDataProviderCalls::GetReserveCaps(var)
        }
    }
    impl ::std::convert::From<GetReserveConfigurationDataCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetReserveConfigurationDataCall) -> Self {
            AaveProtocolDataProviderCalls::GetReserveConfigurationData(var)
        }
    }
    impl ::std::convert::From<GetReserveDataCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetReserveDataCall) -> Self {
            AaveProtocolDataProviderCalls::GetReserveData(var)
        }
    }
    impl ::std::convert::From<GetReserveEModeCategoryCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetReserveEModeCategoryCall) -> Self {
            AaveProtocolDataProviderCalls::GetReserveEModeCategory(var)
        }
    }
    impl ::std::convert::From<GetReserveTokensAddressesCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetReserveTokensAddressesCall) -> Self {
            AaveProtocolDataProviderCalls::GetReserveTokensAddresses(var)
        }
    }
    impl ::std::convert::From<GetSiloedBorrowingCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetSiloedBorrowingCall) -> Self {
            AaveProtocolDataProviderCalls::GetSiloedBorrowing(var)
        }
    }
    impl ::std::convert::From<GetTotalDebtCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetTotalDebtCall) -> Self {
            AaveProtocolDataProviderCalls::GetTotalDebt(var)
        }
    }
    impl ::std::convert::From<GetUnbackedMintCapCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetUnbackedMintCapCall) -> Self {
            AaveProtocolDataProviderCalls::GetUnbackedMintCap(var)
        }
    }
    impl ::std::convert::From<GetUserReserveDataCall> for AaveProtocolDataProviderCalls {
        fn from(var: GetUserReserveDataCall) -> Self {
            AaveProtocolDataProviderCalls::GetUserReserveData(var)
        }
    }
    #[doc = "`TokenData(string,address)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TokenData {
        pub symbol: String,
        pub token_address: ethers::core::types::Address,
    }
}
