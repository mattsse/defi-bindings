pub use liquidationlogic_mod::*;
#[allow(clippy::too_many_arguments)]
mod liquidationlogic_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "LiquidationLogic was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static LIQUIDATIONLOGIC_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LiquidationCall\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ReserveUsedAsCollateralDisabled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ReserveUsedAsCollateralEnabled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"CLOSE_FACTOR_HF_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_LIQUIDATION_CLOSE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static LIQUIDATIONLOGIC_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct LiquidationLogic<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for LiquidationLogic<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for LiquidationLogic<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(LiquidationLogic))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> LiquidationLogic<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), LIQUIDATIONLOGIC_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                LIQUIDATIONLOGIC_ABI.clone(),
                LIQUIDATIONLOGIC_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `CLOSE_FACTOR_HF_THRESHOLD` (0xa18964a5) function"]
        pub fn close_factor_hf_threshold(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([161, 137, 100, 165], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `MAX_LIQUIDATION_CLOSE_FACTOR` (0xd2467544) function"]
        pub fn max_liquidation_close_factor(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([210, 70, 117, 68], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `LiquidationCall` event"]
        pub fn liquidation_call_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LiquidationCallFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ReserveUsedAsCollateralDisabled` event"]
        pub fn reserve_used_as_collateral_disabled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ReserveUsedAsCollateralDisabledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ReserveUsedAsCollateralEnabled` event"]
        pub fn reserve_used_as_collateral_enabled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ReserveUsedAsCollateralEnabledFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, LiquidationLogicEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for LiquidationLogic<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "LiquidationCall",
        abi = "LiquidationCall(address,address,address,uint256,uint256,address,bool)"
    )]
    pub struct LiquidationCallFilter {
        #[ethevent(indexed)]
        pub collateral_asset: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub debt_asset: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub user: ethers::core::types::Address,
        pub debt_to_cover: ethers::core::types::U256,
        pub liquidated_collateral_amount: ethers::core::types::U256,
        pub liquidator: ethers::core::types::Address,
        pub receive_a_token: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "ReserveUsedAsCollateralDisabled",
        abi = "ReserveUsedAsCollateralDisabled(address,address)"
    )]
    pub struct ReserveUsedAsCollateralDisabledFilter {
        #[ethevent(indexed)]
        pub reserve: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub user: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "ReserveUsedAsCollateralEnabled",
        abi = "ReserveUsedAsCollateralEnabled(address,address)"
    )]
    pub struct ReserveUsedAsCollateralEnabledFilter {
        #[ethevent(indexed)]
        pub reserve: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub user: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum LiquidationLogicEvents {
        LiquidationCallFilter(LiquidationCallFilter),
        ReserveUsedAsCollateralDisabledFilter(ReserveUsedAsCollateralDisabledFilter),
        ReserveUsedAsCollateralEnabledFilter(ReserveUsedAsCollateralEnabledFilter),
    }
    impl ethers::contract::EthLogDecode for LiquidationLogicEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LiquidationCallFilter::decode_log(log) {
                return Ok(LiquidationLogicEvents::LiquidationCallFilter(decoded));
            }
            if let Ok(decoded) = ReserveUsedAsCollateralDisabledFilter::decode_log(log) {
                return Ok(LiquidationLogicEvents::ReserveUsedAsCollateralDisabledFilter(decoded));
            }
            if let Ok(decoded) = ReserveUsedAsCollateralEnabledFilter::decode_log(log) {
                return Ok(LiquidationLogicEvents::ReserveUsedAsCollateralEnabledFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for LiquidationLogicEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LiquidationLogicEvents::LiquidationCallFilter(element) => element.fmt(f),
                LiquidationLogicEvents::ReserveUsedAsCollateralDisabledFilter(element) => {
                    element.fmt(f)
                }
                LiquidationLogicEvents::ReserveUsedAsCollateralEnabledFilter(element) => {
                    element.fmt(f)
                }
            }
        }
    }
    #[doc = "Container type for all input parameters for the `CLOSE_FACTOR_HF_THRESHOLD`function with signature `CLOSE_FACTOR_HF_THRESHOLD()` and selector `[161, 137, 100, 165]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "CLOSE_FACTOR_HF_THRESHOLD",
        abi = "CLOSE_FACTOR_HF_THRESHOLD()"
    )]
    pub struct CloseFactorHfThresholdCall;
    #[doc = "Container type for all input parameters for the `MAX_LIQUIDATION_CLOSE_FACTOR`function with signature `MAX_LIQUIDATION_CLOSE_FACTOR()` and selector `[210, 70, 117, 68]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "MAX_LIQUIDATION_CLOSE_FACTOR",
        abi = "MAX_LIQUIDATION_CLOSE_FACTOR()"
    )]
    pub struct MaxLiquidationCloseFactorCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum LiquidationLogicCalls {
        CloseFactorHfThreshold(CloseFactorHfThresholdCall),
        MaxLiquidationCloseFactor(MaxLiquidationCloseFactorCall),
    }
    impl ethers::core::abi::AbiDecode for LiquidationLogicCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <CloseFactorHfThresholdCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LiquidationLogicCalls::CloseFactorHfThreshold(decoded));
            }
            if let Ok(decoded) =
                <MaxLiquidationCloseFactorCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LiquidationLogicCalls::MaxLiquidationCloseFactor(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for LiquidationLogicCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                LiquidationLogicCalls::CloseFactorHfThreshold(element) => element.encode(),
                LiquidationLogicCalls::MaxLiquidationCloseFactor(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for LiquidationLogicCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LiquidationLogicCalls::CloseFactorHfThreshold(element) => element.fmt(f),
                LiquidationLogicCalls::MaxLiquidationCloseFactor(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<CloseFactorHfThresholdCall> for LiquidationLogicCalls {
        fn from(var: CloseFactorHfThresholdCall) -> Self {
            LiquidationLogicCalls::CloseFactorHfThreshold(var)
        }
    }
    impl ::std::convert::From<MaxLiquidationCloseFactorCall> for LiquidationLogicCalls {
        fn from(var: MaxLiquidationCloseFactorCall) -> Self {
            LiquidationLogicCalls::MaxLiquidationCloseFactor(var)
        }
    }
}
