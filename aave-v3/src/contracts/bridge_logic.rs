pub use bridgelogic_mod::*;
#[allow(clippy::too_many_arguments)]
mod bridgelogic_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "BridgeLogic was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static BRIDGELOGIC_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"backer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"BackUnbacked\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"MintUnbacked\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ReserveUsedAsCollateralEnabled\",\"outputs\":[],\"anonymous\":false}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static BRIDGELOGIC_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6119a661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630413c86f146100455780638e74324814610067575b600080fd5b81801561005157600080fd5b506100656100603660046115cd565b610087565b005b81801561007357600080fd5b50610065610082366004611642565b61030c565b6001600160a01b0384166000908152602088905260408120906100a982610532565b90506100b582826106f2565b6100bf818661070a565b6101c08101515160b081901c640fffffffff169060301c60ff1660006100e48861094e565b600886018054601090610108908490600160801b90046001600160801b031661169e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790556001600160801b0316905081600a61014391906117ad565b61014d90846117b9565b811115604051806040016040528060028152602001611a9960f11b815250906101925760405162461bcd60e51b815260040161018991906117d8565b60405180910390fd5b506101a185858b6000806109bb565b6101e084015161010085015160405163b3f1c93d60e01b81523360048201526001600160a01b038a81166024830152604482018c90526064820192909252600092919091169063b3f1c93d906084016020604051808303816000875af115801561020f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610233919061182d565b905080156102ae5761024c8d8d8d886101c00151610c87565b156102ae57600386015461026e908c90600160a81b900461ffff166001610d0d565b876001600160a01b03168a6001600160a01b03167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a35b60408051338152602081018b905261ffff8916916001600160a01b03808c1692908e16917ff25af37b3d3ec226063dc9bdc103ece7eb110a50f340fe854bb7bc1b0676d7d0910160405180910390a450505050505050505050505050565b600061031786610532565b905061032386826106f2565b6008860154600090600160801b90046001600160801b0316851061035b576008870154600160801b90046001600160801b031661035d565b845b9050600061036b8585610d6f565b90506000610379828761184f565b905060006103878785611866565b90506103fb856101e001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f3919061187e565b8b9084610d95565b610100860181905261041790610412908590610e14565b61094e565b60088b0180546000906104349084906001600160801b031661169e565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506104618461094e565b60088b018054601090610485908490600160801b90046001600160801b0316611897565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506104c3858a8360008e6109bb90949392919063ffffffff16565b6101e08501516104e0906001600160a01b038b1690339084610e51565b604080518581526020810189905233916001600160a01b038c16917f281596e92b2d974beb7d4f124df30a0b39067b096893e95011ce4bdad798b759910160405180910390a350505050505050505050565b61053a611509565b610542611509565b60408051602081018252845481526101c0830181905251901c61ffff166101a082015260018301546001600160801b0380821660e08401526002850154808216610120850152600160801b928390048216610160850152829004166101808301526004808501546001600160a01b039081166101e085015260058601548116610200850152600686015416610220840181905260038601549290920464ffffffffff166102408401526040805163b1bf962d60e01b8152905163b1bf962d928281019260209291908290030181865afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610647919061187e565b81602001818152508160000181815250508061020001516001600160a01b031663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf91906118bf565b64ffffffffff166102608501526060840181905260808401829052604084019290925260c083015260a082015292915050565b6106fc8282610ef3565b6107068282611009565b5050565b604080518082019091526002815261191b60f11b6020820152816107415760405162461bcd60e51b815260040161018991906117d8565b506000806000610798856101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b94505050925092508260405180604001604052806002815260200161323760f01b815250906107da5760405162461bcd60e51b815260040161018991906117d8565b50604080518082019091526002815261323960f01b602082015281156108135760405162461bcd60e51b815260040161018991906117d8565b50604080518082019091526002815261064760f31b6020820152821561084c5760405162461bcd60e51b815260040161018991906117d8565b506101c08501515160741c640fffffffff1680158061090c57506101c08601515160301c60ff1661087e90600a6117ad565b61088890826117b9565b856108ff886101000151896101e001516001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f9919061187e565b9061116e565b6109099190611866565b11155b60405180604001604052806002815260200161353160f01b815250906109455760405162461bcd60e51b815260040161018991906117d8565b50505050505050565b60006001600160801b038211156109b75760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610189565b5090565b6109e66040518060800160405280600081526020016000815260200160008152602001600081525090565b61014085015160208601516109fa9161116e565b606082015260078601546040805161012081019091526101c0870151516001600160a01b039092169163a58987099190819060b01c640fffffffff16610a41576000610a57565b60088a0154600160801b90046001600160801b03165b6001600160801b031681526020018681526020018581526020018860c001518152602001846060015181526020018860a001518152602001886101a001518152602001876001600160a01b03168152602001886101e001516001600160a01b03168152506040518263ffffffff1660e01b8152600401610b409190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e0808301516001600160a01b03908116918301919091526101009283015116918101919091526101200190565b606060405180830381865afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b81919061190a565b60408401526020830152808252610b979061094e565b6001870180546001600160801b03928316600160801b0292169190911790556020810151610bc49061094e565b6003870180546001600160801b0319166001600160801b03929092169190911790556040810151610bf49061094e565b6002870180546001600160801b03928316600160801b02921691909117905580516020808301516040808501516101008a01516101408b015183519687529486019390935290840152606083015260808201526001600160a01b038516907f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a9060a00160405180910390a2505050505050565b60408051602081019091528254908190526000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa16610cc957506001610d05565b604080516020810190915283548152600090610ce69087876111b1565b5050905080158015610d015750825160d41c64ffffffffff16155b9150505b949350505050565b6040805180820190915260028152610dcd60f21b602082015260808310610d475760405162461bcd60e51b815260040161018991906117d8565b50600182811b81011b8115610d6157835481178455610d69565b835481191684555b50505050565b600081156113881983900484111517610d8757600080fd5b506127109102611388010490565b60018301546000908190610ddd906001600160801b0316676765c793fa10079d601b1b610dd3610dc48861125c565b610dcd8861125c565b90610e14565b6108f99190611866565b9050610de88161094e565b6001860180546001600160801b0319166001600160801b039290921691909117905590505b9392505050565b60008115676765c793fa10079d601b1b60028404190484111715610e3757600080fd5b50676765c793fa10079d601b1b9190910260028204010490565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1610e96573d6000803e3d6000fd5b50610ea085611277565b610eec5760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610189565b5050505050565b60e081015161010082015261012081015161014082015261016081015115610fe5576000610f2b826101600151836102400151611320565b9050610f448260e001518261116e90919063ffffffff16565b6101008301819052610f559061094e565b6001840180546001600160801b0319166001600160801b0392909216919091179055815115610fe3576000610f94836101800151846102400151611366565b9050610fae8361012001518261116e90919063ffffffff16565b6101408401819052610fbf9061094e565b6002850180546001600160801b0319166001600160801b0392909216919091179055505b505b50600301805464ffffffffff60801b1916600160801b4264ffffffffff1602179055565b6110426040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6101a082015161105157505050565b61012082015182516110629161116e565b602082015261014082015182516110789161116e565b604082015260608201516102608301516102408401516110a092919064ffffffffff1661136f565b6060820181905260408301516110b59161116e565b8082526020820151608084015160408401516110d19190611866565b6110db919061184f565b6110e5919061184f565b608082018190526101a08301516110fc9190610d6f565b60a0820181905215611169576111276104128361010001518360a00151610e1490919063ffffffff16565b6008840180546000906111449084906001600160801b031661169e565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b505050565b600081156b019d971e4fe8401e74000000198390048411151761119057600080fd5b50676765c793fa10079d601b1b91026b019d971e4fe8401e74000000010490565b60008060006111bf86611496565b156112495760006111f0877faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6114da565b600081815260208781526040808320546001600160a01b03168084528a8352818420825193840190925290549182905292935060d41c64ffffffffff1690508015611245576001955090935091506112539050565b5050505b5060009150819050805b93509350939050565b633b9aca00818102908104821461127257600080fd5b919050565b600061129d565b62461bcd60e51b60005260206004528060245250806044525060646000fd5b3d80156112dc576020811461130d576112d77f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61127e565b61131a565b823b611304576113047311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b601461127e565b6001915061131a565b3d6000803e600051151591505b50919050565b60008061133464ffffffffff84164261184f565b61133e90856117b9565b6301e133809004905061135c81676765c793fa10079d601b1b611866565b9150505b92915050565b6000610e0d8383425b60008061138364ffffffffff85168461184f565b90508061139e57676765c793fa10079d601b1b915050610e0d565b600019810160008080600285116113b65760006113bb565b600285035b925066038882915c40006113cf8a8061116e565b816113dc576113dc611938565b0491506301e133806113ee838b61116e565b816113fb576113fb611938565b04905060008261140b86886117b9565b61141591906117b9565b60029004905060008285611429888a6117b9565b61143391906117b9565b61143d91906117b9565b60069004905080826301e133806114548a8f6117b9565b61145e919061194e565b61147390676765c793fa10079d601b1b611866565b61147d9190611866565b6114879190611866565b9b9a5050505050505050505050565b80516000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa168015801590610e0d57506114d260018261184f565b161592915050565b815160009082166000198101198116825b60029190911c908115611500576001016114eb565b95945050505050565b604051806102800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161158d6040518060200160405280600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b80356001600160a01b038116811461127257600080fd5b600080600080600080600060e0888a0312156115e857600080fd5b873596506020880135955060408801359450611606606089016115b6565b93506080880135925061161b60a089016115b6565b915060c088013561ffff8116811461163257600080fd5b8091505092959891949750929550565b600080600080600060a0868803121561165a57600080fd5b8535945061166a602087016115b6565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b038083168185168083038211156116c0576116c0611688565b01949350505050565b600181815b808511156117045781600019048211156116ea576116ea611688565b808516156116f757918102915b93841c93908002906116ce565b509250929050565b60008261171b57506001611360565b8161172857506000611360565b816001811461173e576002811461174857611764565b6001915050611360565b60ff84111561175957611759611688565b50506001821b611360565b5060208310610133831016604e8410600b8410161715611787575081810a611360565b61179183836116c9565b80600019048211156117a5576117a5611688565b029392505050565b6000610e0d838361170c565b60008160001904831182151516156117d3576117d3611688565b500290565b600060208083528351808285015260005b81811015611805578581018301518582016040015282016117e9565b81811115611817576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561183f57600080fd5b81518015158114610e0d57600080fd5b60008282101561186157611861611688565b500390565b6000821982111561187957611879611688565b500190565b60006020828403121561189057600080fd5b5051919050565b60006001600160801b03838116908316818110156118b7576118b7611688565b039392505050565b600080600080608085870312156118d557600080fd5b845193506020850151925060408501519150606085015164ffffffffff811681146118ff57600080fd5b939692955090935050565b60008060006060848603121561191f57600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601260045260246000fd5b60008261196b57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122057c167a1adc7e4fb298e4e98c8dbe1705ca8dc08fc2bf099ae3077b72207135b64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct BridgeLogic<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for BridgeLogic<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for BridgeLogic<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(BridgeLogic))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> BridgeLogic<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), BRIDGELOGIC_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                BRIDGELOGIC_ABI.clone(),
                BRIDGELOGIC_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Gets the contract's `BackUnbacked` event"]
        pub fn back_unbacked_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, BackUnbackedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `MintUnbacked` event"]
        pub fn mint_unbacked_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MintUnbackedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ReserveUsedAsCollateralEnabled` event"]
        pub fn reserve_used_as_collateral_enabled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ReserveUsedAsCollateralEnabledFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, BridgeLogicEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for BridgeLogic<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "BackUnbacked",
        abi = "BackUnbacked(address,address,uint256,uint256)"
    )]
    pub struct BackUnbackedFilter {
        #[ethevent(indexed)]
        pub reserve: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub backer: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub fee: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "MintUnbacked",
        abi = "MintUnbacked(address,address,address,uint256,uint16)"
    )]
    pub struct MintUnbackedFilter {
        #[ethevent(indexed)]
        pub reserve: ethers::core::types::Address,
        pub user: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub on_behalf_of: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub referral_code: u16,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "ReserveUsedAsCollateralEnabled",
        abi = "ReserveUsedAsCollateralEnabled(address,address)"
    )]
    pub struct ReserveUsedAsCollateralEnabledFilter {
        #[ethevent(indexed)]
        pub reserve: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub user: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum BridgeLogicEvents {
        BackUnbackedFilter(BackUnbackedFilter),
        MintUnbackedFilter(MintUnbackedFilter),
        ReserveUsedAsCollateralEnabledFilter(ReserveUsedAsCollateralEnabledFilter),
    }
    impl ethers::contract::EthLogDecode for BridgeLogicEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = BackUnbackedFilter::decode_log(log) {
                return Ok(BridgeLogicEvents::BackUnbackedFilter(decoded));
            }
            if let Ok(decoded) = MintUnbackedFilter::decode_log(log) {
                return Ok(BridgeLogicEvents::MintUnbackedFilter(decoded));
            }
            if let Ok(decoded) = ReserveUsedAsCollateralEnabledFilter::decode_log(log) {
                return Ok(BridgeLogicEvents::ReserveUsedAsCollateralEnabledFilter(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for BridgeLogicEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BridgeLogicEvents::BackUnbackedFilter(element) => element.fmt(f),
                BridgeLogicEvents::MintUnbackedFilter(element) => element.fmt(f),
                BridgeLogicEvents::ReserveUsedAsCollateralEnabledFilter(element) => element.fmt(f),
            }
        }
    }
}
