pub use mapleloaninternals_rejectnewtermstests_mod::*;
#[allow(clippy::too_many_arguments)]
mod mapleloaninternals_rejectnewtermstests_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "MapleLoanInternals_RejectNewTermsTests was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static MAPLELOANINTERNALS_REJECTNEWTERMSTESTS_ABI: ethers::contract::Lazy<
        ethers::core::abi::Abi,
    > = ethers::contract::Lazy::new(|| {
        serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_rejectNewTerms_commitmentMismatch_emptyCallsArray\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_rejectNewTerms_commitmentMismatch_mismatchedCalls\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_rejectNewTerms_commitmentMismatch_mismatchedDeadline\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_rejectNewTerms_commitmentMismatch_mismatchedRefinancer\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_rejectNewTerms_success\",\"outputs\":[]}]") . expect ("invalid abi")
    });
    #[doc = r" Bytecode of the #name contract"]
    pub static MAPLELOANINTERNALS_REJECTNEWTERMSTESTS_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "0x60806040526000805461ff01600160b01b031916757109709ecfa91a80626ff3989d68f67f5b1dd12d000117905534801561003957600080fd5b50613f3a806100496000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c2b634991161005b578063c2b63499146100cd578063c50289ab146100d5578063e499da61146100dd578063fa7626d4146100e557600080fd5b80630a9254e41461008d5780639f2ab18f14610097578063b12b2e1e1461009f578063ba414fa6146100a7575b600080fd5b6100956100f2565b005b610095610186565b61009561041c565b6000546100b990610100900460ff1681565b604051901515815260200160405180910390f35b6100956105e8565b6100956108c1565b610095610b9b565b6000546100b99060ff1681565b6040516100fe90610f24565b604051809103906000f08015801561011a573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905560405161014790610f31565b604051809103906000f080158015610163573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061019542620d2f00611040565b60408051600180825281830190925291925060009190816020015b60608152602001906001900390816101b0579050506040516000602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b1790528151829060009061021257610212611066565b60209081029190910101526001546002546040516387accaf160e01b81526001600160a01b03928316926387accaf1926102559291169086908690600401610f57565b602060405180830381600087803b15801561026f57600080fd5b505af1158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610f3e565b5060005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb3906102db90600401611009565b600060405180830381600087803b1580156102f557600080fd5b505af1158015610309573d6000803e3d6000fd5b50506001546002546001600160a01b03918216935063acb522b492501684600060405190808252806020026020018201604052801561035c57816020015b60608152602001906001900390816103475790505b506040518463ffffffff1660e01b815260040161037b93929190610f57565b600060405180830381600087803b15801561039557600080fd5b505af11580156103a9573d6000803e3d6000fd5b5050600154600254604051632b2d48ad60e21b81526001600160a01b03928316945063acb522b493506103e6929091169086908690600401610f57565b600060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b505050505050565b600061042b42620d2f00611040565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610446579050506040516000602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b179052815182906000906104a8576104a8611066565b60209081029190910101526001546002546040516387accaf160e01b81526001600160a01b03928316926387accaf1926104eb9291169086908690600401610f57565b602060405180830381600087803b15801561050557600080fd5b505af1158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190610f3e565b5060005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb39061057190600401611009565b600060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b5050600180546002546001600160a01b03918216945063acb522b4935016906105c9908690611040565b846040518463ffffffff1660e01b815260040161037b93929190610f57565b60006105f742620d2f00611040565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610612579050506040516000602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b1790528151829060009061067457610674611066565b60209081029190910101526001546002546040516387accaf160e01b81526001600160a01b03928316926387accaf1926106b79291169086908690600401610f57565b602060405180830381600087803b1580156106d157600080fd5b505af11580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190610f3e565b506001546040805163ba83276b60e01b815290516107c3926001600160a01b03169163ba83276b916004808301926020929190829003018186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190610f3e565b6002546040516107a8916001600160a01b03169086908690602001610f57565b60405160208183030381529060405280519060200120610dee565b600154600254604051632b2d48ad60e21b81526001600160a01b039283169263acb522b4926107fb9291169086908690600401610f57565b600060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b505050506108bd600160009054906101000a90046001600160a01b03166001600160a01b031663ba83276b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087e57600080fd5b505afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190610f3e565b6000610dee565b5050565b60006108d042620d2f00611040565b60408051600180825281830190925291925060009190816020015b60608152602001906001900390816108eb57505060405160006024820181905291925060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b1790528251839060009061094e5761094e611066565b602090810291909101018190526001546002546040516387accaf160e01b81529293506001600160a01b03918216926387accaf19261099592169087908790600401610f57565b602060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190610f3e565b506040516064602482015260440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b17905282518390600090610a3257610a32611066565b602090810291909101015260005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb390610a7090600401611009565b600060405180830381600087803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b5050600154600254604051632b2d48ad60e21b81526001600160a01b03928316945063acb522b49350610adb929091169087908790600401610f57565b600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b505050508082600081518110610b2157610b21611066565b6020908102919091010152600154600254604051632b2d48ad60e21b81526001600160a01b039283169263acb522b492610b649291169087908790600401610f57565b600060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b50505050505050565b6000604051610ba990610f31565b604051809103906000f080158015610bc5573d6000803e3d6000fd5b5090506000610bd742620d2f00611040565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610bf2579050506040516000602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b17905281518290600090610c5457610c54611066565b60209081029190910101526001546002546040516387accaf160e01b81526001600160a01b03928316926387accaf192610c979291169086908690600401610f57565b602060405180830381600087803b158015610cb157600080fd5b505af1158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce99190610f3e565b5060005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb390610d1d90600401611009565b600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b5050600154604051632b2d48ad60e21b81526001600160a01b03909116925063acb522b49150610d8390869086908690600401610f57565b600060405180830381600087803b158015610d9d57600080fd5b505af1158015610db1573d6000803e3d6000fd5b5050600154600254604051632b2d48ad60e21b81526001600160a01b03928316945063acb522b49350610b64929091169086908690600401610f57565b8082146108bd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610e629060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f999181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f999181900360800190a16108bd6000805461ff001916610100179055565b6127dd8061107d83390190565b6106ab8061385a83390190565b600060208284031215610f5057600080fd5b5051919050565b60006060820160018060a01b0386168352602085818501526060604085015281855180845260808601915060808160051b87010193508287016000805b83811015610ff957888703607f1901855282518051808952835b81811015610fc9578281018901518a82018a01528801610fae565b81811115610fd9578489838c0101525b50601f01601f191697909701860196509385019391850191600101610f94565b50949a9950505050505050505050565b6020808252601b908201527f4d4c493a524e543a434f4d4d49544d454e545f4d49534d415443480000000000604082015260600190565b6000821982111561106157634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b506127bd806100206000396000f3fe608060405234801561001057600080fd5b50600436106104285760003560e01c80639931c34c1161022b578063c762d5f711610130578063e268255d116100b8578063eb7462c711610087578063eb7462c7146108f6578063f2f659601461090e578063f68dee9014610921578063fe12afe914610934578063ffb23a561461094757600080fd5b8063e268255d146108b5578063e44b3875146108c8578063e48f6faf146108d0578063e94134d9146108e357600080fd5b8063d157f645116100ff578063d157f6451461084f578063d41ddc9614610862578063d82d842114610875578063d8d79700146108a5578063d8dfeb45146108ad57600080fd5b8063c762d5f7146107f1578063c8b8c43e14610821578063cc32d17614610834578063ccc044841461083c57600080fd5b8063b86a513e116101b3578063ba5d307811610182578063ba5d3078146107aa578063ba83276b146107b2578063bcead63e146107ba578063bdef476b146107cb578063c58d45a9146107de57600080fd5b8063b86a513e1461077f578063b96b5c9914610787578063b9b1f4e31461078f578063b9d842d11461079757600080fd5b8063aabaecd6116101fa578063aabaecd61461072d578063ab8355d41461073e578063acb522b414610751578063b69410de14610764578063b75941921461076c57600080fd5b80639931c34c146106f75780639c3c2ab11461070a578063a06db7dc1461071d578063a97d11611461072557600080fd5b80634b65a86d1161033157806375a20676116102b95780637df1f1b9116102885780637df1f1b9146106b05780637febd92b146106c157806387accaf1146106d45780638c6862bd146106e75780638ffc9215146106ef57600080fd5b806375a206761461068557806377b3c55c1461068d57806377e741c7146106955780637c3a00fd146106a857600080fd5b80635de1858c116103005780635de1858c146106315780635f84f302146106445780636174b2721461065757806369458ba71461066a57806370a10c891461067257600080fd5b80634b65a86d146105a057806350b903a9146105b35780635260781c146105e35780635bb47808146105f657600080fd5b8063390d6855116103b457806341fc71061161038357806341fc71061461050f57806342af07501461052257806346e368d41461053557806347350e9f146105655780634764757e1461058d57600080fd5b8063390d6855146104bc57806339ba9f86146104cf5780633fabc6b7146104f45780634003f34d1461050757600080fd5b806321c3cbc2116103fb57806321c3cbc214610467578063232fa7331461046f578063258d0e8a146104975780632ead1098146104ac57806330fea1ce146104b457600080fd5b80630895326f1461042d5780631cc1cf46146104445780631df5b4d21461044c5780631eb5ea2e1461045f575b600080fd5b6013545b6040519081526020015b60405180910390f35b600754610431565b61043161045a36600461242d565b61095a565b610431610971565b610431610980565b61047761098a565b60408051948552602085019390935291830152606082015260800161043b565b6104aa6104a53660046123a9565b601255565b005b600b54610431565b600954610431565b6104aa6104ca3660046123db565b6109a6565b6005546001600160a01b03165b6040516001600160a01b03909116815260200161043b565b6104aa6105023660046123a9565b601155565b601254610431565b6104aa61051d3660046123a9565b601555565b6104316105303660046122fb565b6109b4565b6104aa610543366004612206565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610578610573366004612206565b6109cb565b6040805192835260208301919091520161043b565b6104aa61059b3660046123a9565b601355565b6104aa6105ae366004612240565b6109e0565b6104aa6105c1366004612206565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6105786105f13660046124c6565b6109f4565b6104aa610604366004612206565b6001600160a01b03167f7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af155565b6104aa61063f3660046123a9565b600c55565b6104aa6106523660046123a9565b600855565b610431610665366004612206565b610a1b565b610477610a2c565b6104316106803660046122fb565b610a3a565b600c54610431565b600a54610431565b6104aa6106a33660046123a9565b601855565b600854610431565b6000546001600160a01b03166104dc565b6104aa6106cf3660046123a9565b600a55565b6104316106e23660046122fb565b610a48565b6104aa610a56565b600d54610431565b6104aa6107053660046123a9565b601755565b6104aa6107183660046123a9565b600b55565b600654610431565b601654610431565b6004546001600160a01b03166104dc565b6104aa61074c3660046123a9565b601655565b6104aa61075f3660046122fb565b610a60565b601754610431565b6104aa61077a3660046123a9565b600f55565b600e54610431565b610477610a6c565b600f54610431565b6104316107a536600461240b565b610a7a565b601454610431565b601554610431565b6001546001600160a01b03166104dc565b6104aa6107d93660046123a9565b601455565b6104316107ec36600461242d565b610a86565b6104aa6107ff366004612206565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61057861082f36600461248b565b610a93565b601854610431565b6104aa61084a3660046123db565b610ab2565b6104aa61085d3660046123a9565b600755565b6104aa6108703660046123db565b610abc565b6104aa610883366004612206565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610477610ac6565b601154610431565b6104316108c3366004612459565b610ad4565b601054610431565b6104316108de366004612206565b610ae2565b6104aa6108f13660046123a9565b600e55565b6108fe610aed565b604051901515815260200161043b565b6104aa61091c3660046123a9565b600655565b6104aa61092f3660046123a9565b601055565b6104aa6109423660046123a9565b600955565b6104aa6109553660046123a9565b600d55565b6000610967848484610af7565b90505b9392505050565b600061097b610b20565b905090565b600061097b610b56565b600080600080610998610b82565b935093509350935090919293565b6109b08282610c75565b5050565b60006109c285858585610ce8565b95945050505050565b6000806109d783610d21565b91509150915091565b6109ed8585858585610e96565b5050505050565b600080610a088b8b8b8b8b8b8b8b8b61102b565b915091505b995099975050505050505050565b6000610a268261107a565b92915050565b600080600080610998611154565b60006109c2858585856111bb565b60006109c2858585856114ba565b610a5e6114e2565b565b6109ed84848484611520565b60008060008061099861158e565b600061096a83836115d9565b60006109678484846115f4565b600080610aa38787878787611656565b915091505b9550959350505050565b6109b08282611748565b6109b0828261180f565b6000806000806109986118d6565b60006109c2858585856119cd565b6000610a2682611a06565b600061097b611b50565b6000670de0b6b3a7640000610b0c84846115d9565b610b16908661270d565b61096791906126eb565b600554600090610b38906001600160a01b031661107a565b905080600f6000828254610b4c91906126d3565b9250508190555090565b600454600090610b6e906001600160a01b031661107a565b90508060116000828254610b4c91906126d3565b600080600080601254421115610bd85760405162461bcd60e51b81526020600482015260166024820152754d4c493a434c3a5041594d454e545f49535f4c41544560501b60448201526064015b60405180910390fd5b610be0611154565b6000601681905593975091955093509150610bfb84866126d3565b905081610c0884836126d3565b610c1291906126d3565b600554610c27906001600160a01b031661107a565b600f54610c3491906126d3565b610c3e919061272c565b600f819055508060106000828254610c5691906126d3565b90915550610c6690508383611b70565b610c6e6114e2565b5090919293565b8160106000828254610c87919061272c565b9091555050600554610ca3906001600160a01b03168284611be2565b6109b05760405162461bcd60e51b81526020600482015260166024820152751353124e90d18e9514905394d1915497d1905253115160521b6044820152606401610bcf565b600084848484604051602001610d019493929190612599565b604051602081830303815290604052805190602001209050949350505050565b60125460009081908015801590610d435750600654610d4090826126d3565b42115b610d865760405162461bcd60e51b81526020600482015260146024820152731353124e948e9393d517d25397d111519055531560621b6044820152606401610bcf565b610d8e6114e2565b600060118190556010819055600f8190556004546001600160a01b031690610db58261107a565b9450841480610dca5750610dca818686611be2565b610e165760405162461bcd60e51b815260206004820152601760248201527f4d4c493a523a435f5452414e534645525f4641494c45440000000000000000006044820152606401610bcf565b6005546001600160a01b03166000610e2d8261107a565b9450841480610e425750610e42818786611be2565b610e8e5760405162461bcd60e51b815260206004820152601760248201527f4d4c493a523a465f5452414e534645525f4641494c45440000000000000000006044820152606401610bcf565b505050915091565b6020820151610ee75760405162461bcd60e51b815260206004820152601760248201527f4d4c493a493a494e56414c49445f5052494e434950414c0000000000000000006044820152606401610bcf565b602082015160408301511115610f3f5760405162461bcd60e51b815260206004820152601e60248201527f4d4c493a493a494e56414c49445f454e44494e475f5052494e434950414c00006044820152606401610bcf565b600080546001600160a01b0319166001600160a01b038716908117909155610fa25760405162461bcd60e51b815260206004820152601660248201527526a6249d249d24a72b20a624a22fa127a92927aba2a960511b6044820152606401610bcf565b8351600480546001600160a01b03199081166001600160a01b039384161790915560208087015160058054909316931692909217905583516006558381015160078190556040808601516013558451600c5584830151600d81905585820151600e55845160085592840151600955830151600a556060830151600b556109ed9190600080611c37565b60008061103b8888878c8a611656565b90925090506001861461104e5781611050565b875b91506110608b89878d8888611d95565b61106a90826126d3565b9050995099975050505050505050565b6005546000906001600160a01b038381169116146110995760006110a9565b600f546010546110a991906126d3565b6004546001600160a01b038481169116146110c55760006110c9565b6011545b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561110857600080fd5b505afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114091906123c2565b61114a919061272c565b610a26919061272c565b600080600080601654670de0b6b3a7640000600954601454965086611179919061270d565b61118391906126eb565b61118d91906126d3565b601354601754919450906111a290829061270d565b9250806018546111b2919061270d565b91505090919293565b60006111c985858585610ce8565b9050806015541461121c5760405162461bcd60e51b815260206004820152601b60248201527f4d4c493a414e543a434f4d4d49544d454e545f4d49534d4154434800000000006044820152606401610bcf565b6001600160a01b0385163b6112735760405162461bcd60e51b815260206004820152601a60248201527f4d4c493a414e543a494e56414c49445f524546494e414e4345520000000000006044820152606401610bcf565b834211156112c35760405162461bcd60e51b815260206004820152601a60248201527f4d4c493a414e543a455850495245445f434f4d4d49544d454e540000000000006044820152606401610bcf565b600060075490506000806112ec4284601454600e54600854601354601254600a54600b54611e3b565b91509150816016600082825461130291906126d3565b90915550506000601581905585905b818110156113e25760008a6001600160a01b031689898481811061133757611337612759565b9050602002810190611349919061264e565b60405161135792919061254e565b600060405180830381855af49150503d8060008114611392576040519150601f19603f3d011682016040523d82523d6000602084013e611397565b606091505b50509050806113d95760405162461bcd60e51b815260206004820152600e60248201526d1353124e9053950e91905253115160921b6044820152606401610bcf565b50600101611311565b506000601354856113f3919061270d565b83601754611401919061270d565b61140b91906126eb565b905060006013548661141d919061270d565b8460185461142b919061270d565b61143591906126eb565b60075490915061144581426126d3565b60125560145461145790828585611c37565b61145f611b50565b6114ab5760405162461bcd60e51b815260206004820152601f60248201527f4d4c493a414e543a494e53554646494349454e545f434f4c4c41544552414c006044820152606401610bcf565b50505050505050949350505050565b6000816114c85760006114d4565b6114d485858585610ce8565b601581905595945050505050565b60006006819055600781905560088190556009819055600a819055600b819055600e8190556012819055601381905560148190556017819055601855565b600061152e85858585610ce8565b905080601554146115815760405162461bcd60e51b815260206004820152601b60248201527f4d4c493a524e543a434f4d4d49544d454e545f4d49534d4154434800000000006044820152606401610bcf565b6000601555949350505050565b6000806000806115b542601254600754601454600e54601354600854600a54600b5461102b565b60165491955093506115c790846126d3565b92506017549150601854905090919293565b60006301e133806115ea838561270d565b61096a91906126eb565b6000600183166116045781611606565b835b90505b60019290921c91821561096a5781611621858061270d565b61162b91906126eb565b93506001831661163a57611609565b81611645858361270d565b61164f91906126eb565b9050611609565b600080600061166586866115d9565b9050600061168d61167e83670de0b6b3a76400006126d3565b86670de0b6b3a76400006115f4565b9050670de0b6b3a764000081116116c057846116a9898b61272c565b6116b391906126eb565b6000935093505050610aa8565b60006116d4670de0b6b3a76400008361272c565b838a670de0b6b3a76400006116e9868f61270d565b6116f391906126eb565b6116fd919061272c565b611707919061270d565b61171191906126eb565b905061171e8a8989610af7565b93508381101561172f576000611739565b611739848261272c565b94505050509550959350505050565b81600f600082825461175a919061272c565b9091555050600554611776906001600160a01b03168284611be2565b6117bb5760405162461bcd60e51b81526020600482015260166024820152751353124e91118e9514905394d1915497d1905253115160521b6044820152606401610bcf565b6117c3611b50565b6109b05760405162461bcd60e51b815260206004820152601e60248201527f4d4c493a44463a494e53554646494349454e545f434f4c4c41544552414c00006044820152606401610bcf565b8160116000828254611821919061272c565b909155505060045461183d906001600160a01b03168284611be2565b6118825760405162461bcd60e51b81526020600482015260166024820152751353124e9490ce9514905394d1915497d1905253115160521b6044820152606401610bcf565b61188a611b50565b6109b05760405162461bcd60e51b815260206004820152601e60248201527f4d4c493a52433a494e53554646494349454e545f434f4c4c41544552414c00006044820152606401610bcf565b6000806000806118e461158e565b60006016819055939750919550935091506118ff84866126d3565b90508161190c84836126d3565b61191691906126d3565b60055461192b906001600160a01b031661107a565b600f5461193891906126d3565b611942919061272c565b600f81905550806010600082825461195a91906126d3565b9091555061196a90508383611b70565b60135460018114156119835761197e6114e2565b6119c5565b6007546012600082825461199791906126d3565b9250508190555085601460008282546119b0919061272c565b909155506119c1905060018261272c565b6013555b505090919293565b6000838511156119fb57826119e2858761272c565b6119ec908461270d565b6119f691906126eb565b6109c2565b506000949350505050565b60006001600160a01b038216611a565760405162461bcd60e51b815260206004820152601560248201527426a6249d23261d24a72b20a624a22fa622a72222a960591b6044820152606401610bcf565b601354601254158015611a6857508015155b611aa95760405162461bcd60e51b81526020600482015260126024820152714d4c493a464c3a4c4f414e5f41435449564560701b6044820152606401610bcf565b600754600180546001600160a01b0319166001600160a01b038616179055611ad181426126d3565b601255600d5460148190556005549093506001600160a01b031683611af58261107a565b1015611b435760405162461bcd60e51b815260206004820152601860248201527f4d4c493a464c3a57524f4e475f46554e445f414d4f554e5400000000000000006044820152606401610bcf565b505050600f819055919050565b6000611b66601454600f54600d54600c546119cd565b6011541015905090565b600154611b8e906001600160a01b0316634046af2b60e01b84611ea9565b611baa578160106000828254611ba491906126d3565b90915550505b611bc3611bb5611fb8565b63a5a2760560e01b83611ea9565b6109b0578060106000828254611bd991906126d3565b90915550505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052600090610967908590612032565b6000611c41611fb8565b90508264496cebb80085836001600160a01b03166316a12d7a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc91906123c2565b611cc6908961270d565b611cd0919061270d565b611cda91906126eb565b611ce491906126d3565b6017819055508164496cebb80085836001600160a01b031663cc32d1766040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2b57600080fd5b505afa158015611d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6391906123c2565b611d6d908961270d565b611d77919061270d565b611d8191906126eb565b611d8b91906126d3565b6018555050505050565b6000838711611da657506000611e31565b6000620151806001611db8878b61272c565b611dc2919061272c565b611dcc91906126eb565b611dd79060016126d3565b611de4906201518061270d565b9050611dfa87611df485896126d3565b83610af7565b611e0490836126d3565b9150670de0b6b3a7640000611e19888661270d565b611e2391906126eb565b611e2d90836126d3565b9150505b9695505050505050565b60008084611e498b8d6126d3565b1015611e5a57506000905080610a0d565b611e648a8661272c565b611e6e908c61272c565b9050611e7d898989848a611656565b9250611e8f90508b8a89888888611d95565b611e9990836126d3565b9150995099975050505050505050565b600081611eb85750600161096a565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198716179052905160009182916001600160a01b03881691611efe9161255e565b6000604051808303816000865af19150503d8060008114611f3b576040519150601f19603f3d011682016040523d82523d6000602084013e611f40565b606091505b5091509150811580611f5457506020815114155b15611f645760009250505061096a565b600081806020019051810190611f7a9190612223565b90506001600160a01b038116611f96576000935050505061096a565b600554611fad906001600160a01b03168287611be2565b979650505050505050565b6000611fc26120da565b6001600160a01b0316633a60339a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ffa57600080fd5b505afa15801561200e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190612223565b60006001600160a01b0383163b61204b57506000610a26565b6060836001600160a01b031683604051612065919061255e565b6000604051808303816000865af19150503d80600081146120a2576040519150601f19603f3d011682016040523d82523d6000602084013e6120a7565b606091505b5090925090508180156120d25750805115806120d25750808060200190518101906120d29190612387565b949350505050565b60006121047f7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af15490565b919050565b600082601f83011261211a57600080fd5b6040516060810181811067ffffffffffffffff8211171561214b57634e487b7160e01b600052604160045260246000fd5b60405280836060810186101561216057600080fd5b60005b6003811015612182578135835260209283019290910190600101612163565b509195945050505050565b600082601f83011261219e57600080fd5b6040516080810181811067ffffffffffffffff821117156121cf57634e487b7160e01b600052604160045260246000fd5b6040528083608081018610156121e457600080fd5b60005b60048110156121825781358352602092830192909101906001016121e7565b60006020828403121561221857600080fd5b813561096a8161276f565b60006020828403121561223557600080fd5b815161096a8161276f565b60008060008060006101a0868803121561225957600080fd5b85356122648161276f565b94506020603f8701881361227757600080fd5b61227f61269c565b8082890160608a018b81111561229457600080fd5b60005b60028110156122bd5782356122ab8161276f565b85529385019391850191600101612297565b508298506122cb8c82612109565b975050505050506122df8760c08801612109565b91506122ef87610120880161218d565b90509295509295909350565b6000806000806060858703121561231157600080fd5b843561231c8161276f565b935060208501359250604085013567ffffffffffffffff8082111561234057600080fd5b818701915087601f83011261235457600080fd5b81358181111561236357600080fd5b8860208260051b850101111561237857600080fd5b95989497505060200194505050565b60006020828403121561239957600080fd5b8151801515811461096a57600080fd5b6000602082840312156123bb57600080fd5b5035919050565b6000602082840312156123d457600080fd5b5051919050565b600080604083850312156123ee57600080fd5b8235915060208301356124008161276f565b809150509250929050565b6000806040838503121561241e57600080fd5b50508035926020909101359150565b60008060006060848603121561244257600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561246f57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a086880312156124a357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060008060006101208a8c0312156124e557600080fd5b505087359960208901359950604089013598606081013598506080810135975060a0810135965060c0810135955060e08101359450610100013592509050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183823760009101908152919050565b6000825160005b8181101561257f5760208186018101518583015201612565565b8181111561258e576000828501525b509190910192915050565b6001600160a01b0385168152602080820185905260606040830181905282018390526000906080600585901b840181019190840186845b8781101561263f57868503607f190183528135368a9003601e190181126125f657600080fd5b8901803567ffffffffffffffff81111561260f57600080fd5b8036038b131561261e57600080fd5b61262b8782888501612525565b9650505091830191908301906001016125d0565b50929998505050505050505050565b6000808335601e1984360301811261266557600080fd5b83018035915067ffffffffffffffff82111561268057600080fd5b60200191503681900382131561269557600080fd5b9250929050565b6040805190810167ffffffffffffffff811182821017156126cd57634e487b7160e01b600052604160045260246000fd5b60405290565b600082198211156126e6576126e6612743565b500190565b60008261270857634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561272757612727612743565b500290565b60008282101561273e5761273e612743565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461278457600080fd5b5056fea26469706673582212208abdaa82dec3ac41eb2afe5e1426d93e21b83d062cc6e2030d3c0980c690cb1464736f6c63430008070033608060405234801561001057600080fd5b5061068b806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b163ff9711610066578063b163ff9714610104578063d157f64514610117578063e94134d91461012a578063f2f659601461013d578063fe12afe91461015057600080fd5b80634764757e146100a35780635de1858c146100b85780635f84f302146100cb5780637febd92b146100de5780639c3c2ab1146100f1575b600080fd5b6100b66100b13660046105de565b610163565b005b6100b66100c63660046105de565b6101e5565b6100b66100d93660046105de565b61021a565b6100b66100ec3660046105de565b61024f565b6100b66100ff3660046105de565b610284565b6100b66101123660046105de565b6102b9565b6100b66101253660046105de565b610397565b6100b66101383660046105de565b61040d565b6100b661014b3660046105de565b610494565b6100b661015e3660046105de565b6104c9565b806101a95760405162461bcd60e51b8152602060048201526011602482015270148e94d4148e96915493d7d05353d55395607a1b60448201526064015b60405180910390fd5b60138190556040518181527f35ea55dd4eee968798b5f61efffeb9d5f88b42c05aee6151a1bb4836c082ad21906020015b60405180910390a150565b600c8190556040518181527fd08f964ebebbb23438d7327a9e0b4d3a6977b689a76fbbc5e3ff6cf2bd57c296906020016101da565b60088190556040518181527f532f252238b3b0d2b8c8a257b087fb3fdbdc775e3e0acca8e680a2f36aafa34b906020016101da565b600a8190556040518181527f901c1ec58c5f0467430dc60e75d29fc21f09505b87ae0f9add2ca0aa75f172b5906020016101da565b600b8190556040518181527fa1367e43892cb30dbdf580f60f215aae22c2575ecd8bfef69d87c3671ad79a3b906020016101da565b60055481906102d0906001600160a01b03166104fe565b101561031e5760405162461bcd60e51b815260206004820152601860248201527f523a49503a494e53554646494349454e545f414d4f554e54000000000000000060448201526064016101a0565b80601460008282546103309190610610565b9250508190555080600d60008282546103499190610610565b9250508190555080600f60008282546103629190610610565b90915550506040518181527fc8fcde6244e516452771097a17ecb4c9e6331f498c228f1a951518aedefcb5ee906020016101da565b806103d85760405162461bcd60e51b8152602060048201526011602482015270148e94d4124e96915493d7d05353d55395607a1b60448201526064016101a0565b60078190556040518181527f262b925b6c3983fb29f10dd4493cd3accbbf1fceec18a61b59b2e663b795a37a906020016101da565b60145481111561045f5760405162461bcd60e51b815260206004820152601d60248201527f523a5345503a41424f56455f43555252454e545f5052494e434950414c00000060448201526064016101a0565b600e8190556040518181527fbef1806a01fbfd8f94363f8c74073ad697b31d9278da8c01247366e6c8aa1678906020016101da565b60068190556040518181527f376aafccbf0af4f25bc38eb52182d4604f044d0d87e4cb26e1667b50e3a1de05906020016101da565b60098190556040518181527f6c16b95dcb84ecf131270f4ff8500490839e14db1d5fb8d8a8c89da8551806f8906020016101da565b6005546000906001600160a01b0383811691161461051d57600061052d565b600f5460105461052d9190610610565b6004546001600160a01b0384811691161461054957600061054d565b6011545b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561058c57600080fd5b505afa1580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c491906105f7565b6105ce9190610628565b6105d89190610628565b92915050565b6000602082840312156105f057600080fd5b5035919050565b60006020828403121561060957600080fd5b5051919050565b600082198211156106235761062361063f565b500190565b60008282101561063a5761063a61063f565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207ec41d97fd74277290ee65f2b3a186dff3b38b0278f194726215bf68f29423f364736f6c63430008070033a26469706673582212202ca2762a68d984cd5e1d86ba2dfc45dda08522894b4db3f26e28048c3b549d0e64736f6c63430008070033" . parse () . expect ("invalid bytecode")
    });
    #[derive(Clone)]
    pub struct MapleLoanInternals_RejectNewTermsTests<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for MapleLoanInternals_RejectNewTermsTests<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug
        for MapleLoanInternals_RejectNewTermsTests<M>
    {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(MapleLoanInternals_RejectNewTermsTests))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> MapleLoanInternals_RejectNewTermsTests<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                MAPLELOANINTERNALS_REJECTNEWTERMSTESTS_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                MAPLELOANINTERNALS_REJECTNEWTERMSTESTS_ABI.clone(),
                MAPLELOANINTERNALS_REJECTNEWTERMSTESTS_BYTECODE
                    .clone()
                    .into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_rejectNewTerms_commitmentMismatch_emptyCallsArray` (0x9f2ab18f) function"]
        pub fn test_reject_new_terms_commitment_mismatch_empty_calls_array(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([159, 42, 177, 143], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_rejectNewTerms_commitmentMismatch_mismatchedCalls` (0xc50289ab) function"]
        pub fn test_reject_new_terms_commitment_mismatch_mismatched_calls(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([197, 2, 137, 171], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_rejectNewTerms_commitmentMismatch_mismatchedDeadline` (0xb12b2e1e) function"]
        pub fn test_reject_new_terms_commitment_mismatch_mismatched_deadline(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([177, 43, 46, 30], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_rejectNewTerms_commitmentMismatch_mismatchedRefinancer` (0xe499da61) function"]
        pub fn test_reject_new_terms_commitment_mismatch_mismatched_refinancer(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([228, 153, 218, 97], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_rejectNewTerms_success` (0xc2b63499) function"]
        pub fn test_reject_new_terms_success(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([194, 182, 52, 153], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(
            &self,
        ) -> ethers::contract::builders::Event<M, MapleLoanInternals_RejectNewTermsTestsEvents>
        {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for MapleLoanInternals_RejectNewTermsTests<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanInternals_RejectNewTermsTestsEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for MapleLoanInternals_RejectNewTermsTestsEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedAddressFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedBytesFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedBytes32Filter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedDecimalIntFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedDecimalUintFilter(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedIntFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedStringFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedUintFilter(decoded),
                );
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogUintFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(MapleLoanInternals_RejectNewTermsTestsEvents::LogsFilter(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for MapleLoanInternals_RejectNewTermsTestsEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MapleLoanInternals_RejectNewTermsTestsEvents::LogFilter(element) => element.fmt(f),
                MapleLoanInternals_RejectNewTermsTestsEvents::LogAddressFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogBytesFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogBytes32Filter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedAddressFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedBytesFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedBytes32Filter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedDecimalIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedDecimalUintFilter(
                    element,
                ) => element.fmt(f),
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedStringFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogNamedUintFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogStringFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogUintFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_RejectNewTermsTestsEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `test_rejectNewTerms_commitmentMismatch_emptyCallsArray`function with signature `test_rejectNewTerms_commitmentMismatch_emptyCallsArray()` and selector `[159, 42, 177, 143]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_rejectNewTerms_commitmentMismatch_emptyCallsArray",
        abi = "test_rejectNewTerms_commitmentMismatch_emptyCallsArray()"
    )]
    pub struct TestRejectNewTermsCommitmentMismatchEmptyCallsArrayCall;
    #[doc = "Container type for all input parameters for the `test_rejectNewTerms_commitmentMismatch_mismatchedCalls`function with signature `test_rejectNewTerms_commitmentMismatch_mismatchedCalls()` and selector `[197, 2, 137, 171]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_rejectNewTerms_commitmentMismatch_mismatchedCalls",
        abi = "test_rejectNewTerms_commitmentMismatch_mismatchedCalls()"
    )]
    pub struct TestRejectNewTermsCommitmentMismatchMismatchedCallsCall;
    #[doc = "Container type for all input parameters for the `test_rejectNewTerms_commitmentMismatch_mismatchedDeadline`function with signature `test_rejectNewTerms_commitmentMismatch_mismatchedDeadline()` and selector `[177, 43, 46, 30]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_rejectNewTerms_commitmentMismatch_mismatchedDeadline",
        abi = "test_rejectNewTerms_commitmentMismatch_mismatchedDeadline()"
    )]
    pub struct TestRejectNewTermsCommitmentMismatchMismatchedDeadlineCall;
    #[doc = "Container type for all input parameters for the `test_rejectNewTerms_commitmentMismatch_mismatchedRefinancer`function with signature `test_rejectNewTerms_commitmentMismatch_mismatchedRefinancer()` and selector `[228, 153, 218, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_rejectNewTerms_commitmentMismatch_mismatchedRefinancer",
        abi = "test_rejectNewTerms_commitmentMismatch_mismatchedRefinancer()"
    )]
    pub struct TestRejectNewTermsCommitmentMismatchMismatchedRefinancerCall;
    #[doc = "Container type for all input parameters for the `test_rejectNewTerms_success`function with signature `test_rejectNewTerms_success()` and selector `[194, 182, 52, 153]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_rejectNewTerms_success",
        abi = "test_rejectNewTerms_success()"
    )]
    pub struct TestRejectNewTermsSuccessCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanInternals_RejectNewTermsTestsCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestRejectNewTermsCommitmentMismatchEmptyCallsArray(
            TestRejectNewTermsCommitmentMismatchEmptyCallsArrayCall,
        ),
        TestRejectNewTermsCommitmentMismatchMismatchedCalls(
            TestRejectNewTermsCommitmentMismatchMismatchedCallsCall,
        ),
        TestRejectNewTermsCommitmentMismatchMismatchedDeadline(
            TestRejectNewTermsCommitmentMismatchMismatchedDeadlineCall,
        ),
        TestRejectNewTermsCommitmentMismatchMismatchedRefinancer(
            TestRejectNewTermsCommitmentMismatchMismatchedRefinancerCall,
        ),
        TestRejectNewTermsSuccess(TestRejectNewTermsSuccessCall),
    }
    impl ethers::core::abi::AbiDecode for MapleLoanInternals_RejectNewTermsTestsCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_RejectNewTermsTestsCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_RejectNewTermsTestsCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_RejectNewTermsTestsCalls::SetUp(decoded));
            }
            if let Ok (decoded) = < TestRejectNewTermsCommitmentMismatchEmptyCallsArrayCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchEmptyCallsArray (decoded)) }
            if let Ok (decoded) = < TestRejectNewTermsCommitmentMismatchMismatchedCallsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedCalls (decoded)) }
            if let Ok (decoded) = < TestRejectNewTermsCommitmentMismatchMismatchedDeadlineCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedDeadline (decoded)) }
            if let Ok (decoded) = < TestRejectNewTermsCommitmentMismatchMismatchedRefinancerCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedRefinancer (decoded)) }
            if let Ok(decoded) =
                <TestRejectNewTermsSuccessCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_RejectNewTermsTestsCalls::TestRejectNewTermsSuccess(decoded),
                );
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for MapleLoanInternals_RejectNewTermsTestsCalls {
        fn encode(self) -> Vec<u8> {
            match self { MapleLoanInternals_RejectNewTermsTestsCalls :: IsTest (element) => element . encode () , MapleLoanInternals_RejectNewTermsTestsCalls :: Failed (element) => element . encode () , MapleLoanInternals_RejectNewTermsTestsCalls :: SetUp (element) => element . encode () , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchEmptyCallsArray (element) => element . encode () , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedCalls (element) => element . encode () , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedDeadline (element) => element . encode () , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedRefinancer (element) => element . encode () , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsSuccess (element) => element . encode () }
        }
    }
    impl ::std::fmt::Display for MapleLoanInternals_RejectNewTermsTestsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self { MapleLoanInternals_RejectNewTermsTestsCalls :: IsTest (element) => element . fmt (f) , MapleLoanInternals_RejectNewTermsTestsCalls :: Failed (element) => element . fmt (f) , MapleLoanInternals_RejectNewTermsTestsCalls :: SetUp (element) => element . fmt (f) , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchEmptyCallsArray (element) => element . fmt (f) , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedCalls (element) => element . fmt (f) , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedDeadline (element) => element . fmt (f) , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedRefinancer (element) => element . fmt (f) , MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsSuccess (element) => element . fmt (f) }
        }
    }
    impl ::std::convert::From<IsTestCall> for MapleLoanInternals_RejectNewTermsTestsCalls {
        fn from(var: IsTestCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for MapleLoanInternals_RejectNewTermsTestsCalls {
        fn from(var: FailedCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for MapleLoanInternals_RejectNewTermsTestsCalls {
        fn from(var: SetUpCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestRejectNewTermsCommitmentMismatchEmptyCallsArrayCall>
        for MapleLoanInternals_RejectNewTermsTestsCalls
    {
        fn from(var: TestRejectNewTermsCommitmentMismatchEmptyCallsArrayCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchEmptyCallsArray (var)
        }
    }
    impl ::std::convert::From<TestRejectNewTermsCommitmentMismatchMismatchedCallsCall>
        for MapleLoanInternals_RejectNewTermsTestsCalls
    {
        fn from(var: TestRejectNewTermsCommitmentMismatchMismatchedCallsCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedCalls (var)
        }
    }
    impl ::std::convert::From<TestRejectNewTermsCommitmentMismatchMismatchedDeadlineCall>
        for MapleLoanInternals_RejectNewTermsTestsCalls
    {
        fn from(var: TestRejectNewTermsCommitmentMismatchMismatchedDeadlineCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedDeadline (var)
        }
    }
    impl ::std::convert::From<TestRejectNewTermsCommitmentMismatchMismatchedRefinancerCall>
        for MapleLoanInternals_RejectNewTermsTestsCalls
    {
        fn from(var: TestRejectNewTermsCommitmentMismatchMismatchedRefinancerCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls :: TestRejectNewTermsCommitmentMismatchMismatchedRefinancer (var)
        }
    }
    impl ::std::convert::From<TestRejectNewTermsSuccessCall>
        for MapleLoanInternals_RejectNewTermsTestsCalls
    {
        fn from(var: TestRejectNewTermsSuccessCall) -> Self {
            MapleLoanInternals_RejectNewTermsTestsCalls::TestRejectNewTermsSuccess(var)
        }
    }
}
