pub use mapleloaninternals_closeloantests_mod::*;
#[allow(clippy::too_many_arguments)]
mod mapleloaninternals_closeloantests_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "MapleLoanInternals_CloseLoanTests was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static MAPLELOANINTERNALS_CLOSELOANTESTS_ABI: ethers::contract::Lazy<
        ethers::core::abi::Abi,
    > = ethers::contract::Lazy::new(|| {
        serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"principalRequested_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"endingPrincipal_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"principalRequested_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"endingPrincipal_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_insufficientAmount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"principalRequested_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"endingPrincipal_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_latePayment\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"principalRequested_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"endingPrincipal_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withDrawableFunds\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"principalRequested_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"delegateFee_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"treasuryFee_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withFees\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withFeesButNoDelegateAtLender\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withFeesButNoTreasuryAtGlobals\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withFeesButZeroDelegate\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withFeesButZeroGlobals\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withFeesButZeroLender\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withFeesButZeroTreasury\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentInterval_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"paymentsRemaining_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"earlyFeeRate_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"principalRequested_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"refinanceInterest_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_closeLoan_withRefinanceInterest\",\"outputs\":[]}]") . expect ("invalid abi")
    });
    #[doc = r" Bytecode of the #name contract"]
    pub static MAPLELOANINTERNALS_CLOSELOANTESTS_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "" . parse () . expect ("invalid bytecode")
    });
    #[derive(Clone)]
    pub struct MapleLoanInternals_CloseLoanTests<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for MapleLoanInternals_CloseLoanTests<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for MapleLoanInternals_CloseLoanTests<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(MapleLoanInternals_CloseLoanTests))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> MapleLoanInternals_CloseLoanTests<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                MAPLELOANINTERNALS_CLOSELOANTESTS_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                MAPLELOANINTERNALS_CLOSELOANTESTS_ABI.clone(),
                MAPLELOANINTERNALS_CLOSELOANTESTS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan` (0x11621c7f) function"]
        pub fn test_close_loan(
            &self,
            payment_interval: ethers::core::types::U256,
            payments_remaining: ethers::core::types::U256,
            early_fee_rate: ethers::core::types::U256,
            principal_requested: ethers::core::types::U256,
            ending_principal: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [17, 98, 28, 127],
                    (
                        payment_interval,
                        payments_remaining,
                        early_fee_rate,
                        principal_requested,
                        ending_principal,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_insufficientAmount` (0x2045e764) function"]
        pub fn test_close_loan_insufficient_amount(
            &self,
            payment_interval: ethers::core::types::U256,
            payments_remaining: ethers::core::types::U256,
            early_fee_rate: ethers::core::types::U256,
            principal_requested: ethers::core::types::U256,
            ending_principal: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [32, 69, 231, 100],
                    (
                        payment_interval,
                        payments_remaining,
                        early_fee_rate,
                        principal_requested,
                        ending_principal,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_latePayment` (0x448553b6) function"]
        pub fn test_close_loan_late_payment(
            &self,
            payment_interval: ethers::core::types::U256,
            payments_remaining: ethers::core::types::U256,
            early_fee_rate: ethers::core::types::U256,
            principal_requested: ethers::core::types::U256,
            ending_principal: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [68, 133, 83, 182],
                    (
                        payment_interval,
                        payments_remaining,
                        early_fee_rate,
                        principal_requested,
                        ending_principal,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withDrawableFunds` (0x9c0031dd) function"]
        pub fn test_close_loan_with_drawable_funds(
            &self,
            payment_interval: ethers::core::types::U256,
            payments_remaining: ethers::core::types::U256,
            early_fee_rate: ethers::core::types::U256,
            principal_requested: ethers::core::types::U256,
            ending_principal: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [156, 0, 49, 221],
                    (
                        payment_interval,
                        payments_remaining,
                        early_fee_rate,
                        principal_requested,
                        ending_principal,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withFees` (0x12f1b72a) function"]
        pub fn test_close_loan_with_fees(
            &self,
            payment_interval: ethers::core::types::U256,
            payments_remaining: ethers::core::types::U256,
            early_fee_rate: ethers::core::types::U256,
            principal_requested: ethers::core::types::U256,
            delegate_fee: ethers::core::types::U256,
            treasury_fee: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [18, 241, 183, 42],
                    (
                        payment_interval,
                        payments_remaining,
                        early_fee_rate,
                        principal_requested,
                        delegate_fee,
                        treasury_fee,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withFeesButNoDelegateAtLender` (0x4a67eb41) function"]
        pub fn test_close_loan_with_fees_but_no_delegate_at_lender(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([74, 103, 235, 65], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withFeesButNoTreasuryAtGlobals` (0x5a9b9d96) function"]
        pub fn test_close_loan_with_fees_but_no_treasury_at_globals(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([90, 155, 157, 150], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withFeesButZeroDelegate` (0xb0a670e8) function"]
        pub fn test_close_loan_with_fees_but_zero_delegate(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([176, 166, 112, 232], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withFeesButZeroGlobals` (0xc715fcbb) function"]
        pub fn test_close_loan_with_fees_but_zero_globals(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([199, 21, 252, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withFeesButZeroLender` (0xd6ee2398) function"]
        pub fn test_close_loan_with_fees_but_zero_lender(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([214, 238, 35, 152], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withFeesButZeroTreasury` (0x874f5d9d) function"]
        pub fn test_close_loan_with_fees_but_zero_treasury(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([135, 79, 93, 157], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_closeLoan_withRefinanceInterest` (0xf060b77f) function"]
        pub fn test_close_loan_with_refinance_interest(
            &self,
            payment_interval: ethers::core::types::U256,
            payments_remaining: ethers::core::types::U256,
            early_fee_rate: ethers::core::types::U256,
            principal_requested: ethers::core::types::U256,
            refinance_interest: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [240, 96, 183, 127],
                    (
                        payment_interval,
                        payments_remaining,
                        early_fee_rate,
                        principal_requested,
                        refinance_interest,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(
            &self,
        ) -> ethers::contract::builders::Event<M, MapleLoanInternals_CloseLoanTestsEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for MapleLoanInternals_CloseLoanTests<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanInternals_CloseLoanTestsEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for MapleLoanInternals_CloseLoanTestsEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogAddressFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogBytesFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogBytes32Filter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsEvents::LogNamedDecimalIntFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsEvents::LogNamedDecimalUintFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogNamedIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogNamedUintFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogStringFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogUintFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(MapleLoanInternals_CloseLoanTestsEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for MapleLoanInternals_CloseLoanTestsEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MapleLoanInternals_CloseLoanTestsEvents::LogFilter(element) => element.fmt(f),
                MapleLoanInternals_CloseLoanTestsEvents::LogAddressFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogBytesFilter(element) => element.fmt(f),
                MapleLoanInternals_CloseLoanTestsEvents::LogBytes32Filter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogIntFilter(element) => element.fmt(f),
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedAddressFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedBytesFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedBytes32Filter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedDecimalIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedDecimalUintFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedStringFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogNamedUintFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_CloseLoanTestsEvents::LogStringFilter(element) => element.fmt(f),
                MapleLoanInternals_CloseLoanTestsEvents::LogUintFilter(element) => element.fmt(f),
                MapleLoanInternals_CloseLoanTestsEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan`function with signature `test_closeLoan(uint256,uint256,uint256,uint256,uint256)` and selector `[17, 98, 28, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan",
        abi = "test_closeLoan(uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct TestCloseLoanCall {
        pub payment_interval: ethers::core::types::U256,
        pub payments_remaining: ethers::core::types::U256,
        pub early_fee_rate: ethers::core::types::U256,
        pub principal_requested: ethers::core::types::U256,
        pub ending_principal: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `test_closeLoan_insufficientAmount`function with signature `test_closeLoan_insufficientAmount(uint256,uint256,uint256,uint256,uint256)` and selector `[32, 69, 231, 100]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_insufficientAmount",
        abi = "test_closeLoan_insufficientAmount(uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct TestCloseLoanInsufficientAmountCall {
        pub payment_interval: ethers::core::types::U256,
        pub payments_remaining: ethers::core::types::U256,
        pub early_fee_rate: ethers::core::types::U256,
        pub principal_requested: ethers::core::types::U256,
        pub ending_principal: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `test_closeLoan_latePayment`function with signature `test_closeLoan_latePayment(uint256,uint256,uint256,uint256,uint256)` and selector `[68, 133, 83, 182]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_latePayment",
        abi = "test_closeLoan_latePayment(uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct TestCloseLoanLatePaymentCall {
        pub payment_interval: ethers::core::types::U256,
        pub payments_remaining: ethers::core::types::U256,
        pub early_fee_rate: ethers::core::types::U256,
        pub principal_requested: ethers::core::types::U256,
        pub ending_principal: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `test_closeLoan_withDrawableFunds`function with signature `test_closeLoan_withDrawableFunds(uint256,uint256,uint256,uint256,uint256)` and selector `[156, 0, 49, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withDrawableFunds",
        abi = "test_closeLoan_withDrawableFunds(uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct TestCloseLoanWithDrawableFundsCall {
        pub payment_interval: ethers::core::types::U256,
        pub payments_remaining: ethers::core::types::U256,
        pub early_fee_rate: ethers::core::types::U256,
        pub principal_requested: ethers::core::types::U256,
        pub ending_principal: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `test_closeLoan_withFees`function with signature `test_closeLoan_withFees(uint256,uint256,uint256,uint256,uint256,uint256)` and selector `[18, 241, 183, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withFees",
        abi = "test_closeLoan_withFees(uint256,uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct TestCloseLoanWithFeesCall {
        pub payment_interval: ethers::core::types::U256,
        pub payments_remaining: ethers::core::types::U256,
        pub early_fee_rate: ethers::core::types::U256,
        pub principal_requested: ethers::core::types::U256,
        pub delegate_fee: ethers::core::types::U256,
        pub treasury_fee: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `test_closeLoan_withFeesButNoDelegateAtLender`function with signature `test_closeLoan_withFeesButNoDelegateAtLender()` and selector `[74, 103, 235, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withFeesButNoDelegateAtLender",
        abi = "test_closeLoan_withFeesButNoDelegateAtLender()"
    )]
    pub struct TestCloseLoanWithFeesButNoDelegateAtLenderCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_withFeesButNoTreasuryAtGlobals`function with signature `test_closeLoan_withFeesButNoTreasuryAtGlobals()` and selector `[90, 155, 157, 150]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withFeesButNoTreasuryAtGlobals",
        abi = "test_closeLoan_withFeesButNoTreasuryAtGlobals()"
    )]
    pub struct TestCloseLoanWithFeesButNoTreasuryAtGlobalsCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_withFeesButZeroDelegate`function with signature `test_closeLoan_withFeesButZeroDelegate()` and selector `[176, 166, 112, 232]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withFeesButZeroDelegate",
        abi = "test_closeLoan_withFeesButZeroDelegate()"
    )]
    pub struct TestCloseLoanWithFeesButZeroDelegateCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_withFeesButZeroGlobals`function with signature `test_closeLoan_withFeesButZeroGlobals()` and selector `[199, 21, 252, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withFeesButZeroGlobals",
        abi = "test_closeLoan_withFeesButZeroGlobals()"
    )]
    pub struct TestCloseLoanWithFeesButZeroGlobalsCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_withFeesButZeroLender`function with signature `test_closeLoan_withFeesButZeroLender()` and selector `[214, 238, 35, 152]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withFeesButZeroLender",
        abi = "test_closeLoan_withFeesButZeroLender()"
    )]
    pub struct TestCloseLoanWithFeesButZeroLenderCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_withFeesButZeroTreasury`function with signature `test_closeLoan_withFeesButZeroTreasury()` and selector `[135, 79, 93, 157]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withFeesButZeroTreasury",
        abi = "test_closeLoan_withFeesButZeroTreasury()"
    )]
    pub struct TestCloseLoanWithFeesButZeroTreasuryCall;
    #[doc = "Container type for all input parameters for the `test_closeLoan_withRefinanceInterest`function with signature `test_closeLoan_withRefinanceInterest(uint256,uint256,uint256,uint256,uint256)` and selector `[240, 96, 183, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_closeLoan_withRefinanceInterest",
        abi = "test_closeLoan_withRefinanceInterest(uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct TestCloseLoanWithRefinanceInterestCall {
        pub payment_interval: ethers::core::types::U256,
        pub payments_remaining: ethers::core::types::U256,
        pub early_fee_rate: ethers::core::types::U256,
        pub principal_requested: ethers::core::types::U256,
        pub refinance_interest: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanInternals_CloseLoanTestsCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestCloseLoan(TestCloseLoanCall),
        TestCloseLoanInsufficientAmount(TestCloseLoanInsufficientAmountCall),
        TestCloseLoanLatePayment(TestCloseLoanLatePaymentCall),
        TestCloseLoanWithDrawableFunds(TestCloseLoanWithDrawableFundsCall),
        TestCloseLoanWithFees(TestCloseLoanWithFeesCall),
        TestCloseLoanWithFeesButNoDelegateAtLender(TestCloseLoanWithFeesButNoDelegateAtLenderCall),
        TestCloseLoanWithFeesButNoTreasuryAtGlobals(
            TestCloseLoanWithFeesButNoTreasuryAtGlobalsCall,
        ),
        TestCloseLoanWithFeesButZeroDelegate(TestCloseLoanWithFeesButZeroDelegateCall),
        TestCloseLoanWithFeesButZeroGlobals(TestCloseLoanWithFeesButZeroGlobalsCall),
        TestCloseLoanWithFeesButZeroLender(TestCloseLoanWithFeesButZeroLenderCall),
        TestCloseLoanWithFeesButZeroTreasury(TestCloseLoanWithFeesButZeroTreasuryCall),
        TestCloseLoanWithRefinanceInterest(TestCloseLoanWithRefinanceInterestCall),
    }
    impl ethers::core::abi::AbiDecode for MapleLoanInternals_CloseLoanTestsCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_CloseLoanTestsCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_CloseLoanTestsCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_CloseLoanTestsCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestCloseLoanCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoan(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCloseLoanInsufficientAmountCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanInsufficientAmount(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) =
                <TestCloseLoanLatePaymentCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanLatePayment(decoded),
                );
            }
            if let Ok(decoded) =
                <TestCloseLoanWithDrawableFundsCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithDrawableFunds(decoded),
                );
            }
            if let Ok(decoded) =
                <TestCloseLoanWithFeesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFees(decoded));
            }
            if let Ok (decoded) = < TestCloseLoanWithFeesButNoDelegateAtLenderCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButNoDelegateAtLender (decoded)) }
            if let Ok (decoded) = < TestCloseLoanWithFeesButNoTreasuryAtGlobalsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButNoTreasuryAtGlobals (decoded)) }
            if let Ok(decoded) =
                <TestCloseLoanWithFeesButZeroDelegateCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroDelegate(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) =
                <TestCloseLoanWithFeesButZeroGlobalsCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroGlobals(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) =
                <TestCloseLoanWithFeesButZeroLenderCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroLender(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) =
                <TestCloseLoanWithFeesButZeroTreasuryCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroTreasury(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) =
                <TestCloseLoanWithRefinanceInterestCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithRefinanceInterest(
                        decoded,
                    ),
                );
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for MapleLoanInternals_CloseLoanTestsCalls {
        fn encode(self) -> Vec<u8> {
            match self { MapleLoanInternals_CloseLoanTestsCalls :: IsTest (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: Failed (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: SetUp (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoan (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanInsufficientAmount (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanLatePayment (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithDrawableFunds (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFees (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButNoDelegateAtLender (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButNoTreasuryAtGlobals (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroDelegate (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroGlobals (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroLender (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroTreasury (element) => element . encode () , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithRefinanceInterest (element) => element . encode () }
        }
    }
    impl ::std::fmt::Display for MapleLoanInternals_CloseLoanTestsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self { MapleLoanInternals_CloseLoanTestsCalls :: IsTest (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: Failed (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: SetUp (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoan (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanInsufficientAmount (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanLatePayment (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithDrawableFunds (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFees (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButNoDelegateAtLender (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButNoTreasuryAtGlobals (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroDelegate (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroGlobals (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroLender (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithFeesButZeroTreasury (element) => element . fmt (f) , MapleLoanInternals_CloseLoanTestsCalls :: TestCloseLoanWithRefinanceInterest (element) => element . fmt (f) }
        }
    }
    impl ::std::convert::From<IsTestCall> for MapleLoanInternals_CloseLoanTestsCalls {
        fn from(var: IsTestCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for MapleLoanInternals_CloseLoanTestsCalls {
        fn from(var: FailedCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for MapleLoanInternals_CloseLoanTestsCalls {
        fn from(var: SetUpCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanCall> for MapleLoanInternals_CloseLoanTestsCalls {
        fn from(var: TestCloseLoanCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoan(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanInsufficientAmountCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanInsufficientAmountCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanInsufficientAmount(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanLatePaymentCall> for MapleLoanInternals_CloseLoanTestsCalls {
        fn from(var: TestCloseLoanLatePaymentCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanLatePayment(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithDrawableFundsCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithDrawableFundsCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithDrawableFunds(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithFeesCall> for MapleLoanInternals_CloseLoanTestsCalls {
        fn from(var: TestCloseLoanWithFeesCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFees(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithFeesButNoDelegateAtLenderCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithFeesButNoDelegateAtLenderCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButNoDelegateAtLender(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithFeesButNoTreasuryAtGlobalsCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithFeesButNoTreasuryAtGlobalsCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButNoTreasuryAtGlobals(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithFeesButZeroDelegateCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithFeesButZeroDelegateCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroDelegate(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithFeesButZeroGlobalsCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithFeesButZeroGlobalsCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroGlobals(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithFeesButZeroLenderCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithFeesButZeroLenderCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroLender(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithFeesButZeroTreasuryCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithFeesButZeroTreasuryCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithFeesButZeroTreasury(var)
        }
    }
    impl ::std::convert::From<TestCloseLoanWithRefinanceInterestCall>
        for MapleLoanInternals_CloseLoanTestsCalls
    {
        fn from(var: TestCloseLoanWithRefinanceInterestCall) -> Self {
            MapleLoanInternals_CloseLoanTestsCalls::TestCloseLoanWithRefinanceInterest(var)
        }
    }
}
