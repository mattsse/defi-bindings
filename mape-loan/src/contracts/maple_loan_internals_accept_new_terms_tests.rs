pub use mapleloaninternals_acceptnewtermstests_mod::*;
#[allow(clippy::too_many_arguments)]
mod mapleloaninternals_acceptnewtermstests_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "MapleLoanInternals_AcceptNewTermsTests was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static MAPLELOANINTERNALS_ACCEPTNEWTERMSTESTS_ABI: ethers::contract::Lazy<
        ethers::core::abi::Abi,
    > = ethers::contract::Lazy::new(|| {
        serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_afterDeadline\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_callFailed\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_commitmentMismatch_emptyCallsArray\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_commitmentMismatch_mismatchedCalls\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_commitmentMismatch_mismatchedDeadline\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_commitmentMismatch_mismatchedRefinancer\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"delegateFee_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"treasuryFee_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"globalInvestorFee_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"globalTreasuryFee_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_fuzzEstablishmentFees\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_insufficientCollateral\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"test_acceptNewTerms_invalidRefinancer\",\"outputs\":[]}]") . expect ("invalid abi")
    });
    #[doc = r" Bytecode of the #name contract"]
    pub static MAPLELOANINTERNALS_ACCEPTNEWTERMSTESTS_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "0x60806040526000805461ff01600160b01b031916757109709ecfa91a80626ff3989d68f67f5b1dd12d000117905534801561003957600080fd5b50618fe6806100496000396000f3fe60806040523480156200001157600080fd5b5060043610620000e05760003560e01c806394a038ef1162000097578063ba414fa6116200006e578063ba414fa6146200014e578063e18e34e91462000175578063f52c64a4146200017f578063fa7626d4146200018957600080fd5b806394a038ef14620001235780639aa8b43a146200013a578063b07935e1146200014457600080fd5b80630a9254e414620000e55780631992e79a14620000f157806334234e9214620000fb5780633e941839146200010557806353e2db10146200010f5780638757d3961462000119575b600080fd5b620000ef62000197565b005b620000ef620008fe565b620000ef62000c7f565b620000ef62000e7c565b620000ef6200138a565b620000ef62001785565b620000ef62000134366004620033a5565b62001b02565b620000ef620022b2565b620000ef62002490565b6000546200016190610100900460ff1681565b604051901515815260200160405180910390f35b620000ef6200280e565b620000ef62002af2565b600054620001619060ff1681565b604051620001a5906200323d565b604051809103906000f080158015620001c2573d6000803e3d6000fd5b50601560006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060166107d06103e860405162000201906200324b565b6001600160a01b03948516815293909216602084015260408301526060820152608001604051809103906000f08015801562000241573d6000803e3d6000fd5b50601180546001600160a01b0319166001600160a01b0392909216919091179055604051620002709062003259565b604051809103906000f0801580156200028d573d6000803e3d6000fd5b50600f80546001600160a01b0319166001600160a01b0392909216919091179055604051620002bc9062003267565b604051809103906000f080158015620002d9573d6000803e3d6000fd5b50601080546001600160a01b0319166001600160a01b0392909216919091179055604051620003089062003275565b604051809103906000f08015801562000325573d6000803e3d6000fd5b50601280546001600160a01b0319166001600160a01b0392909216919091179055604051600090620003579062003283565b6060808252600690820152650546f6b656e360d41b608082015260a06020820181905260029082015261054360f41b60c082015260ff909116604082015260e001604051809103906000f080158015620003b5573d6000803e3d6000fd5b50601380546001600160a01b0319166001600160a01b0392909216919091179055604051600090620003e79062003283565b606080825260069082015265546f6b656e3160d01b608082015260a06020820181905260029082015261543160f01b60c082015260ff909116604082015260e001604051809103906000f08015801562000445573d6000803e3d6000fd5b50601480546001600160a01b039283166001600160a01b031991821681179092556001805490911681179055604080518082019091526013549092168252602082015262000497906002908162003291565b5060405180606001604052806001815260200162278d008152602001600c8152506004906003620004ca929190620032ee565b5060405180606001604052806101f481526020016103e8815260200160008152506007906003620004fd929190620032ee565b50604051806080016040528067016345785d8a0000815260200160078152602001600881526020016009815250600a9060046200053c9291906200331f565b506013546010546007546040516340c10f1960e01b81526001600160a01b03928316600482015260248101919091529116906340c10f1990604401600060405180830381600087803b1580156200059257600080fd5b505af1158015620005a7573d6000803e3d6000fd5b5050601554601154604051636617051360e11b81526001600160a01b0391821660048201529116925063cc2e0a269150602401600060405180830381600087803b158015620005f557600080fd5b505af11580156200060a573d6000803e3d6000fd5b50506000546359682f00600e8190556040516372eb5f8160e11b81526004810191909152620100009091046001600160a01b0316925063e5d6bf029150602401600060405180830381600087803b1580156200066557600080fd5b505af11580156200067a573d6000803e3d6000fd5b5050601054601554604051630b768f0160e31b81526001600160a01b03918216600482015291169250635bb478089150602401600060405180830381600087803b158015620006c857600080fd5b505af1158015620006dd573d6000803e3d6000fd5b5050601054600154604051634b65a86d60e01b81526001600160a01b039283169450634b65a86d9350620007239290911690600290600490600790600a90830162003406565b600060405180830381600087803b1580156200073e57600080fd5b505af115801562000753573d6000803e3d6000fd5b5050601054600f546040516311b8da3560e21b81526001600160a01b039182166004820152911692506346e368d49150602401600060405180830381600087803b158015620007a157600080fd5b505af1158015620007b6573d6000803e3d6000fd5b505060105460085460405163bdef476b60e01b815260048101919091526001600160a01b03909116925063bdef476b9150602401600060405180830381600087803b1580156200080557600080fd5b505af11580156200081a573d6000803e3d6000fd5b5050601054600754604051633fabc6b760e01b815260048101919091526001600160a01b039091169250633fabc6b79150602401600060405180830381600087803b1580156200086957600080fd5b505af11580156200087e573d6000803e3d6000fd5b5050601054600e546001600160a01b03909116925063258d0e8a9150620008a9906220f580620035ee565b6040518263ffffffff1660e01b8152600401620008c891815260200190565b600060405180830381600087803b158015620008e357600080fd5b505af1158015620008f8573d6000803e3d6000fd5b50505050565b60006200090f42620d2f00620035ee565b6040805160018082528183019092529192506000918291816020015b60608152602001906001900390816200092b575050600a54909150620009549060019062003642565b6040516024016200096791815260200190565b60408051601f198184030181529190526020810180516001600160e01b0316632fc2798160e11b17905281518290600090620009a757620009a7620036d7565b60209081029190910101526010546040516387accaf160e01b81526001600160a01b03909116906387accaf190620009e8908590879086906004016200349c565b602060405180830381600087803b15801562000a0357600080fd5b505af115801562000a18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a3e919062003366565b5060005460405163f28dceb360e01b815260206004820152601a60248201527f4d4c493a414e543a494e56414c49445f524546494e414e4345520000000000006044820152620100009091046001600160a01b03169063f28dceb390606401600060405180830381600087803b15801562000ab857600080fd5b505af115801562000acd573d6000803e3d6000fd5b50506010546040516370a10c8960e01b81526001600160a01b0390911692506370a10c89915062000b07908590879086906004016200349c565b602060405180830381600087803b15801562000b2257600080fd5b505af115801562000b37573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b5d919062003366565b506010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf19262000b9892911690879086906004016200349c565b602060405180830381600087803b15801562000bb357600080fd5b505af115801562000bc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bee919062003366565b506010546012546040516370a10c8960e01b81526001600160a01b03928316926370a10c899262000c2992911690879086906004016200349c565b602060405180830381600087803b15801562000c4457600080fd5b505af115801562000c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008f8919062003366565b600062000c9042620d2f00620035ee565b9050600060405162000ca29062003275565b604051809103906000f08015801562000cbf573d6000803e3d6000fd5b5060408051600180825281830190925291925060009190816020015b606081526020019060019003908162000cdb57905050604051607b602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b1790528151829060009062000d415762000d41620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf19262000d8692911690879086906004016200349c565b602060405180830381600087803b15801562000da157600080fd5b505af115801562000db6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ddc919062003366565b5060005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb39062000e129060040162003553565b600060405180830381600087803b15801562000e2d57600080fd5b505af115801562000e42573d6000803e3d6000fd5b50506010546040516370a10c8960e01b81526001600160a01b0390911692506370a10c89915062000b98908590879086906004016200349c565b600062000e8d42620d2f00620035ee565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908162000ea8579050506040516000602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b1790528151829060009062000f0e5762000f0e620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf19262000f5392911690869086906004016200349c565b602060405180830381600087803b15801562000f6e57600080fd5b505af115801562000f83573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fa9919062003366565b506010546012546040516370a10c8960e01b81526001600160a01b03928316926370a10c899262000fe492911690869086906004016200349c565b602060405180830381600087803b15801562000fff57600080fd5b505af115801562001014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200103a919062003366565b506010546040805163ba83276b60e01b81529051620010c6926001600160a01b03169163ba83276b916004808301926020929190829003018186803b1580156200108357600080fd5b505afa15801562001098573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010be919062003366565b600062002f06565b6010546040805163a97d116160e01b8152905162001151926001600160a01b03169163a97d1161916004808301926020929190829003018186803b1580156200110e57600080fd5b505afa15801562001123573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001149919062003366565b60016200300b565b60105460408051635b4a086f60e11b81529051620011dc926001600160a01b03169163b69410de916004808301926020929190829003018186803b1580156200119957600080fd5b505afa158015620011ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011d4919062003366565b60106200300b565b6010546040805163661968bb60e11b8152905162001267926001600160a01b03169163cc32d176916004808301926020929190829003018186803b1580156200122457600080fd5b505afa15801562001239573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200125f919062003366565b60086200300b565b60105460408051634003f34d60e01b8152905162001386926001600160a01b031691634003f34d916004808301926020929190829003018186803b158015620012af57600080fd5b505afa158015620012c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ea919062003366565b601060009054906101000a90046001600160a01b03166001600160a01b0316631cc1cf466040518163ffffffff1660e01b815260040160206040518083038186803b1580156200133957600080fd5b505afa1580156200134e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001374919062003366565b620013809042620035ee565b6200300b565b5050565b60006200139b42620d2f00620035ee565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081620013b6575050600854909150600090620013e1906001620035ee565b905080604051602401620013f791815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663e94134d960e01b17905282518390600090620014375762001437620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf1926200147c92911690879087906004016200349c565b602060405180830381600087803b1580156200149757600080fd5b505af1158015620014ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d2919062003366565b5060005460405163f28dceb360e01b815260206004820152600e60248201526d1353124e9053950e91905253115160921b6044820152620100009091046001600160a01b03169063f28dceb390606401600060405180830381600087803b1580156200153d57600080fd5b505af115801562001552573d6000803e3d6000fd5b50506010546012546040516370a10c8960e01b81526001600160a01b0392831694506370a10c899350620015919290911690879087906004016200349c565b602060405180830381600087803b158015620015ac57600080fd5b505af1158015620015c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015e7919062003366565b50600854600090620015fc9060029062003609565b9050806040516024016200161291815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663e94134d960e01b17905283518490600090620016525762001652620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf1926200169792911690889088906004016200349c565b602060405180830381600087803b158015620016b257600080fd5b505af1158015620016c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016ed919062003366565b506010546012546040516370a10c8960e01b81526001600160a01b03928316926370a10c89926200172892911690889088906004016200349c565b602060405180830381600087803b1580156200174357600080fd5b505af115801562001758573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200177e919062003366565b5050505050565b60006200179642620d2f00620035ee565b604080516000808252602082019092529192509081620017c7565b6060815260200190600190039081620017b15790505b506010546012546040516387accaf160e01b81529293506001600160a01b03918216926387accaf19262001804921690869086906004016200349c565b602060405180830381600087803b1580156200181f57600080fd5b505af115801562001834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200185a919062003366565b5060005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb390620018909060040162003553565b600060405180830381600087803b158015620018ab57600080fd5b505af1158015620018c0573d6000803e3d6000fd5b50506010546012546040516370a10c8960e01b81526001600160a01b0392831694506370a10c899350620018ff9290911690869086906004016200349c565b602060405180830381600087803b1580156200191a57600080fd5b505af11580156200192f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001955919062003366565b5060408051600180825281830190925290816020015b60608152602001906001900390816200196b57905050604051607b602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b17905281518290600090620019d157620019d1620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf19262001a1692911690869086906004016200349c565b602060405180830381600087803b15801562001a3157600080fd5b505af115801562001a46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a6c919062003366565b506010546012546040516370a10c8960e01b81526001600160a01b03928316926370a10c899262001aa792911690869086906004016200349c565b602060405180830381600087803b15801562001ac257600080fd5b505af115801562001ad7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001afd919062003366565b505050565b62001b1d8460016c01431e0fae6d7217caa0000000620030f0565b945062001b3984600062001b3360648962003609565b620030f0565b935062001b4f83600062001b3360648962003609565b925062001b61826001612710620030f0565b915062001b73816001612710620030f0565b60105460405163bdef476b60e01b8152600481018890529192506001600160a01b03169063bdef476b90602401600060405180830381600087803b15801562001bbb57600080fd5b505af115801562001bd0573d6000803e3d6000fd5b505060105460405163264c70d360e21b8152600481018890526001600160a01b039091169250639931c34c9150602401600060405180830381600087803b15801562001c1b57600080fd5b505af115801562001c30573d6000803e3d6000fd5b50506010546040516377e741c760e01b8152600481018790526001600160a01b0390911692506377e741c79150602401600060405180830381600087803b15801562001c7b57600080fd5b505af115801562001c90573d6000803e3d6000fd5b5050601154604051635e04546760e01b8152600481018690526001600160a01b039091169250635e0454679150602401600060405180830381600087803b15801562001cdb57600080fd5b505af115801562001cf0573d6000803e3d6000fd5b50506011546040516377e741c760e01b8152600481018590526001600160a01b0390911692506377e741c79150602401600060405180830381600087803b15801562001d3b57600080fd5b505af115801562001d50573d6000803e3d6000fd5b50505050600042620d2f0062001d679190620035ee565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908162001d82579050506040516000602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b1790528151829060009062001de85762001de8620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf19262001e2d92911690869086906004016200349c565b602060405180830381600087803b15801562001e4857600080fd5b505af115801562001e5d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e83919062003366565b5060105460405163645c621f60e11b81526004810189905260006024820181905267016345785d8a00006044830152620697806064830152600c6084830152916001600160a01b03169063c8b8c43e9060a401604080518083038186803b15801562001eee57600080fd5b505afa15801562001f03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f29919062003380565b9150600090506301da9c0062001f43896206978062003620565b62001f4f919062003609565b64496cebb80062001f61888c62003620565b62001f709062278d0062003620565b62001f7c919062003609565b62001f889190620035ee565b905060006301da9c0062001fa0896206978062003620565b62001fac919062003609565b64496cebb80062001fbe888d62003620565b62001fcd9062278d0062003620565b62001fd9919062003609565b62001fe59190620035ee565b6010546012546040516370a10c8960e01b81529293506001600160a01b03918216926370a10c899262002021921690899089906004016200349c565b602060405180830381600087803b1580156200203c57600080fd5b505af115801562002051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002077919062003366565b506010546040805163ba83276b60e01b81529051620020c0926001600160a01b03169163ba83276b916004808301926020929190829003018186803b1580156200108357600080fd5b6010546040805163a97d116160e01b815290516200214a926001600160a01b03169163a97d1161916004808301926020929190829003018186803b1580156200210857600080fd5b505afa1580156200211d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002143919062003366565b846200300b565b60105460408051635b4a086f60e11b81529051620021d4926001600160a01b03169163b69410de916004808301926020929190829003018186803b1580156200219257600080fd5b505afa158015620021a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021cd919062003366565b836200300b565b6010546040805163661968bb60e11b815290516200225e926001600160a01b03169163cc32d176916004808301926020929190829003018186803b1580156200221c57600080fd5b505afa15801562002231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002257919062003366565b826200300b565b60105460408051634003f34d60e01b81529051620022a6926001600160a01b031691634003f34d916004808301926020929190829003018186803b158015620012af57600080fd5b50505050505050505050565b6000620022c342620d2f00620035ee565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081620022de57905050604051607b602482015290915060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b17905281518290600090620023445762002344620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf1926200238992911690869086906004016200349c565b602060405180830381600087803b158015620023a457600080fd5b505af1158015620023b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023df919062003366565b5060005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb390620024159060040162003553565b600060405180830381600087803b1580156200243057600080fd5b505af115801562002445573d6000803e3d6000fd5b50506010546012546001600160a01b0391821693506370a10c899250166200246f856001620035ee565b846040518463ffffffff1660e01b815260040162001a16939291906200349c565b6000620024a142620d2f00620035ee565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081620024bc575050600954909150620024e4906001620035ee565b604051602401620024f791815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663e94134d960e01b17905281518290600090620025375762002537620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf1926200257c92911690869086906004016200349c565b602060405180830381600087803b1580156200259757600080fd5b505af1158015620025ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025d2919062003366565b506000546201000090046001600160a01b031663e5d6bf02620025f7846001620035ee565b6040518263ffffffff1660e01b81526004016200261691815260200190565b600060405180830381600087803b1580156200263157600080fd5b505af115801562002646573d6000803e3d6000fd5b505060005460405163f28dceb360e01b815260206004820152601a60248201527f4d4c493a414e543a455850495245445f434f4d4d49544d454e540000000000006044820152620100009091046001600160a01b0316925063f28dceb39150606401600060405180830381600087803b158015620026c357600080fd5b505af1158015620026d8573d6000803e3d6000fd5b50506010546012546040516370a10c8960e01b81526001600160a01b0392831694506370a10c899350620027179290911690869086906004016200349c565b602060405180830381600087803b1580156200273257600080fd5b505af115801562002747573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200276d919062003366565b506000546040516372eb5f8160e11b815260048101849052620100009091046001600160a01b03169063e5d6bf0290602401600060405180830381600087803b158015620027ba57600080fd5b505af1158015620027cf573d6000803e3d6000fd5b50506010546012546040516370a10c8960e01b81526001600160a01b0392831694506370a10c89935062001aa79290911690869086906004016200349c565b60006200281f42620d2f00620035ee565b60408051600180825281830190925291925060009190816020015b60608152602001906001900390816200283a575050604051607b602482015290915060009060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b17905282518390600090620028a257620028a2620036d7565b602090810291909101018190526010546012546040516387accaf160e01b81529293506001600160a01b03918216926387accaf192620028eb921690879087906004016200349c565b602060405180830381600087803b1580156200290657600080fd5b505af11580156200291b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002941919062003366565b506040516101c8602482015260440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b17905282518390600090620029905762002990620036d7565b602090810291909101015260005460405163f28dceb360e01b8152620100009091046001600160a01b03169063f28dceb390620029d09060040162003553565b600060405180830381600087803b158015620029eb57600080fd5b505af115801562002a00573d6000803e3d6000fd5b50506010546012546040516370a10c8960e01b81526001600160a01b0392831694506370a10c89935062002a3f9290911690879087906004016200349c565b602060405180830381600087803b15801562002a5a57600080fd5b505af115801562002a6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a95919062003366565b50808260008151811062002aad5762002aad620036d7565b60209081029190910101526010546012546040516370a10c8960e01b81526001600160a01b03928316926370a10c899262000c2992911690879087906004016200349c565b60105460405163bdef476b60e01b81526103e860048201819052916001600160a01b03169063bdef476b90602401600060405180830381600087803b15801562002b3b57600080fd5b505af115801562002b50573d6000803e3d6000fd5b5050601054604051635baca0c960e11b81526101f460048201526001600160a01b03909116925063b75941929150602401600060405180830381600087803b15801562002b9c57600080fd5b505af115801562002bb1573d6000803e3d6000fd5b5050601054604051633fabc6b760e01b8152600060048201526001600160a01b039091169250633fabc6b79150602401600060405180830381600087803b15801562002bfc57600080fd5b505af115801562002c11573d6000803e3d6000fd5b50505050600042620d2f0062002c289190620035ee565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908162002c435790505060405160248101859052909150839060440160408051601f198184030181529190526020810180516001600160e01b0316631778616360e21b1790528251839060009062002cab5762002cab620036d7565b60209081029190910101526010546012546040516387accaf160e01b81526001600160a01b03928316926387accaf19262002cf092911690879087906004016200349c565b602060405180830381600087803b15801562002d0b57600080fd5b505af115801562002d20573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d46919062003366565b5060005460405163f28dceb360e01b815260206004820152601f60248201527f4d4c493a414e543a494e53554646494349454e545f434f4c4c41544552414c006044820152620100009091046001600160a01b03169063f28dceb390606401600060405180830381600087803b15801562002dc057600080fd5b505af115801562002dd5573d6000803e3d6000fd5b50506010546012546040516370a10c8960e01b81526001600160a01b0392831694506370a10c89935062002e149290911690879087906004016200349c565b602060405180830381600087803b15801562002e2f57600080fd5b505af115801562002e44573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e6a919062003366565b50601054604051633fabc6b760e01b8152600481018390526001600160a01b0390911690633fabc6b790602401600060405180830381600087803b15801562002eb257600080fd5b505af115801562002ec7573d6000803e3d6000fd5b50506010546012546040516370a10c8960e01b81526001600160a01b0392831694506370a10c899350620017289290911690879087906004016200349c565b80821462001386577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405162002f7c9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998160405162002fb591906200358a565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998260405162002fee9190620035c3565b60405180910390a1620013866000805461ff001916610100179055565b80821462001386577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200307e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051620030b791906200358a565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405162002fee9190620035c3565b6000828210156200313b5760405162461bcd60e51b815260206004820152601160248201527026a0ac2fa622a9a9afaa2420a72fa6a4a760791b604482015260640160405180910390fd5b600062003149848462003642565b9050806200315b578391505062003236565b6000198314620031755780620031718162003676565b9150505b600019831480156200318657508415155b156200319c578462003198816200365c565b9550505b83851015620031e65780620031b2868662003642565b620031be919062003609565b620031cb906001620035ee565b620031d7908262003620565b620031e39086620035ee565b94505b80620031f3858762003642565b620031ff919062003694565b6200320b9085620035ee565b9150600019831480156200321e57508415155b15620032345781620032308162003676565b9250505b505b9392505050565b6102b580620036ee83390190565b61035a80620039a383390190565b6115098062003cfd83390190565b6127dd806200520683390190565b6106ab80620079e383390190565b610f23806200808e83390190565b8260028101928215620032dc579160200282015b82811115620032dc57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620032a5565b50620032ea9291506200334f565b5090565b8260038101928215620032dc579160200282015b82811115620032dc57825182559160200191906001019062003302565b8260048101928215620032dc5791602002820182811115620032dc57825182559160200191906001019062003302565b5b80821115620032ea576000815560010162003350565b6000602082840312156200337957600080fd5b5051919050565b600080604083850312156200339457600080fd5b505080516020909101519092909150565b600080600080600060a08688031215620033be57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b8060005b6003811015620008f8578154845260209093019260019182019101620033e5565b6001600160a01b0386811682526101a082019060208084018860005b60028110156200344357815485168352918301916001918201910162003422565b505050620034556060850188620033e1565b6200346460c0850187620033e1565b610120840191508460005b60048110156200348e578154845292820192600191820191016200346f565b505050509695505050505050565b60006060820160018060a01b0386168352602085818501526060604085015281855180845260808601915060808160051b87010193508287016000805b838110156200354357888703607f1901855282518051808952835b8181101562003511578281018901518a82018a01528801620034f4565b8181111562003522578489838c0101525b50601f01601f191697909701860196509385019391850191600101620034d9565b50949a9950505050505050505050565b6020808252601b908201527f4d4c493a414e543a434f4d4d49544d454e545f4d49534d415443480000000000604082015260600190565b604081526000620035b560408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b604081526000620035b560408301600a815269080808081058dd1d585b60b21b602082015260400190565b60008219821115620036045762003604620036ab565b500190565b6000826200361b576200361b620036c1565b500490565b60008160001904831182151516156200363d576200363d620036ab565b500290565b600082821015620036575762003657620036ab565b500390565b6000816200366e576200366e620036ab565b506000190190565b60006000198214156200368d576200368d620036ab565b5060010190565b600082620036a657620036a6620036c1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b50610295806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633a60339a14610046578063cc2e0a2614610075578063fe69f708146100a7575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100a561008336600461016c565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100a56100b5366004610190565b60006100c38284018461016c565b6040516001600160a01b0382166024820152909150600090339060440160408051601f198184030181529181526020820180516001600160e01b0316636bc26a1360e11b17905251610115919061020c565b6000604051808303816000865af19150503d8060008114610152576040519150601f19603f3d011682016040523d82523d6000602084013e610157565b606091505b505090508061016557600080fd5b5050505050565b60006020828403121561017e57600080fd5b813561018981610247565b9392505050565b6000806000604084860312156101a557600080fd5b83359250602084013567ffffffffffffffff808211156101c457600080fd5b818601915086601f8301126101d857600080fd5b8135818111156101e757600080fd5b8760208285010111156101f957600080fd5b6020830194508093505050509250925092565b6000825160005b8181101561022d5760208186018101518583015201610213565b8181111561023c576000828501525b509190910192915050565b6001600160a01b038116811461025c57600080fd5b5056fea264697066735822122044c2952481de96a68fedc9e8ca53c09f645eaad1bc30867ed73a969abcfe58a864736f6c63430008070033608060405234801561001057600080fd5b5060405161035a38038061035a83398101604081905261002f91610089565b600080546001600160a01b039586166001600160a01b03199182161790915560018054949095169316929092179092556002919091556003556100cc565b80516001600160a01b038116811461008457600080fd5b919050565b6000806000806080858703121561009f57600080fd5b6100a88561006d565b93506100b66020860161006d565b6040860151606090960151949790965092505050565b61027f806100db6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806377e741c71161006657806377e741c7146101535780638275d47114610166578063a5a2760514610192578063c42cf535146101a5578063cc32d176146101d557600080fd5b80630c340a24146100a357806316a12d7a146100d3578063425fad58146100ea5780635e0454671461010e5780637303de2514610123575b600080fd5b6000546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100dc60025481565b6040519081526020016100ca565b6001546100fe90600160a01b900460ff1681565b60405190151581526020016100ca565b61012161011c366004610230565b600255565b005b6101216101313660046101de565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610121610161366004610230565b600355565b61012161017436600461020e565b60018054911515600160a01b0260ff60a01b19909216919091179055565b6001546100b6906001600160a01b031681565b6101216101b33660046101de565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6100dc60035481565b6000602082840312156101f057600080fd5b81356001600160a01b038116811461020757600080fd5b9392505050565b60006020828403121561022057600080fd5b8135801515811461020757600080fd5b60006020828403121561024257600080fd5b503591905056fea2646970667358221220960fa598f91991aa59fd5d826ee225ed174faa4e40506b35f958bb6a3edf990264736f6c634300080700336080604052600080546001600160a01b031916600817905534801561002357600080fd5b506114d6806100336000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636fc7d91111610104578063ac8a0501116100a2578063c2b63f4f11610071578063c2b63f4f1461043e578063d75edca414610451578063ec16a8d814610464578063fc179d671461047757600080fd5b8063ac8a0501146103f2578063afb7a0f614610405578063b6a0f33114610418578063c1a3c9d71461042b57600080fd5b80637fe25581116100de5780637fe25581146103a65780638b196cd5146103b957806398e5c234146103cc578063a18814da146103df57600080fd5b80636fc7d911146103505780637327de97146103805780637c2e27d41461039357600080fd5b80634046af2b1161017157806351cf23b11161014b57806351cf23b114610304578063574c784414610317578063687468d11461032a5780636c202fcb1461033d57600080fd5b80634046af2b1461029e578063429bf6c8146102c95780635100d121146102dc57600080fd5b80631649e2ef116101ad5780631649e2ef14610224578063188b80b8146102575780632893a76e1461026a5780633d73ea8f1461028b57600080fd5b8063035e30b3146101d457806305eee8e7146101fc5780631515a11614610211575b600080fd5b6101e76101e236600461112b565b61048a565b60405190151581526020015b60405180910390f35b61020f61020a3660046110a8565b610543565b005b61020f61021f366004610fcc565b6105d5565b61023761023236600461124d565b61062b565b6040805194855260208501939093529183015260608201526080016101f3565b61020f6102653660046111d6565b6106c1565b61027d61027836600461124d565b61072f565b6040519081526020016101f3565b61027d61029936600461124d565b6107b4565b6000546102b1906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b6102376102d736600461124d565b6107e4565b6102ef6102ea366004610fe7565b610818565b604080519283526020830191909152016101f3565b61020f61031236600461112b565b6108a3565b61020f610325366004611167565b61092b565b6101e761033836600461124d565b610996565b6101e761034b3660046111d6565b610a47565b61020f61035e366004610fcc565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6101e761038e36600461101a565b610b02565b6101e76103a136600461124d565b610b35565b6101e76103b436600461112b565b610b5c565b61027d6103c736600461112b565b610bea565b6101e76103da366004610fe7565b610c71565b6101e76103ed366004611277565b610c9c565b61020f610400366004610fe7565b610cce565b61027d61041336600461101a565b610d2d565b6101e761042636600461124d565b610d67565b6101e7610439366004610fe7565b610d8e565b61020f61044c366004611277565b610db9565b6101e761045f36600461124d565b610e20565b6101e7610472366004610fcc565b610e47565b6101e761048536600461105d565b610ed4565b6040516001600160a01b038381166024830152604482018390526000919085169063e920b1e160e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516104f691906113f9565b6000604051808303816000865af19150503d8060008114610533576040519150601f19603f3d011682016040523d82523d6000602084013e610538565b606091505b509095945050505050565b60405163d505accf60e01b81526001600160a01b0388811660048301528781166024830152604482018790526064820186905260ff8516608483015260a4820184905260c4820183905289169063d505accf9060e401600060405180830381600087803b1580156105b357600080fd5b505af11580156105c7573d6000803e3d6000fd5b505050505050505050505050565b806001600160a01b0316630fe3d9b76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561061057600080fd5b505af1158015610624573d6000803e3d6000fd5b5050505050565b600080600080856001600160a01b031663d05951a0866040518263ffffffff1660e01b815260040161065f91815260200190565b608060405180830381600087803b15801561067957600080fd5b505af115801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190611309565b9299919850965090945092505050565b6040516328565a7760e11b81526001600160a01b038716906350acb4ee906106f59088908890889088908890600401611466565b600060405180830381600087803b15801561070f57600080fd5b505af1158015610723573d6000803e3d6000fd5b50505050505050505050565b6040516322baaeeb60e11b8152600481018290526000906001600160a01b038416906345755dd6906024015b602060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906112cc565b9392505050565b6040516350f2012f60e01b8152600481018290526000906001600160a01b038416906350f2012f9060240161075b565b600080600080856001600160a01b0316635114cb52866040518263ffffffff1660e01b815260040161065f91815260200190565b6040516347350e9f60e01b81526001600160a01b03828116600483015260009182918516906347350e9f906024016040805180830381600087803b15801561085f57600080fd5b505af1158015610873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089791906112e5565b915091505b9250929050565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906112aa565b50505050565b604051632b2d48ad60e21b81526001600160a01b0386169063acb522b49061095d908790879087908790600401611434565b600060405180830381600087803b15801561097757600080fd5b505af115801561098b573d6000803e3d6000fd5b505050505050505050565b6000826001600160a01b03166350f2012f60e01b836040516024016109bd91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516109fb91906113f9565b6000604051808303816000865af19150503d8060008114610a38576040519150601f19603f3d011682016040523d82523d6000602084013e610a3d565b606091505b5090949350505050565b6000866001600160a01b03166350acb4ee60e01b8787878787604051602401610a74959493929190611466565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ab291906113f9565b6000604051808303816000865af19150503d8060008114610aef576040519150601f19603f3d011682016040523d82523d6000602084013e610af4565b606091505b509098975050505050505050565b6040516001600160a01b03838116602483015282811660448301526000919085169063712b772f60e01b906064016104b8565b6000826001600160a01b03166345755dd660e01b836040516024016109bd91815260200190565b60405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390526000919085169063a9059cbb90604401602060405180830381600087803b158015610baa57600080fd5b505af1158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be291906112aa565b949350505050565b60405163e920b1e160e01b81526001600160a01b038381166004830152602482018390526000919085169063e920b1e1906044015b602060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be291906112cc565b6040516001600160a01b038281166024830152600091908416906347350e9f60e01b906044016109bd565b604051602481018390526001600160a01b0382811660448301526000919085169063390d685560e01b906064016104b8565b60405163267f4ac360e01b81526001600160a01b03828116600483015283169063267f4ac390602401600060405180830381600087803b158015610d1157600080fd5b505af1158015610d25573d6000803e3d6000fd5b505050505050565b60405163712b772f60e01b81526001600160a01b03838116600483015282811660248301526000919085169063712b772f90604401610c1f565b6000826001600160a01b031663d05951a060e01b836040516024016109bd91815260200190565b6040516001600160a01b0382811660248301526000919084169063267f4ac360e01b906044016109bd565b60405163390d685560e01b8152600481018390526001600160a01b03828116602483015284169063390d685590604401600060405180830381600087803b158015610e0357600080fd5b505af1158015610e17573d6000803e3d6000fd5b50505050505050565b6000826001600160a01b0316635114cb5260e01b836040516024016109bd91815260200190565b60408051600481526024810182526020810180516001600160e01b0316630fe3d9b760e01b17905290516000916001600160a01b03841691610e8991906113f9565b6000604051808303816000865af19150503d8060008114610ec6576040519150601f19603f3d011682016040523d82523d6000602084013e610ecb565b606091505b50909392505050565b6040516323b872dd60e01b81526001600160a01b038481166004830152838116602483015260448201839052600091908616906323b872dd90606401602060405180830381600087803b158015610f2a57600080fd5b505af1158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6291906112aa565b95945050505050565b80356001600160a01b0381168114610f8257600080fd5b919050565b60008083601f840112610f9957600080fd5b50813567ffffffffffffffff811115610fb157600080fd5b6020830191508360208260051b850101111561089c57600080fd5b600060208284031215610fde57600080fd5b6107ad82610f6b565b60008060408385031215610ffa57600080fd5b61100383610f6b565b915061101160208401610f6b565b90509250929050565b60008060006060848603121561102f57600080fd5b61103884610f6b565b925061104660208501610f6b565b915061105460408501610f6b565b90509250925092565b6000806000806080858703121561107357600080fd5b61107c85610f6b565b935061108a60208601610f6b565b925061109860408601610f6b565b9396929550929360600135925050565b600080600080600080600080610100898b0312156110c557600080fd5b6110ce89610f6b565b97506110dc60208a01610f6b565b96506110ea60408a01610f6b565b9550606089013594506080890135935060a089013560ff8116811461110e57600080fd5b979a969950949793969295929450505060c08201359160e0013590565b60008060006060848603121561114057600080fd5b61114984610f6b565b925061115760208501610f6b565b9150604084013590509250925092565b60008060008060006080868803121561117f57600080fd5b61118886610f6b565b945061119660208701610f6b565b935060408601359250606086013567ffffffffffffffff8111156111b957600080fd5b6111c588828901610f87565b969995985093965092949392505050565b60008060008060008060a087890312156111ef57600080fd5b6111f887610f6b565b955061120660208801610f6b565b945060408701359350606087013567ffffffffffffffff81111561122957600080fd5b61123589828a01610f87565b979a9699509497949695608090950135949350505050565b6000806040838503121561126057600080fd5b61126983610f6b565b946020939093013593505050565b60008060006060848603121561128c57600080fd5b61129584610f6b565b92506020840135915061105460408501610f6b565b6000602082840312156112bc57600080fd5b815180151581146107ad57600080fd5b6000602082840312156112de57600080fd5b5051919050565b600080604083850312156112f857600080fd5b505080516020909101519092909150565b6000806000806080858703121561131f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b81835260006020808501808196508560051b810191508460005b878110156113c35782840389528135601e1988360301811261137a57600080fd5b8701803567ffffffffffffffff81111561139357600080fd5b8036038913156113a257600080fd5b6113af86828985016113d0565b9a87019a9550505090840190600101611359565b5091979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000825160005b8181101561141a5760208186018101518583015201611400565b81811115611429576000828501525b509190910192915050565b60018060a01b038516815283602082015260606040820152600061145c60608301848661133f565b9695505050505050565b60018060a01b038616815284602082015260806040820152600061148e60808301858761133f565b9050826060830152969550505050505056fea2646970667358221220301d0fee16738fb00c4d4c34da46b6b890b0014431a7574e9b2ea66fcb50d08564736f6c63430008070033608060405234801561001057600080fd5b506127bd806100206000396000f3fe608060405234801561001057600080fd5b50600436106104285760003560e01c80639931c34c1161022b578063c762d5f711610130578063e268255d116100b8578063eb7462c711610087578063eb7462c7146108f6578063f2f659601461090e578063f68dee9014610921578063fe12afe914610934578063ffb23a561461094757600080fd5b8063e268255d146108b5578063e44b3875146108c8578063e48f6faf146108d0578063e94134d9146108e357600080fd5b8063d157f645116100ff578063d157f6451461084f578063d41ddc9614610862578063d82d842114610875578063d8d79700146108a5578063d8dfeb45146108ad57600080fd5b8063c762d5f7146107f1578063c8b8c43e14610821578063cc32d17614610834578063ccc044841461083c57600080fd5b8063b86a513e116101b3578063ba5d307811610182578063ba5d3078146107aa578063ba83276b146107b2578063bcead63e146107ba578063bdef476b146107cb578063c58d45a9146107de57600080fd5b8063b86a513e1461077f578063b96b5c9914610787578063b9b1f4e31461078f578063b9d842d11461079757600080fd5b8063aabaecd6116101fa578063aabaecd61461072d578063ab8355d41461073e578063acb522b414610751578063b69410de14610764578063b75941921461076c57600080fd5b80639931c34c146106f75780639c3c2ab11461070a578063a06db7dc1461071d578063a97d11611461072557600080fd5b80634b65a86d1161033157806375a20676116102b95780637df1f1b9116102885780637df1f1b9146106b05780637febd92b146106c157806387accaf1146106d45780638c6862bd146106e75780638ffc9215146106ef57600080fd5b806375a206761461068557806377b3c55c1461068d57806377e741c7146106955780637c3a00fd146106a857600080fd5b80635de1858c116103005780635de1858c146106315780635f84f302146106445780636174b2721461065757806369458ba71461066a57806370a10c891461067257600080fd5b80634b65a86d146105a057806350b903a9146105b35780635260781c146105e35780635bb47808146105f657600080fd5b8063390d6855116103b457806341fc71061161038357806341fc71061461050f57806342af07501461052257806346e368d41461053557806347350e9f146105655780634764757e1461058d57600080fd5b8063390d6855146104bc57806339ba9f86146104cf5780633fabc6b7146104f45780634003f34d1461050757600080fd5b806321c3cbc2116103fb57806321c3cbc214610467578063232fa7331461046f578063258d0e8a146104975780632ead1098146104ac57806330fea1ce146104b457600080fd5b80630895326f1461042d5780631cc1cf46146104445780631df5b4d21461044c5780631eb5ea2e1461045f575b600080fd5b6013545b6040519081526020015b60405180910390f35b600754610431565b61043161045a36600461242d565b61095a565b610431610971565b610431610980565b61047761098a565b60408051948552602085019390935291830152606082015260800161043b565b6104aa6104a53660046123a9565b601255565b005b600b54610431565b600954610431565b6104aa6104ca3660046123db565b6109a6565b6005546001600160a01b03165b6040516001600160a01b03909116815260200161043b565b6104aa6105023660046123a9565b601155565b601254610431565b6104aa61051d3660046123a9565b601555565b6104316105303660046122fb565b6109b4565b6104aa610543366004612206565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610578610573366004612206565b6109cb565b6040805192835260208301919091520161043b565b6104aa61059b3660046123a9565b601355565b6104aa6105ae366004612240565b6109e0565b6104aa6105c1366004612206565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6105786105f13660046124c6565b6109f4565b6104aa610604366004612206565b6001600160a01b03167f7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af155565b6104aa61063f3660046123a9565b600c55565b6104aa6106523660046123a9565b600855565b610431610665366004612206565b610a1b565b610477610a2c565b6104316106803660046122fb565b610a3a565b600c54610431565b600a54610431565b6104aa6106a33660046123a9565b601855565b600854610431565b6000546001600160a01b03166104dc565b6104aa6106cf3660046123a9565b600a55565b6104316106e23660046122fb565b610a48565b6104aa610a56565b600d54610431565b6104aa6107053660046123a9565b601755565b6104aa6107183660046123a9565b600b55565b600654610431565b601654610431565b6004546001600160a01b03166104dc565b6104aa61074c3660046123a9565b601655565b6104aa61075f3660046122fb565b610a60565b601754610431565b6104aa61077a3660046123a9565b600f55565b600e54610431565b610477610a6c565b600f54610431565b6104316107a536600461240b565b610a7a565b601454610431565b601554610431565b6001546001600160a01b03166104dc565b6104aa6107d93660046123a9565b601455565b6104316107ec36600461242d565b610a86565b6104aa6107ff366004612206565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61057861082f36600461248b565b610a93565b601854610431565b6104aa61084a3660046123db565b610ab2565b6104aa61085d3660046123a9565b600755565b6104aa6108703660046123db565b610abc565b6104aa610883366004612206565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610477610ac6565b601154610431565b6104316108c3366004612459565b610ad4565b601054610431565b6104316108de366004612206565b610ae2565b6104aa6108f13660046123a9565b600e55565b6108fe610aed565b604051901515815260200161043b565b6104aa61091c3660046123a9565b600655565b6104aa61092f3660046123a9565b601055565b6104aa6109423660046123a9565b600955565b6104aa6109553660046123a9565b600d55565b6000610967848484610af7565b90505b9392505050565b600061097b610b20565b905090565b600061097b610b56565b600080600080610998610b82565b935093509350935090919293565b6109b08282610c75565b5050565b60006109c285858585610ce8565b95945050505050565b6000806109d783610d21565b91509150915091565b6109ed8585858585610e96565b5050505050565b600080610a088b8b8b8b8b8b8b8b8b61102b565b915091505b995099975050505050505050565b6000610a268261107a565b92915050565b600080600080610998611154565b60006109c2858585856111bb565b60006109c2858585856114ba565b610a5e6114e2565b565b6109ed84848484611520565b60008060008061099861158e565b600061096a83836115d9565b60006109678484846115f4565b600080610aa38787878787611656565b915091505b9550959350505050565b6109b08282611748565b6109b0828261180f565b6000806000806109986118d6565b60006109c2858585856119cd565b6000610a2682611a06565b600061097b611b50565b6000670de0b6b3a7640000610b0c84846115d9565b610b16908661270d565b61096791906126eb565b600554600090610b38906001600160a01b031661107a565b905080600f6000828254610b4c91906126d3565b9250508190555090565b600454600090610b6e906001600160a01b031661107a565b90508060116000828254610b4c91906126d3565b600080600080601254421115610bd85760405162461bcd60e51b81526020600482015260166024820152754d4c493a434c3a5041594d454e545f49535f4c41544560501b60448201526064015b60405180910390fd5b610be0611154565b6000601681905593975091955093509150610bfb84866126d3565b905081610c0884836126d3565b610c1291906126d3565b600554610c27906001600160a01b031661107a565b600f54610c3491906126d3565b610c3e919061272c565b600f819055508060106000828254610c5691906126d3565b90915550610c6690508383611b70565b610c6e6114e2565b5090919293565b8160106000828254610c87919061272c565b9091555050600554610ca3906001600160a01b03168284611be2565b6109b05760405162461bcd60e51b81526020600482015260166024820152751353124e90d18e9514905394d1915497d1905253115160521b6044820152606401610bcf565b600084848484604051602001610d019493929190612599565b604051602081830303815290604052805190602001209050949350505050565b60125460009081908015801590610d435750600654610d4090826126d3565b42115b610d865760405162461bcd60e51b81526020600482015260146024820152731353124e948e9393d517d25397d111519055531560621b6044820152606401610bcf565b610d8e6114e2565b600060118190556010819055600f8190556004546001600160a01b031690610db58261107a565b9450841480610dca5750610dca818686611be2565b610e165760405162461bcd60e51b815260206004820152601760248201527f4d4c493a523a435f5452414e534645525f4641494c45440000000000000000006044820152606401610bcf565b6005546001600160a01b03166000610e2d8261107a565b9450841480610e425750610e42818786611be2565b610e8e5760405162461bcd60e51b815260206004820152601760248201527f4d4c493a523a465f5452414e534645525f4641494c45440000000000000000006044820152606401610bcf565b505050915091565b6020820151610ee75760405162461bcd60e51b815260206004820152601760248201527f4d4c493a493a494e56414c49445f5052494e434950414c0000000000000000006044820152606401610bcf565b602082015160408301511115610f3f5760405162461bcd60e51b815260206004820152601e60248201527f4d4c493a493a494e56414c49445f454e44494e475f5052494e434950414c00006044820152606401610bcf565b600080546001600160a01b0319166001600160a01b038716908117909155610fa25760405162461bcd60e51b815260206004820152601660248201527526a6249d249d24a72b20a624a22fa127a92927aba2a960511b6044820152606401610bcf565b8351600480546001600160a01b03199081166001600160a01b039384161790915560208087015160058054909316931692909217905583516006558381015160078190556040808601516013558451600c5584830151600d81905585820151600e55845160085592840151600955830151600a556060830151600b556109ed9190600080611c37565b60008061103b8888878c8a611656565b90925090506001861461104e5781611050565b875b91506110608b89878d8888611d95565b61106a90826126d3565b9050995099975050505050505050565b6005546000906001600160a01b038381169116146110995760006110a9565b600f546010546110a991906126d3565b6004546001600160a01b038481169116146110c55760006110c9565b6011545b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561110857600080fd5b505afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114091906123c2565b61114a919061272c565b610a26919061272c565b600080600080601654670de0b6b3a7640000600954601454965086611179919061270d565b61118391906126eb565b61118d91906126d3565b601354601754919450906111a290829061270d565b9250806018546111b2919061270d565b91505090919293565b60006111c985858585610ce8565b9050806015541461121c5760405162461bcd60e51b815260206004820152601b60248201527f4d4c493a414e543a434f4d4d49544d454e545f4d49534d4154434800000000006044820152606401610bcf565b6001600160a01b0385163b6112735760405162461bcd60e51b815260206004820152601a60248201527f4d4c493a414e543a494e56414c49445f524546494e414e4345520000000000006044820152606401610bcf565b834211156112c35760405162461bcd60e51b815260206004820152601a60248201527f4d4c493a414e543a455850495245445f434f4d4d49544d454e540000000000006044820152606401610bcf565b600060075490506000806112ec4284601454600e54600854601354601254600a54600b54611e3b565b91509150816016600082825461130291906126d3565b90915550506000601581905585905b818110156113e25760008a6001600160a01b031689898481811061133757611337612759565b9050602002810190611349919061264e565b60405161135792919061254e565b600060405180830381855af49150503d8060008114611392576040519150601f19603f3d011682016040523d82523d6000602084013e611397565b606091505b50509050806113d95760405162461bcd60e51b815260206004820152600e60248201526d1353124e9053950e91905253115160921b6044820152606401610bcf565b50600101611311565b506000601354856113f3919061270d565b83601754611401919061270d565b61140b91906126eb565b905060006013548661141d919061270d565b8460185461142b919061270d565b61143591906126eb565b60075490915061144581426126d3565b60125560145461145790828585611c37565b61145f611b50565b6114ab5760405162461bcd60e51b815260206004820152601f60248201527f4d4c493a414e543a494e53554646494349454e545f434f4c4c41544552414c006044820152606401610bcf565b50505050505050949350505050565b6000816114c85760006114d4565b6114d485858585610ce8565b601581905595945050505050565b60006006819055600781905560088190556009819055600a819055600b819055600e8190556012819055601381905560148190556017819055601855565b600061152e85858585610ce8565b905080601554146115815760405162461bcd60e51b815260206004820152601b60248201527f4d4c493a524e543a434f4d4d49544d454e545f4d49534d4154434800000000006044820152606401610bcf565b6000601555949350505050565b6000806000806115b542601254600754601454600e54601354600854600a54600b5461102b565b60165491955093506115c790846126d3565b92506017549150601854905090919293565b60006301e133806115ea838561270d565b61096a91906126eb565b6000600183166116045781611606565b835b90505b60019290921c91821561096a5781611621858061270d565b61162b91906126eb565b93506001831661163a57611609565b81611645858361270d565b61164f91906126eb565b9050611609565b600080600061166586866115d9565b9050600061168d61167e83670de0b6b3a76400006126d3565b86670de0b6b3a76400006115f4565b9050670de0b6b3a764000081116116c057846116a9898b61272c565b6116b391906126eb565b6000935093505050610aa8565b60006116d4670de0b6b3a76400008361272c565b838a670de0b6b3a76400006116e9868f61270d565b6116f391906126eb565b6116fd919061272c565b611707919061270d565b61171191906126eb565b905061171e8a8989610af7565b93508381101561172f576000611739565b611739848261272c565b94505050509550959350505050565b81600f600082825461175a919061272c565b9091555050600554611776906001600160a01b03168284611be2565b6117bb5760405162461bcd60e51b81526020600482015260166024820152751353124e91118e9514905394d1915497d1905253115160521b6044820152606401610bcf565b6117c3611b50565b6109b05760405162461bcd60e51b815260206004820152601e60248201527f4d4c493a44463a494e53554646494349454e545f434f4c4c41544552414c00006044820152606401610bcf565b8160116000828254611821919061272c565b909155505060045461183d906001600160a01b03168284611be2565b6118825760405162461bcd60e51b81526020600482015260166024820152751353124e9490ce9514905394d1915497d1905253115160521b6044820152606401610bcf565b61188a611b50565b6109b05760405162461bcd60e51b815260206004820152601e60248201527f4d4c493a52433a494e53554646494349454e545f434f4c4c41544552414c00006044820152606401610bcf565b6000806000806118e461158e565b60006016819055939750919550935091506118ff84866126d3565b90508161190c84836126d3565b61191691906126d3565b60055461192b906001600160a01b031661107a565b600f5461193891906126d3565b611942919061272c565b600f81905550806010600082825461195a91906126d3565b9091555061196a90508383611b70565b60135460018114156119835761197e6114e2565b6119c5565b6007546012600082825461199791906126d3565b9250508190555085601460008282546119b0919061272c565b909155506119c1905060018261272c565b6013555b505090919293565b6000838511156119fb57826119e2858761272c565b6119ec908461270d565b6119f691906126eb565b6109c2565b506000949350505050565b60006001600160a01b038216611a565760405162461bcd60e51b815260206004820152601560248201527426a6249d23261d24a72b20a624a22fa622a72222a960591b6044820152606401610bcf565b601354601254158015611a6857508015155b611aa95760405162461bcd60e51b81526020600482015260126024820152714d4c493a464c3a4c4f414e5f41435449564560701b6044820152606401610bcf565b600754600180546001600160a01b0319166001600160a01b038616179055611ad181426126d3565b601255600d5460148190556005549093506001600160a01b031683611af58261107a565b1015611b435760405162461bcd60e51b815260206004820152601860248201527f4d4c493a464c3a57524f4e475f46554e445f414d4f554e5400000000000000006044820152606401610bcf565b505050600f819055919050565b6000611b66601454600f54600d54600c546119cd565b6011541015905090565b600154611b8e906001600160a01b0316634046af2b60e01b84611ea9565b611baa578160106000828254611ba491906126d3565b90915550505b611bc3611bb5611fb8565b63a5a2760560e01b83611ea9565b6109b0578060106000828254611bd991906126d3565b90915550505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052600090610967908590612032565b6000611c41611fb8565b90508264496cebb80085836001600160a01b03166316a12d7a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc91906123c2565b611cc6908961270d565b611cd0919061270d565b611cda91906126eb565b611ce491906126d3565b6017819055508164496cebb80085836001600160a01b031663cc32d1766040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2b57600080fd5b505afa158015611d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6391906123c2565b611d6d908961270d565b611d77919061270d565b611d8191906126eb565b611d8b91906126d3565b6018555050505050565b6000838711611da657506000611e31565b6000620151806001611db8878b61272c565b611dc2919061272c565b611dcc91906126eb565b611dd79060016126d3565b611de4906201518061270d565b9050611dfa87611df485896126d3565b83610af7565b611e0490836126d3565b9150670de0b6b3a7640000611e19888661270d565b611e2391906126eb565b611e2d90836126d3565b9150505b9695505050505050565b60008084611e498b8d6126d3565b1015611e5a57506000905080610a0d565b611e648a8661272c565b611e6e908c61272c565b9050611e7d898989848a611656565b9250611e8f90508b8a89888888611d95565b611e9990836126d3565b9150995099975050505050505050565b600081611eb85750600161096a565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198716179052905160009182916001600160a01b03881691611efe9161255e565b6000604051808303816000865af19150503d8060008114611f3b576040519150601f19603f3d011682016040523d82523d6000602084013e611f40565b606091505b5091509150811580611f5457506020815114155b15611f645760009250505061096a565b600081806020019051810190611f7a9190612223565b90506001600160a01b038116611f96576000935050505061096a565b600554611fad906001600160a01b03168287611be2565b979650505050505050565b6000611fc26120da565b6001600160a01b0316633a60339a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ffa57600080fd5b505afa15801561200e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190612223565b60006001600160a01b0383163b61204b57506000610a26565b6060836001600160a01b031683604051612065919061255e565b6000604051808303816000865af19150503d80600081146120a2576040519150601f19603f3d011682016040523d82523d6000602084013e6120a7565b606091505b5090925090508180156120d25750805115806120d25750808060200190518101906120d29190612387565b949350505050565b60006121047f7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af15490565b919050565b600082601f83011261211a57600080fd5b6040516060810181811067ffffffffffffffff8211171561214b57634e487b7160e01b600052604160045260246000fd5b60405280836060810186101561216057600080fd5b60005b6003811015612182578135835260209283019290910190600101612163565b509195945050505050565b600082601f83011261219e57600080fd5b6040516080810181811067ffffffffffffffff821117156121cf57634e487b7160e01b600052604160045260246000fd5b6040528083608081018610156121e457600080fd5b60005b60048110156121825781358352602092830192909101906001016121e7565b60006020828403121561221857600080fd5b813561096a8161276f565b60006020828403121561223557600080fd5b815161096a8161276f565b60008060008060006101a0868803121561225957600080fd5b85356122648161276f565b94506020603f8701881361227757600080fd5b61227f61269c565b8082890160608a018b81111561229457600080fd5b60005b60028110156122bd5782356122ab8161276f565b85529385019391850191600101612297565b508298506122cb8c82612109565b975050505050506122df8760c08801612109565b91506122ef87610120880161218d565b90509295509295909350565b6000806000806060858703121561231157600080fd5b843561231c8161276f565b935060208501359250604085013567ffffffffffffffff8082111561234057600080fd5b818701915087601f83011261235457600080fd5b81358181111561236357600080fd5b8860208260051b850101111561237857600080fd5b95989497505060200194505050565b60006020828403121561239957600080fd5b8151801515811461096a57600080fd5b6000602082840312156123bb57600080fd5b5035919050565b6000602082840312156123d457600080fd5b5051919050565b600080604083850312156123ee57600080fd5b8235915060208301356124008161276f565b809150509250929050565b6000806040838503121561241e57600080fd5b50508035926020909101359150565b60008060006060848603121561244257600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561246f57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a086880312156124a357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060008060006101208a8c0312156124e557600080fd5b505087359960208901359950604089013598606081013598506080810135975060a0810135965060c0810135955060e08101359450610100013592509050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183823760009101908152919050565b6000825160005b8181101561257f5760208186018101518583015201612565565b8181111561258e576000828501525b509190910192915050565b6001600160a01b0385168152602080820185905260606040830181905282018390526000906080600585901b840181019190840186845b8781101561263f57868503607f190183528135368a9003601e190181126125f657600080fd5b8901803567ffffffffffffffff81111561260f57600080fd5b8036038b131561261e57600080fd5b61262b8782888501612525565b9650505091830191908301906001016125d0565b50929998505050505050505050565b6000808335601e1984360301811261266557600080fd5b83018035915067ffffffffffffffff82111561268057600080fd5b60200191503681900382131561269557600080fd5b9250929050565b6040805190810167ffffffffffffffff811182821017156126cd57634e487b7160e01b600052604160045260246000fd5b60405290565b600082198211156126e6576126e6612743565b500190565b60008261270857634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561272757612727612743565b500290565b60008282101561273e5761273e612743565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461278457600080fd5b5056fea26469706673582212208abdaa82dec3ac41eb2afe5e1426d93e21b83d062cc6e2030d3c0980c690cb1464736f6c63430008070033608060405234801561001057600080fd5b5061068b806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b163ff9711610066578063b163ff9714610104578063d157f64514610117578063e94134d91461012a578063f2f659601461013d578063fe12afe91461015057600080fd5b80634764757e146100a35780635de1858c146100b85780635f84f302146100cb5780637febd92b146100de5780639c3c2ab1146100f1575b600080fd5b6100b66100b13660046105de565b610163565b005b6100b66100c63660046105de565b6101e5565b6100b66100d93660046105de565b61021a565b6100b66100ec3660046105de565b61024f565b6100b66100ff3660046105de565b610284565b6100b66101123660046105de565b6102b9565b6100b66101253660046105de565b610397565b6100b66101383660046105de565b61040d565b6100b661014b3660046105de565b610494565b6100b661015e3660046105de565b6104c9565b806101a95760405162461bcd60e51b8152602060048201526011602482015270148e94d4148e96915493d7d05353d55395607a1b60448201526064015b60405180910390fd5b60138190556040518181527f35ea55dd4eee968798b5f61efffeb9d5f88b42c05aee6151a1bb4836c082ad21906020015b60405180910390a150565b600c8190556040518181527fd08f964ebebbb23438d7327a9e0b4d3a6977b689a76fbbc5e3ff6cf2bd57c296906020016101da565b60088190556040518181527f532f252238b3b0d2b8c8a257b087fb3fdbdc775e3e0acca8e680a2f36aafa34b906020016101da565b600a8190556040518181527f901c1ec58c5f0467430dc60e75d29fc21f09505b87ae0f9add2ca0aa75f172b5906020016101da565b600b8190556040518181527fa1367e43892cb30dbdf580f60f215aae22c2575ecd8bfef69d87c3671ad79a3b906020016101da565b60055481906102d0906001600160a01b03166104fe565b101561031e5760405162461bcd60e51b815260206004820152601860248201527f523a49503a494e53554646494349454e545f414d4f554e54000000000000000060448201526064016101a0565b80601460008282546103309190610610565b9250508190555080600d60008282546103499190610610565b9250508190555080600f60008282546103629190610610565b90915550506040518181527fc8fcde6244e516452771097a17ecb4c9e6331f498c228f1a951518aedefcb5ee906020016101da565b806103d85760405162461bcd60e51b8152602060048201526011602482015270148e94d4124e96915493d7d05353d55395607a1b60448201526064016101a0565b60078190556040518181527f262b925b6c3983fb29f10dd4493cd3accbbf1fceec18a61b59b2e663b795a37a906020016101da565b60145481111561045f5760405162461bcd60e51b815260206004820152601d60248201527f523a5345503a41424f56455f43555252454e545f5052494e434950414c00000060448201526064016101a0565b600e8190556040518181527fbef1806a01fbfd8f94363f8c74073ad697b31d9278da8c01247366e6c8aa1678906020016101da565b60068190556040518181527f376aafccbf0af4f25bc38eb52182d4604f044d0d87e4cb26e1667b50e3a1de05906020016101da565b60098190556040518181527f6c16b95dcb84ecf131270f4ff8500490839e14db1d5fb8d8a8c89da8551806f8906020016101da565b6005546000906001600160a01b0383811691161461051d57600061052d565b600f5460105461052d9190610610565b6004546001600160a01b0384811691161461054957600061054d565b6011545b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561058c57600080fd5b505afa1580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c491906105f7565b6105ce9190610628565b6105d89190610628565b92915050565b6000602082840312156105f057600080fd5b5035919050565b60006020828403121561060957600080fd5b5051919050565b600082198211156106235761062361063f565b500190565b60008282101561063a5761063a61063f565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207ec41d97fd74277290ee65f2b3a186dff3b38b0278f194726215bf68f29423f364736f6c6343000807003360a06040523480156200001157600080fd5b5060405162000f2338038062000f238339810160408190526200003491620001f7565b82828282600090805190602001906200004f9291906200009a565b508151620000659060019060208501906200009a565b5060f81b7fff000000000000000000000000000000000000000000000000000000000000001660805250620002cf9350505050565b828054620000a8906200027c565b90600052602060002090601f016020900481019282620000cc576000855562000117565b82601f10620000e757805160ff191683800117855562000117565b8280016001018555821562000117579182015b8281111562000117578251825591602001919060010190620000fa565b506200012592915062000129565b5090565b5b808211156200012557600081556001016200012a565b600082601f8301126200015257600080fd5b81516001600160401b03808211156200016f576200016f620002b9565b604051601f8301601f19908116603f011681019082821181831017156200019a576200019a620002b9565b81604052838152602092508683858801011115620001b757600080fd5b600091505b83821015620001db5785820183015181830184015290820190620001bc565b83821115620001ed5760008385830101525b9695505050505050565b6000806000606084860312156200020d57600080fd5b83516001600160401b03808211156200022557600080fd5b620002338783880162000140565b945060208601519150808211156200024a57600080fd5b50620002598682870162000140565b925050604084015160ff811681146200027157600080fd5b809150509250925092565b600181811c908216806200029157607f821691505b60208210811415620002b357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160f81c610c35620002ee60003960006101a70152610c356000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806340c10f19116100a25780639dc29fac116100715780639dc29fac14610253578063a457c2d714610266578063a9059cbb14610279578063d505accf1461028c578063dd62ed3e1461029f57600080fd5b806340c10f19146101f657806370a082311461020b5780637ecebe001461022b57806395d89b411461024b57600080fd5b806330adf81f116100de57806330adf81f1461017b578063313ce567146101a25780633644e515146101db57806339509351146101e357600080fd5b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015157806323b872dd14610168575b600080fd5b6101186102ca565b6040516101259190610b2a565b60405180910390f35b61014161013c366004610a64565b610358565b6040519015158152602001610125565b61015a60025481565b604051908152602001610125565b6101416101763660046109b5565b61036e565b61015a7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6101c97f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610125565b61015a610390565b6101416101f1366004610a64565b61043f565b610209610204366004610a64565b61047b565b005b61015a610219366004610960565b60036020526000908152604090205481565b61015a610239366004610960565b60056020526000908152604090205481565b610118610489565b610209610261366004610a64565b610496565b610141610274366004610a64565b6104a0565b610141610287366004610a64565b6104ad565b61020961029a3660046109f1565b6104ba565b61015a6102ad366004610982565b600460209081526000928352604080842090915290825290205481565b600080546102d790610bae565b80601f016020809104026020016040519081016040528092919081815260200182805461030390610bae565b80156103505780601f1061032557610100808354040283529160200191610350565b820191906000526020600020905b81548152906001019060200180831161033357829003601f168201915b505050505081565b600061036533848461073b565b50600192915050565b600061037b84338461079d565b6103868484846107e1565b5060019392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516103c29190610a8e565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b3360008181526004602090815260408083206001600160a01b03871684529091528120549091610365918590610476908690610b7f565b61073b565b6104858282610864565b5050565b600180546102d790610bae565b61048582826108d0565b600061036533848461079d565b60006103653384846107e1565b428410156105015760405162461bcd60e51b815260206004820152600f60248201526e115490cc8c0e940e91561412549151608a1b60448201526064015b60405180910390fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0811180159061054157508260ff16601b148061054157508260ff16601c145b6105815760405162461bcd60e51b815260206004820152601160248201527045524332303a503a4d414c4c4541424c4560781b60448201526064016104f8565b600061058b610390565b6001600160a01b0389811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938c166060840152608083018b905260a083019390935260c08083018a90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156106a4573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b03161480156106d957506001600160a01b03891615155b6107255760405162461bcd60e51b815260206004820152601960248201527f45524332303a503a494e56414c49445f5349474e41545552450000000000000060448201526064016104f8565b505061073287878761073b565b50505050505050565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0380841660009081526004602090815260408083209386168352929052205460001981146107db576107db84846104768585610b97565b50505050565b6001600160a01b03831660009081526003602052604081208054839290610809908490610b97565b90915550506001600160a01b03808316600081815260036020526040908190208054850190555190918516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107909085815260200190565b80600260008282546108769190610b7f565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906108f8908490610b97565b90915550506002805482900390556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016108c4565b80356001600160a01b038116811461095b57600080fd5b919050565b60006020828403121561097257600080fd5b61097b82610944565b9392505050565b6000806040838503121561099557600080fd5b61099e83610944565b91506109ac60208401610944565b90509250929050565b6000806000606084860312156109ca57600080fd5b6109d384610944565b92506109e160208501610944565b9150604084013590509250925092565b600080600080600080600060e0888a031215610a0c57600080fd5b610a1588610944565b9650610a2360208901610944565b95506040880135945060608801359350608088013560ff81168114610a4757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610a7757600080fd5b610a8083610944565b946020939093013593505050565b600080835481600182811c915080831680610aaa57607f831692505b6020808410821415610aca57634e487b7160e01b86526022600452602486fd5b818015610ade5760018114610aef57610b1c565b60ff19861689528489019650610b1c565b60008a81526020902060005b86811015610b145781548b820152908501908301610afb565b505084890196505b509498975050505050505050565b600060208083528351808285015260005b81811015610b5757858101830151858201604001528201610b3b565b81811115610b69576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610b9257610b92610be9565b500190565b600082821015610ba957610ba9610be9565b500390565b600181811c90821680610bc257607f821691505b60208210811415610be357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220104300e6fcdf7a07aca62ff135a310fb28e65ee570e2f4f394b53d22673564db64736f6c63430008070033a2646970667358221220acefb9e58147ac84a4ce11f111d5ef5e9e35aa4595a05eb436ad43ce9f0cd97464736f6c63430008070033" . parse () . expect ("invalid bytecode")
    });
    #[derive(Clone)]
    pub struct MapleLoanInternals_AcceptNewTermsTests<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for MapleLoanInternals_AcceptNewTermsTests<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug
        for MapleLoanInternals_AcceptNewTermsTests<M>
    {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(MapleLoanInternals_AcceptNewTermsTests))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> MapleLoanInternals_AcceptNewTermsTests<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                MAPLELOANINTERNALS_ACCEPTNEWTERMSTESTS_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                MAPLELOANINTERNALS_ACCEPTNEWTERMSTESTS_ABI.clone(),
                MAPLELOANINTERNALS_ACCEPTNEWTERMSTESTS_BYTECODE
                    .clone()
                    .into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms` (0x3e941839) function"]
        pub fn test_accept_new_terms(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([62, 148, 24, 57], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_afterDeadline` (0xb07935e1) function"]
        pub fn test_accept_new_terms_after_deadline(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([176, 121, 53, 225], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_callFailed` (0x53e2db10) function"]
        pub fn test_accept_new_terms_call_failed(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([83, 226, 219, 16], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_commitmentMismatch_emptyCallsArray` (0x8757d396) function"]
        pub fn test_accept_new_terms_commitment_mismatch_empty_calls_array(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([135, 87, 211, 150], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_commitmentMismatch_mismatchedCalls` (0xe18e34e9) function"]
        pub fn test_accept_new_terms_commitment_mismatch_mismatched_calls(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([225, 142, 52, 233], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_commitmentMismatch_mismatchedDeadline` (0x9aa8b43a) function"]
        pub fn test_accept_new_terms_commitment_mismatch_mismatched_deadline(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([154, 168, 180, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_commitmentMismatch_mismatchedRefinancer` (0x34234e92) function"]
        pub fn test_accept_new_terms_commitment_mismatch_mismatched_refinancer(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([52, 35, 78, 146], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_fuzzEstablishmentFees` (0x94a038ef) function"]
        pub fn test_accept_new_terms_fuzz_establishment_fees(
            &self,
            principal: ethers::core::types::U256,
            delegate_fee: ethers::core::types::U256,
            treasury_fee: ethers::core::types::U256,
            global_investor_fee: ethers::core::types::U256,
            global_treasury_fee: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [148, 160, 56, 239],
                    (
                        principal,
                        delegate_fee,
                        treasury_fee,
                        global_investor_fee,
                        global_treasury_fee,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_insufficientCollateral` (0xf52c64a4) function"]
        pub fn test_accept_new_terms_insufficient_collateral(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([245, 44, 100, 164], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `test_acceptNewTerms_invalidRefinancer` (0x1992e79a) function"]
        pub fn test_accept_new_terms_invalid_refinancer(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([25, 146, 231, 154], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(
            &self,
        ) -> ethers::contract::builders::Event<M, MapleLoanInternals_AcceptNewTermsTestsEvents>
        {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for MapleLoanInternals_AcceptNewTermsTests<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanInternals_AcceptNewTermsTestsEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for MapleLoanInternals_AcceptNewTermsTestsEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedAddressFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedBytesFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedBytes32Filter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedDecimalIntFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedDecimalUintFilter(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedIntFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedStringFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedUintFilter(decoded),
                );
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogUintFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsEvents::LogsFilter(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for MapleLoanInternals_AcceptNewTermsTestsEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogFilter(element) => element.fmt(f),
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogAddressFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogBytesFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogBytes32Filter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedAddressFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedBytesFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedBytes32Filter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedDecimalIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedDecimalUintFilter(
                    element,
                ) => element.fmt(f),
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedIntFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedStringFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogNamedUintFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogStringFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogUintFilter(element) => {
                    element.fmt(f)
                }
                MapleLoanInternals_AcceptNewTermsTestsEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms`function with signature `test_acceptNewTerms()` and selector `[62, 148, 24, 57]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "test_acceptNewTerms", abi = "test_acceptNewTerms()")]
    pub struct TestAcceptNewTermsCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_afterDeadline`function with signature `test_acceptNewTerms_afterDeadline()` and selector `[176, 121, 53, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_afterDeadline",
        abi = "test_acceptNewTerms_afterDeadline()"
    )]
    pub struct TestAcceptNewTermsAfterDeadlineCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_callFailed`function with signature `test_acceptNewTerms_callFailed()` and selector `[83, 226, 219, 16]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_callFailed",
        abi = "test_acceptNewTerms_callFailed()"
    )]
    pub struct TestAcceptNewTermsCallFailedCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_commitmentMismatch_emptyCallsArray`function with signature `test_acceptNewTerms_commitmentMismatch_emptyCallsArray()` and selector `[135, 87, 211, 150]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_commitmentMismatch_emptyCallsArray",
        abi = "test_acceptNewTerms_commitmentMismatch_emptyCallsArray()"
    )]
    pub struct TestAcceptNewTermsCommitmentMismatchEmptyCallsArrayCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_commitmentMismatch_mismatchedCalls`function with signature `test_acceptNewTerms_commitmentMismatch_mismatchedCalls()` and selector `[225, 142, 52, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_commitmentMismatch_mismatchedCalls",
        abi = "test_acceptNewTerms_commitmentMismatch_mismatchedCalls()"
    )]
    pub struct TestAcceptNewTermsCommitmentMismatchMismatchedCallsCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_commitmentMismatch_mismatchedDeadline`function with signature `test_acceptNewTerms_commitmentMismatch_mismatchedDeadline()` and selector `[154, 168, 180, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_commitmentMismatch_mismatchedDeadline",
        abi = "test_acceptNewTerms_commitmentMismatch_mismatchedDeadline()"
    )]
    pub struct TestAcceptNewTermsCommitmentMismatchMismatchedDeadlineCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_commitmentMismatch_mismatchedRefinancer`function with signature `test_acceptNewTerms_commitmentMismatch_mismatchedRefinancer()` and selector `[52, 35, 78, 146]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_commitmentMismatch_mismatchedRefinancer",
        abi = "test_acceptNewTerms_commitmentMismatch_mismatchedRefinancer()"
    )]
    pub struct TestAcceptNewTermsCommitmentMismatchMismatchedRefinancerCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_fuzzEstablishmentFees`function with signature `test_acceptNewTerms_fuzzEstablishmentFees(uint256,uint256,uint256,uint256,uint256)` and selector `[148, 160, 56, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_fuzzEstablishmentFees",
        abi = "test_acceptNewTerms_fuzzEstablishmentFees(uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct TestAcceptNewTermsFuzzEstablishmentFeesCall {
        pub principal: ethers::core::types::U256,
        pub delegate_fee: ethers::core::types::U256,
        pub treasury_fee: ethers::core::types::U256,
        pub global_investor_fee: ethers::core::types::U256,
        pub global_treasury_fee: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_insufficientCollateral`function with signature `test_acceptNewTerms_insufficientCollateral()` and selector `[245, 44, 100, 164]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_insufficientCollateral",
        abi = "test_acceptNewTerms_insufficientCollateral()"
    )]
    pub struct TestAcceptNewTermsInsufficientCollateralCall;
    #[doc = "Container type for all input parameters for the `test_acceptNewTerms_invalidRefinancer`function with signature `test_acceptNewTerms_invalidRefinancer()` and selector `[25, 146, 231, 154]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "test_acceptNewTerms_invalidRefinancer",
        abi = "test_acceptNewTerms_invalidRefinancer()"
    )]
    pub struct TestAcceptNewTermsInvalidRefinancerCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MapleLoanInternals_AcceptNewTermsTestsCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestAcceptNewTerms(TestAcceptNewTermsCall),
        TestAcceptNewTermsAfterDeadline(TestAcceptNewTermsAfterDeadlineCall),
        TestAcceptNewTermsCallFailed(TestAcceptNewTermsCallFailedCall),
        TestAcceptNewTermsCommitmentMismatchEmptyCallsArray(
            TestAcceptNewTermsCommitmentMismatchEmptyCallsArrayCall,
        ),
        TestAcceptNewTermsCommitmentMismatchMismatchedCalls(
            TestAcceptNewTermsCommitmentMismatchMismatchedCallsCall,
        ),
        TestAcceptNewTermsCommitmentMismatchMismatchedDeadline(
            TestAcceptNewTermsCommitmentMismatchMismatchedDeadlineCall,
        ),
        TestAcceptNewTermsCommitmentMismatchMismatchedRefinancer(
            TestAcceptNewTermsCommitmentMismatchMismatchedRefinancerCall,
        ),
        TestAcceptNewTermsFuzzEstablishmentFees(TestAcceptNewTermsFuzzEstablishmentFeesCall),
        TestAcceptNewTermsInsufficientCollateral(TestAcceptNewTermsInsufficientCollateralCall),
        TestAcceptNewTermsInvalidRefinancer(TestAcceptNewTermsInvalidRefinancerCall),
    }
    impl ethers::core::abi::AbiDecode for MapleLoanInternals_AcceptNewTermsTestsCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MapleLoanInternals_AcceptNewTermsTestsCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestAcceptNewTermsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTerms(decoded),
                );
            }
            if let Ok(decoded) =
                <TestAcceptNewTermsAfterDeadlineCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTermsAfterDeadline(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) =
                <TestAcceptNewTermsCallFailedCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTermsCallFailed(
                        decoded,
                    ),
                );
            }
            if let Ok (decoded) = < TestAcceptNewTermsCommitmentMismatchEmptyCallsArrayCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchEmptyCallsArray (decoded)) }
            if let Ok (decoded) = < TestAcceptNewTermsCommitmentMismatchMismatchedCallsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedCalls (decoded)) }
            if let Ok (decoded) = < TestAcceptNewTermsCommitmentMismatchMismatchedDeadlineCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedDeadline (decoded)) }
            if let Ok (decoded) = < TestAcceptNewTermsCommitmentMismatchMismatchedRefinancerCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedRefinancer (decoded)) }
            if let Ok (decoded) = < TestAcceptNewTermsFuzzEstablishmentFeesCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsFuzzEstablishmentFees (decoded)) }
            if let Ok (decoded) = < TestAcceptNewTermsInsufficientCollateralCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsInsufficientCollateral (decoded)) }
            if let Ok(decoded) =
                <TestAcceptNewTermsInvalidRefinancerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok (MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsInvalidRefinancer (decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for MapleLoanInternals_AcceptNewTermsTestsCalls {
        fn encode(self) -> Vec<u8> {
            match self { MapleLoanInternals_AcceptNewTermsTestsCalls :: IsTest (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: Failed (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: SetUp (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTerms (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsAfterDeadline (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCallFailed (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchEmptyCallsArray (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedCalls (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedDeadline (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedRefinancer (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsFuzzEstablishmentFees (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsInsufficientCollateral (element) => element . encode () , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsInvalidRefinancer (element) => element . encode () }
        }
    }
    impl ::std::fmt::Display for MapleLoanInternals_AcceptNewTermsTestsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self { MapleLoanInternals_AcceptNewTermsTestsCalls :: IsTest (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: Failed (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: SetUp (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTerms (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsAfterDeadline (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCallFailed (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchEmptyCallsArray (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedCalls (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedDeadline (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedRefinancer (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsFuzzEstablishmentFees (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsInsufficientCollateral (element) => element . fmt (f) , MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsInvalidRefinancer (element) => element . fmt (f) }
        }
    }
    impl ::std::convert::From<IsTestCall> for MapleLoanInternals_AcceptNewTermsTestsCalls {
        fn from(var: IsTestCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for MapleLoanInternals_AcceptNewTermsTestsCalls {
        fn from(var: FailedCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for MapleLoanInternals_AcceptNewTermsTestsCalls {
        fn from(var: SetUpCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsCall> for MapleLoanInternals_AcceptNewTermsTestsCalls {
        fn from(var: TestAcceptNewTermsCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTerms(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsAfterDeadlineCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsAfterDeadlineCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTermsAfterDeadline(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsCallFailedCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsCallFailedCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTermsCallFailed(var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsCommitmentMismatchEmptyCallsArrayCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsCommitmentMismatchEmptyCallsArrayCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchEmptyCallsArray (var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsCommitmentMismatchMismatchedCallsCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsCommitmentMismatchMismatchedCallsCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedCalls (var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsCommitmentMismatchMismatchedDeadlineCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsCommitmentMismatchMismatchedDeadlineCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedDeadline (var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsCommitmentMismatchMismatchedRefinancerCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsCommitmentMismatchMismatchedRefinancerCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls :: TestAcceptNewTermsCommitmentMismatchMismatchedRefinancer (var)
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsFuzzEstablishmentFeesCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsFuzzEstablishmentFeesCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTermsFuzzEstablishmentFees(
                var,
            )
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsInsufficientCollateralCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsInsufficientCollateralCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTermsInsufficientCollateral(
                var,
            )
        }
    }
    impl ::std::convert::From<TestAcceptNewTermsInvalidRefinancerCall>
        for MapleLoanInternals_AcceptNewTermsTestsCalls
    {
        fn from(var: TestAcceptNewTermsInvalidRefinancerCall) -> Self {
            MapleLoanInternals_AcceptNewTermsTestsCalls::TestAcceptNewTermsInvalidRefinancer(var)
        }
    }
}
