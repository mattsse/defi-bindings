pub use comptroller_g1::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod comptroller_g1 {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "ComptrollerG1 was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static COMPTROLLERG1_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Failure\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MarketEntered\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MarketExited\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MarketListed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewCloseFactor\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewCollateralFactor\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewLiquidationIncentive\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldMaxAssets\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"newMaxAssets\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewMaxAssets\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewPriceOracle\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract PriceOracle\",\"name\":\"_oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_closeFactorMantissa\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_maxAssets\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"reinitializing\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"_become\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxAssets\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"_setMaxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"borrowVerify\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"liquidateBorrowVerify\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mintVerify\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeemVerify\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repayBorrowVerify\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"seizeVerify\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferVerify\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static COMPTROLLERG1_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "" . parse () . expect ("invalid bytecode")
        });
    pub struct ComptrollerG1<M>(ethers::contract::Contract<M>);
    impl<M> Clone for ComptrollerG1<M> {
        fn clone(&self) -> Self {
            ComptrollerG1(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for ComptrollerG1<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for ComptrollerG1<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(ComptrollerG1))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> ComptrollerG1<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), COMPTROLLERG1_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                COMPTROLLERG1_ABI.clone(),
                COMPTROLLERG1_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `_become` (0x32000e00) function"]
        pub fn become_(
            &self,
            unitroller: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            close_factor_mantissa: ethers::core::types::U256,
            max_assets: ethers::core::types::U256,
            reinitializing: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [50, 0, 14, 0],
                    (
                        unitroller,
                        oracle,
                        close_factor_mantissa,
                        max_assets,
                        reinitializing,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_setCloseFactor` (0x317b0b77) function"]
        pub fn set_close_factor(
            &self,
            new_close_factor_mantissa: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([49, 123, 11, 119], new_close_factor_mantissa)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_setCollateralFactor` (0xe4028eee) function"]
        pub fn set_collateral_factor(
            &self,
            c_token: ethers::core::types::Address,
            new_collateral_factor_mantissa: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [228, 2, 142, 238],
                    (c_token, new_collateral_factor_mantissa),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_setLiquidationIncentive` (0x4fd42e17) function"]
        pub fn set_liquidation_incentive(
            &self,
            new_liquidation_incentive_mantissa: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([79, 212, 46, 23], new_liquidation_incentive_mantissa)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_setMaxAssets` (0xd9226ced) function"]
        pub fn set_max_assets(
            &self,
            new_max_assets: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([217, 34, 108, 237], new_max_assets)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_setPriceOracle` (0x55ee1fe1) function"]
        pub fn set_price_oracle(
            &self,
            new_oracle: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([85, 238, 31, 225], new_oracle)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_supportMarket` (0xa76b3fda) function"]
        pub fn support_market(
            &self,
            c_token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([167, 107, 63, 218], c_token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `accountAssets` (0xdce15449) function"]
        pub fn account_assets(
            &self,
            p0: ethers::core::types::Address,
            p1: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([220, 225, 84, 73], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `admin` (0xf851a440) function"]
        pub fn admin(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([248, 81, 164, 64], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `borrowAllowed` (0xda3d454c) function"]
        pub fn borrow_allowed(
            &self,
            c_token: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            borrow_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([218, 61, 69, 76], (c_token, borrower, borrow_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `borrowVerify` (0x5c778605) function"]
        pub fn borrow_verify(
            &self,
            c_token: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            borrow_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([92, 119, 134, 5], (c_token, borrower, borrow_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `checkMembership` (0x929fe9a1) function"]
        pub fn check_membership(
            &self,
            account: ethers::core::types::Address,
            c_token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([146, 159, 233, 161], (account, c_token))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `closeFactorMantissa` (0xe8755446) function"]
        pub fn close_factor_mantissa(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([232, 117, 84, 70], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `comptrollerImplementation` (0xbb82aa5e) function"]
        pub fn comptroller_implementation(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([187, 130, 170, 94], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `enterMarkets` (0xc2998238) function"]
        pub fn enter_markets(
            &self,
            c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<ethers::core::types::U256>>
        {
            self.0
                .method_hash([194, 153, 130, 56], c_tokens)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `exitMarket` (0xede4edd0) function"]
        pub fn exit_market(
            &self,
            c_token_address: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([237, 228, 237, 208], c_token_address)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getAccountLiquidity` (0x5ec88c79) function"]
        pub fn get_account_liquidity(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([94, 200, 140, 121], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getAssetsIn` (0xabfceffc) function"]
        pub fn get_assets_in(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<ethers::core::types::Address>,
        > {
            self.0
                .method_hash([171, 252, 239, 252], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isComptroller` (0x007e3dd2) function"]
        pub fn is_comptroller(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([0, 126, 61, 210], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `liquidateBorrowAllowed` (0x5fc7e71e) function"]
        pub fn liquidate_borrow_allowed(
            &self,
            c_token_borrowed: ethers::core::types::Address,
            c_token_collateral: ethers::core::types::Address,
            liquidator: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            repay_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [95, 199, 231, 30],
                    (
                        c_token_borrowed,
                        c_token_collateral,
                        liquidator,
                        borrower,
                        repay_amount,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `liquidateBorrowVerify` (0x47ef3b3b) function"]
        pub fn liquidate_borrow_verify(
            &self,
            c_token_borrowed: ethers::core::types::Address,
            c_token_collateral: ethers::core::types::Address,
            liquidator: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            repay_amount: ethers::core::types::U256,
            seize_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [71, 239, 59, 59],
                    (
                        c_token_borrowed,
                        c_token_collateral,
                        liquidator,
                        borrower,
                        repay_amount,
                        seize_tokens,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `liquidateCalculateSeizeTokens` (0xc488847b) function"]
        pub fn liquidate_calculate_seize_tokens(
            &self,
            c_token_borrowed: ethers::core::types::Address,
            c_token_collateral: ethers::core::types::Address,
            repay_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::U256, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [196, 136, 132, 123],
                    (c_token_borrowed, c_token_collateral, repay_amount),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `liquidationIncentiveMantissa` (0x4ada90af) function"]
        pub fn liquidation_incentive_mantissa(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([74, 218, 144, 175], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `markets` (0x8e8f294b) function"]
        pub fn markets(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, (bool, ethers::core::types::U256)>
        {
            self.0
                .method_hash([142, 143, 41, 75], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `maxAssets` (0x94b2294b) function"]
        pub fn max_assets(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([148, 178, 41, 75], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `mintAllowed` (0x4ef4c3e1) function"]
        pub fn mint_allowed(
            &self,
            c_token: ethers::core::types::Address,
            minter: ethers::core::types::Address,
            mint_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([78, 244, 195, 225], (c_token, minter, mint_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `mintVerify` (0x41c728b9) function"]
        pub fn mint_verify(
            &self,
            c_token: ethers::core::types::Address,
            minter: ethers::core::types::Address,
            mint_amount: ethers::core::types::U256,
            mint_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [65, 199, 40, 185],
                    (c_token, minter, mint_amount, mint_tokens),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `oracle` (0x7dc0d1d0) function"]
        pub fn oracle(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([125, 192, 209, 208], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pendingAdmin` (0x26782247) function"]
        pub fn pending_admin(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([38, 120, 34, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pendingComptrollerImplementation` (0xdcfbc0c7) function"]
        pub fn pending_comptroller_implementation(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([220, 251, 192, 199], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `redeemAllowed` (0xeabe7d91) function"]
        pub fn redeem_allowed(
            &self,
            c_token: ethers::core::types::Address,
            redeemer: ethers::core::types::Address,
            redeem_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([234, 190, 125, 145], (c_token, redeemer, redeem_tokens))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `redeemVerify` (0x51dff989) function"]
        pub fn redeem_verify(
            &self,
            c_token: ethers::core::types::Address,
            redeemer: ethers::core::types::Address,
            redeem_amount: ethers::core::types::U256,
            redeem_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [81, 223, 249, 137],
                    (c_token, redeemer, redeem_amount, redeem_tokens),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `repayBorrowAllowed` (0x24008a62) function"]
        pub fn repay_borrow_allowed(
            &self,
            c_token: ethers::core::types::Address,
            payer: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            repay_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([36, 0, 138, 98], (c_token, payer, borrower, repay_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `repayBorrowVerify` (0x1ededc91) function"]
        pub fn repay_borrow_verify(
            &self,
            c_token: ethers::core::types::Address,
            payer: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            repay_amount: ethers::core::types::U256,
            borrower_index: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [30, 222, 220, 145],
                    (c_token, payer, borrower, repay_amount, borrower_index),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `seizeAllowed` (0xd02f7351) function"]
        pub fn seize_allowed(
            &self,
            c_token_collateral: ethers::core::types::Address,
            c_token_borrowed: ethers::core::types::Address,
            liquidator: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            seize_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [208, 47, 115, 81],
                    (
                        c_token_collateral,
                        c_token_borrowed,
                        liquidator,
                        borrower,
                        seize_tokens,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `seizeVerify` (0x6d35bf91) function"]
        pub fn seize_verify(
            &self,
            c_token_collateral: ethers::core::types::Address,
            c_token_borrowed: ethers::core::types::Address,
            liquidator: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            seize_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [109, 53, 191, 145],
                    (
                        c_token_collateral,
                        c_token_borrowed,
                        liquidator,
                        borrower,
                        seize_tokens,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferAllowed` (0xbdcdc258) function"]
        pub fn transfer_allowed(
            &self,
            c_token: ethers::core::types::Address,
            src: ethers::core::types::Address,
            dst: ethers::core::types::Address,
            transfer_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([189, 205, 194, 88], (c_token, src, dst, transfer_tokens))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferVerify` (0x6a56947e) function"]
        pub fn transfer_verify(
            &self,
            c_token: ethers::core::types::Address,
            src: ethers::core::types::Address,
            dst: ethers::core::types::Address,
            transfer_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([106, 86, 148, 126], (c_token, src, dst, transfer_tokens))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `Failure` event"]
        pub fn failure_filter(&self) -> ethers::contract::builders::Event<M, FailureFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `MarketEntered` event"]
        pub fn market_entered_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MarketEnteredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `MarketExited` event"]
        pub fn market_exited_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MarketExitedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `MarketListed` event"]
        pub fn market_listed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MarketListedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewCloseFactor` event"]
        pub fn new_close_factor_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewCloseFactorFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewCollateralFactor` event"]
        pub fn new_collateral_factor_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewCollateralFactorFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewLiquidationIncentive` event"]
        pub fn new_liquidation_incentive_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewLiquidationIncentiveFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewMaxAssets` event"]
        pub fn new_max_assets_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewMaxAssetsFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewPriceOracle` event"]
        pub fn new_price_oracle_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewPriceOracleFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, ComptrollerG1Events> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for ComptrollerG1<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Failure", abi = "Failure(uint256,uint256,uint256)")]
    pub struct FailureFilter {
        pub error: ethers::core::types::U256,
        pub info: ethers::core::types::U256,
        pub detail: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MarketEntered", abi = "MarketEntered(address,address)")]
    pub struct MarketEnteredFilter {
        pub c_token: ethers::core::types::Address,
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MarketExited", abi = "MarketExited(address,address)")]
    pub struct MarketExitedFilter {
        pub c_token: ethers::core::types::Address,
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MarketListed", abi = "MarketListed(address)")]
    pub struct MarketListedFilter {
        pub c_token: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "NewCloseFactor", abi = "NewCloseFactor(uint256,uint256)")]
    pub struct NewCloseFactorFilter {
        pub old_close_factor_mantissa: ethers::core::types::U256,
        pub new_close_factor_mantissa: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "NewCollateralFactor",
        abi = "NewCollateralFactor(address,uint256,uint256)"
    )]
    pub struct NewCollateralFactorFilter {
        pub c_token: ethers::core::types::Address,
        pub old_collateral_factor_mantissa: ethers::core::types::U256,
        pub new_collateral_factor_mantissa: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "NewLiquidationIncentive",
        abi = "NewLiquidationIncentive(uint256,uint256)"
    )]
    pub struct NewLiquidationIncentiveFilter {
        pub old_liquidation_incentive_mantissa: ethers::core::types::U256,
        pub new_liquidation_incentive_mantissa: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "NewMaxAssets", abi = "NewMaxAssets(uint256,uint256)")]
    pub struct NewMaxAssetsFilter {
        pub old_max_assets: ethers::core::types::U256,
        pub new_max_assets: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "NewPriceOracle", abi = "NewPriceOracle(address,address)")]
    pub struct NewPriceOracleFilter {
        pub old_price_oracle: ethers::core::types::Address,
        pub new_price_oracle: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ComptrollerG1Events {
        FailureFilter(FailureFilter),
        MarketEnteredFilter(MarketEnteredFilter),
        MarketExitedFilter(MarketExitedFilter),
        MarketListedFilter(MarketListedFilter),
        NewCloseFactorFilter(NewCloseFactorFilter),
        NewCollateralFactorFilter(NewCollateralFactorFilter),
        NewLiquidationIncentiveFilter(NewLiquidationIncentiveFilter),
        NewMaxAssetsFilter(NewMaxAssetsFilter),
        NewPriceOracleFilter(NewPriceOracleFilter),
    }
    impl ethers::contract::EthLogDecode for ComptrollerG1Events {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = FailureFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::FailureFilter(decoded));
            }
            if let Ok(decoded) = MarketEnteredFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::MarketEnteredFilter(decoded));
            }
            if let Ok(decoded) = MarketExitedFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::MarketExitedFilter(decoded));
            }
            if let Ok(decoded) = MarketListedFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::MarketListedFilter(decoded));
            }
            if let Ok(decoded) = NewCloseFactorFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::NewCloseFactorFilter(decoded));
            }
            if let Ok(decoded) = NewCollateralFactorFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::NewCollateralFactorFilter(decoded));
            }
            if let Ok(decoded) = NewLiquidationIncentiveFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::NewLiquidationIncentiveFilter(decoded));
            }
            if let Ok(decoded) = NewMaxAssetsFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::NewMaxAssetsFilter(decoded));
            }
            if let Ok(decoded) = NewPriceOracleFilter::decode_log(log) {
                return Ok(ComptrollerG1Events::NewPriceOracleFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for ComptrollerG1Events {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ComptrollerG1Events::FailureFilter(element) => element.fmt(f),
                ComptrollerG1Events::MarketEnteredFilter(element) => element.fmt(f),
                ComptrollerG1Events::MarketExitedFilter(element) => element.fmt(f),
                ComptrollerG1Events::MarketListedFilter(element) => element.fmt(f),
                ComptrollerG1Events::NewCloseFactorFilter(element) => element.fmt(f),
                ComptrollerG1Events::NewCollateralFactorFilter(element) => element.fmt(f),
                ComptrollerG1Events::NewLiquidationIncentiveFilter(element) => element.fmt(f),
                ComptrollerG1Events::NewMaxAssetsFilter(element) => element.fmt(f),
                ComptrollerG1Events::NewPriceOracleFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `_become` function with signature `_become(address,address,uint256,uint256,bool)` and selector `[50, 0, 14, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "_become",
        abi = "_become(address,address,uint256,uint256,bool)"
    )]
    pub struct BecomeCall {
        pub unitroller: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub close_factor_mantissa: ethers::core::types::U256,
        pub max_assets: ethers::core::types::U256,
        pub reinitializing: bool,
    }
    #[doc = "Container type for all input parameters for the `_setCloseFactor` function with signature `_setCloseFactor(uint256)` and selector `[49, 123, 11, 119]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_setCloseFactor", abi = "_setCloseFactor(uint256)")]
    pub struct SetCloseFactorCall {
        pub new_close_factor_mantissa: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `_setCollateralFactor` function with signature `_setCollateralFactor(address,uint256)` and selector `[228, 2, 142, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "_setCollateralFactor",
        abi = "_setCollateralFactor(address,uint256)"
    )]
    pub struct SetCollateralFactorCall {
        pub c_token: ethers::core::types::Address,
        pub new_collateral_factor_mantissa: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `_setLiquidationIncentive` function with signature `_setLiquidationIncentive(uint256)` and selector `[79, 212, 46, 23]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "_setLiquidationIncentive",
        abi = "_setLiquidationIncentive(uint256)"
    )]
    pub struct SetLiquidationIncentiveCall {
        pub new_liquidation_incentive_mantissa: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `_setMaxAssets` function with signature `_setMaxAssets(uint256)` and selector `[217, 34, 108, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_setMaxAssets", abi = "_setMaxAssets(uint256)")]
    pub struct SetMaxAssetsCall {
        pub new_max_assets: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `_setPriceOracle` function with signature `_setPriceOracle(address)` and selector `[85, 238, 31, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_setPriceOracle", abi = "_setPriceOracle(address)")]
    pub struct SetPriceOracleCall {
        pub new_oracle: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `_supportMarket` function with signature `_supportMarket(address)` and selector `[167, 107, 63, 218]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_supportMarket", abi = "_supportMarket(address)")]
    pub struct SupportMarketCall {
        pub c_token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `accountAssets` function with signature `accountAssets(address,uint256)` and selector `[220, 225, 84, 73]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "accountAssets", abi = "accountAssets(address,uint256)")]
    pub struct AccountAssetsCall(
        pub ethers::core::types::Address,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all input parameters for the `admin` function with signature `admin()` and selector `[248, 81, 164, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "admin", abi = "admin()")]
    pub struct AdminCall;
    #[doc = "Container type for all input parameters for the `borrowAllowed` function with signature `borrowAllowed(address,address,uint256)` and selector `[218, 61, 69, 76]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "borrowAllowed", abi = "borrowAllowed(address,address,uint256)")]
    pub struct BorrowAllowedCall {
        pub c_token: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub borrow_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `borrowVerify` function with signature `borrowVerify(address,address,uint256)` and selector `[92, 119, 134, 5]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "borrowVerify", abi = "borrowVerify(address,address,uint256)")]
    pub struct BorrowVerifyCall {
        pub c_token: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub borrow_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `checkMembership` function with signature `checkMembership(address,address)` and selector `[146, 159, 233, 161]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "checkMembership", abi = "checkMembership(address,address)")]
    pub struct CheckMembershipCall {
        pub account: ethers::core::types::Address,
        pub c_token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `closeFactorMantissa` function with signature `closeFactorMantissa()` and selector `[232, 117, 84, 70]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "closeFactorMantissa", abi = "closeFactorMantissa()")]
    pub struct CloseFactorMantissaCall;
    #[doc = "Container type for all input parameters for the `comptrollerImplementation` function with signature `comptrollerImplementation()` and selector `[187, 130, 170, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "comptrollerImplementation",
        abi = "comptrollerImplementation()"
    )]
    pub struct ComptrollerImplementationCall;
    #[doc = "Container type for all input parameters for the `enterMarkets` function with signature `enterMarkets(address[])` and selector `[194, 153, 130, 56]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "enterMarkets", abi = "enterMarkets(address[])")]
    pub struct EnterMarketsCall {
        pub c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
    }
    #[doc = "Container type for all input parameters for the `exitMarket` function with signature `exitMarket(address)` and selector `[237, 228, 237, 208]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "exitMarket", abi = "exitMarket(address)")]
    pub struct ExitMarketCall {
        pub c_token_address: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getAccountLiquidity` function with signature `getAccountLiquidity(address)` and selector `[94, 200, 140, 121]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getAccountLiquidity", abi = "getAccountLiquidity(address)")]
    pub struct GetAccountLiquidityCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getAssetsIn` function with signature `getAssetsIn(address)` and selector `[171, 252, 239, 252]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getAssetsIn", abi = "getAssetsIn(address)")]
    pub struct GetAssetsInCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `isComptroller` function with signature `isComptroller()` and selector `[0, 126, 61, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isComptroller", abi = "isComptroller()")]
    pub struct IsComptrollerCall;
    #[doc = "Container type for all input parameters for the `liquidateBorrowAllowed` function with signature `liquidateBorrowAllowed(address,address,address,address,uint256)` and selector `[95, 199, 231, 30]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "liquidateBorrowAllowed",
        abi = "liquidateBorrowAllowed(address,address,address,address,uint256)"
    )]
    pub struct LiquidateBorrowAllowedCall {
        pub c_token_borrowed: ethers::core::types::Address,
        pub c_token_collateral: ethers::core::types::Address,
        pub liquidator: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub repay_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `liquidateBorrowVerify` function with signature `liquidateBorrowVerify(address,address,address,address,uint256,uint256)` and selector `[71, 239, 59, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "liquidateBorrowVerify",
        abi = "liquidateBorrowVerify(address,address,address,address,uint256,uint256)"
    )]
    pub struct LiquidateBorrowVerifyCall {
        pub c_token_borrowed: ethers::core::types::Address,
        pub c_token_collateral: ethers::core::types::Address,
        pub liquidator: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub repay_amount: ethers::core::types::U256,
        pub seize_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `liquidateCalculateSeizeTokens` function with signature `liquidateCalculateSeizeTokens(address,address,uint256)` and selector `[196, 136, 132, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "liquidateCalculateSeizeTokens",
        abi = "liquidateCalculateSeizeTokens(address,address,uint256)"
    )]
    pub struct LiquidateCalculateSeizeTokensCall {
        pub c_token_borrowed: ethers::core::types::Address,
        pub c_token_collateral: ethers::core::types::Address,
        pub repay_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `liquidationIncentiveMantissa` function with signature `liquidationIncentiveMantissa()` and selector `[74, 218, 144, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "liquidationIncentiveMantissa",
        abi = "liquidationIncentiveMantissa()"
    )]
    pub struct LiquidationIncentiveMantissaCall;
    #[doc = "Container type for all input parameters for the `markets` function with signature `markets(address)` and selector `[142, 143, 41, 75]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "markets", abi = "markets(address)")]
    pub struct MarketsCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `maxAssets` function with signature `maxAssets()` and selector `[148, 178, 41, 75]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "maxAssets", abi = "maxAssets()")]
    pub struct MaxAssetsCall;
    #[doc = "Container type for all input parameters for the `mintAllowed` function with signature `mintAllowed(address,address,uint256)` and selector `[78, 244, 195, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "mintAllowed", abi = "mintAllowed(address,address,uint256)")]
    pub struct MintAllowedCall {
        pub c_token: ethers::core::types::Address,
        pub minter: ethers::core::types::Address,
        pub mint_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `mintVerify` function with signature `mintVerify(address,address,uint256,uint256)` and selector `[65, 199, 40, 185]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "mintVerify",
        abi = "mintVerify(address,address,uint256,uint256)"
    )]
    pub struct MintVerifyCall {
        pub c_token: ethers::core::types::Address,
        pub minter: ethers::core::types::Address,
        pub mint_amount: ethers::core::types::U256,
        pub mint_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `oracle` function with signature `oracle()` and selector `[125, 192, 209, 208]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "oracle", abi = "oracle()")]
    pub struct OracleCall;
    #[doc = "Container type for all input parameters for the `pendingAdmin` function with signature `pendingAdmin()` and selector `[38, 120, 34, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pendingAdmin", abi = "pendingAdmin()")]
    pub struct PendingAdminCall;
    #[doc = "Container type for all input parameters for the `pendingComptrollerImplementation` function with signature `pendingComptrollerImplementation()` and selector `[220, 251, 192, 199]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "pendingComptrollerImplementation",
        abi = "pendingComptrollerImplementation()"
    )]
    pub struct PendingComptrollerImplementationCall;
    #[doc = "Container type for all input parameters for the `redeemAllowed` function with signature `redeemAllowed(address,address,uint256)` and selector `[234, 190, 125, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "redeemAllowed", abi = "redeemAllowed(address,address,uint256)")]
    pub struct RedeemAllowedCall {
        pub c_token: ethers::core::types::Address,
        pub redeemer: ethers::core::types::Address,
        pub redeem_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `redeemVerify` function with signature `redeemVerify(address,address,uint256,uint256)` and selector `[81, 223, 249, 137]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "redeemVerify",
        abi = "redeemVerify(address,address,uint256,uint256)"
    )]
    pub struct RedeemVerifyCall {
        pub c_token: ethers::core::types::Address,
        pub redeemer: ethers::core::types::Address,
        pub redeem_amount: ethers::core::types::U256,
        pub redeem_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `repayBorrowAllowed` function with signature `repayBorrowAllowed(address,address,address,uint256)` and selector `[36, 0, 138, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "repayBorrowAllowed",
        abi = "repayBorrowAllowed(address,address,address,uint256)"
    )]
    pub struct RepayBorrowAllowedCall {
        pub c_token: ethers::core::types::Address,
        pub payer: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub repay_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `repayBorrowVerify` function with signature `repayBorrowVerify(address,address,address,uint256,uint256)` and selector `[30, 222, 220, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "repayBorrowVerify",
        abi = "repayBorrowVerify(address,address,address,uint256,uint256)"
    )]
    pub struct RepayBorrowVerifyCall {
        pub c_token: ethers::core::types::Address,
        pub payer: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub repay_amount: ethers::core::types::U256,
        pub borrower_index: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `seizeAllowed` function with signature `seizeAllowed(address,address,address,address,uint256)` and selector `[208, 47, 115, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "seizeAllowed",
        abi = "seizeAllowed(address,address,address,address,uint256)"
    )]
    pub struct SeizeAllowedCall {
        pub c_token_collateral: ethers::core::types::Address,
        pub c_token_borrowed: ethers::core::types::Address,
        pub liquidator: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub seize_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `seizeVerify` function with signature `seizeVerify(address,address,address,address,uint256)` and selector `[109, 53, 191, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "seizeVerify",
        abi = "seizeVerify(address,address,address,address,uint256)"
    )]
    pub struct SeizeVerifyCall {
        pub c_token_collateral: ethers::core::types::Address,
        pub c_token_borrowed: ethers::core::types::Address,
        pub liquidator: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub seize_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferAllowed` function with signature `transferAllowed(address,address,address,uint256)` and selector `[189, 205, 194, 88]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "transferAllowed",
        abi = "transferAllowed(address,address,address,uint256)"
    )]
    pub struct TransferAllowedCall {
        pub c_token: ethers::core::types::Address,
        pub src: ethers::core::types::Address,
        pub dst: ethers::core::types::Address,
        pub transfer_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferVerify` function with signature `transferVerify(address,address,address,uint256)` and selector `[106, 86, 148, 126]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "transferVerify",
        abi = "transferVerify(address,address,address,uint256)"
    )]
    pub struct TransferVerifyCall {
        pub c_token: ethers::core::types::Address,
        pub src: ethers::core::types::Address,
        pub dst: ethers::core::types::Address,
        pub transfer_tokens: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ComptrollerG1Calls {
        Become(BecomeCall),
        SetCloseFactor(SetCloseFactorCall),
        SetCollateralFactor(SetCollateralFactorCall),
        SetLiquidationIncentive(SetLiquidationIncentiveCall),
        SetMaxAssets(SetMaxAssetsCall),
        SetPriceOracle(SetPriceOracleCall),
        SupportMarket(SupportMarketCall),
        AccountAssets(AccountAssetsCall),
        Admin(AdminCall),
        BorrowAllowed(BorrowAllowedCall),
        BorrowVerify(BorrowVerifyCall),
        CheckMembership(CheckMembershipCall),
        CloseFactorMantissa(CloseFactorMantissaCall),
        ComptrollerImplementation(ComptrollerImplementationCall),
        EnterMarkets(EnterMarketsCall),
        ExitMarket(ExitMarketCall),
        GetAccountLiquidity(GetAccountLiquidityCall),
        GetAssetsIn(GetAssetsInCall),
        IsComptroller(IsComptrollerCall),
        LiquidateBorrowAllowed(LiquidateBorrowAllowedCall),
        LiquidateBorrowVerify(LiquidateBorrowVerifyCall),
        LiquidateCalculateSeizeTokens(LiquidateCalculateSeizeTokensCall),
        LiquidationIncentiveMantissa(LiquidationIncentiveMantissaCall),
        Markets(MarketsCall),
        MaxAssets(MaxAssetsCall),
        MintAllowed(MintAllowedCall),
        MintVerify(MintVerifyCall),
        Oracle(OracleCall),
        PendingAdmin(PendingAdminCall),
        PendingComptrollerImplementation(PendingComptrollerImplementationCall),
        RedeemAllowed(RedeemAllowedCall),
        RedeemVerify(RedeemVerifyCall),
        RepayBorrowAllowed(RepayBorrowAllowedCall),
        RepayBorrowVerify(RepayBorrowVerifyCall),
        SeizeAllowed(SeizeAllowedCall),
        SeizeVerify(SeizeVerifyCall),
        TransferAllowed(TransferAllowedCall),
        TransferVerify(TransferVerifyCall),
    }
    impl ethers::core::abi::AbiDecode for ComptrollerG1Calls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <BecomeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::Become(decoded));
            }
            if let Ok(decoded) =
                <SetCloseFactorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SetCloseFactor(decoded));
            }
            if let Ok(decoded) =
                <SetCollateralFactorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SetCollateralFactor(decoded));
            }
            if let Ok(decoded) =
                <SetLiquidationIncentiveCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SetLiquidationIncentive(decoded));
            }
            if let Ok(decoded) =
                <SetMaxAssetsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SetMaxAssets(decoded));
            }
            if let Ok(decoded) =
                <SetPriceOracleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SetPriceOracle(decoded));
            }
            if let Ok(decoded) =
                <SupportMarketCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SupportMarket(decoded));
            }
            if let Ok(decoded) =
                <AccountAssetsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::AccountAssets(decoded));
            }
            if let Ok(decoded) = <AdminCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::Admin(decoded));
            }
            if let Ok(decoded) =
                <BorrowAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::BorrowAllowed(decoded));
            }
            if let Ok(decoded) =
                <BorrowVerifyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::BorrowVerify(decoded));
            }
            if let Ok(decoded) =
                <CheckMembershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::CheckMembership(decoded));
            }
            if let Ok(decoded) =
                <CloseFactorMantissaCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::CloseFactorMantissa(decoded));
            }
            if let Ok(decoded) =
                <ComptrollerImplementationCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ComptrollerG1Calls::ComptrollerImplementation(decoded));
            }
            if let Ok(decoded) =
                <EnterMarketsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::EnterMarkets(decoded));
            }
            if let Ok(decoded) =
                <ExitMarketCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::ExitMarket(decoded));
            }
            if let Ok(decoded) =
                <GetAccountLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::GetAccountLiquidity(decoded));
            }
            if let Ok(decoded) =
                <GetAssetsInCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::GetAssetsIn(decoded));
            }
            if let Ok(decoded) =
                <IsComptrollerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::IsComptroller(decoded));
            }
            if let Ok(decoded) =
                <LiquidateBorrowAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::LiquidateBorrowAllowed(decoded));
            }
            if let Ok(decoded) =
                <LiquidateBorrowVerifyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::LiquidateBorrowVerify(decoded));
            }
            if let Ok(decoded) =
                <LiquidateCalculateSeizeTokensCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ComptrollerG1Calls::LiquidateCalculateSeizeTokens(decoded));
            }
            if let Ok(decoded) =
                <LiquidationIncentiveMantissaCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ComptrollerG1Calls::LiquidationIncentiveMantissa(decoded));
            }
            if let Ok(decoded) =
                <MarketsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::Markets(decoded));
            }
            if let Ok(decoded) =
                <MaxAssetsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::MaxAssets(decoded));
            }
            if let Ok(decoded) =
                <MintAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::MintAllowed(decoded));
            }
            if let Ok(decoded) =
                <MintVerifyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::MintVerify(decoded));
            }
            if let Ok(decoded) = <OracleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::Oracle(decoded));
            }
            if let Ok(decoded) =
                <PendingAdminCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::PendingAdmin(decoded));
            }
            if let Ok(decoded) =
                <PendingComptrollerImplementationCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ComptrollerG1Calls::PendingComptrollerImplementation(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <RedeemAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::RedeemAllowed(decoded));
            }
            if let Ok(decoded) =
                <RedeemVerifyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::RedeemVerify(decoded));
            }
            if let Ok(decoded) =
                <RepayBorrowAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::RepayBorrowAllowed(decoded));
            }
            if let Ok(decoded) =
                <RepayBorrowVerifyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::RepayBorrowVerify(decoded));
            }
            if let Ok(decoded) =
                <SeizeAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SeizeAllowed(decoded));
            }
            if let Ok(decoded) =
                <SeizeVerifyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::SeizeVerify(decoded));
            }
            if let Ok(decoded) =
                <TransferAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::TransferAllowed(decoded));
            }
            if let Ok(decoded) =
                <TransferVerifyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ComptrollerG1Calls::TransferVerify(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for ComptrollerG1Calls {
        fn encode(self) -> Vec<u8> {
            match self {
                ComptrollerG1Calls::Become(element) => element.encode(),
                ComptrollerG1Calls::SetCloseFactor(element) => element.encode(),
                ComptrollerG1Calls::SetCollateralFactor(element) => element.encode(),
                ComptrollerG1Calls::SetLiquidationIncentive(element) => element.encode(),
                ComptrollerG1Calls::SetMaxAssets(element) => element.encode(),
                ComptrollerG1Calls::SetPriceOracle(element) => element.encode(),
                ComptrollerG1Calls::SupportMarket(element) => element.encode(),
                ComptrollerG1Calls::AccountAssets(element) => element.encode(),
                ComptrollerG1Calls::Admin(element) => element.encode(),
                ComptrollerG1Calls::BorrowAllowed(element) => element.encode(),
                ComptrollerG1Calls::BorrowVerify(element) => element.encode(),
                ComptrollerG1Calls::CheckMembership(element) => element.encode(),
                ComptrollerG1Calls::CloseFactorMantissa(element) => element.encode(),
                ComptrollerG1Calls::ComptrollerImplementation(element) => element.encode(),
                ComptrollerG1Calls::EnterMarkets(element) => element.encode(),
                ComptrollerG1Calls::ExitMarket(element) => element.encode(),
                ComptrollerG1Calls::GetAccountLiquidity(element) => element.encode(),
                ComptrollerG1Calls::GetAssetsIn(element) => element.encode(),
                ComptrollerG1Calls::IsComptroller(element) => element.encode(),
                ComptrollerG1Calls::LiquidateBorrowAllowed(element) => element.encode(),
                ComptrollerG1Calls::LiquidateBorrowVerify(element) => element.encode(),
                ComptrollerG1Calls::LiquidateCalculateSeizeTokens(element) => element.encode(),
                ComptrollerG1Calls::LiquidationIncentiveMantissa(element) => element.encode(),
                ComptrollerG1Calls::Markets(element) => element.encode(),
                ComptrollerG1Calls::MaxAssets(element) => element.encode(),
                ComptrollerG1Calls::MintAllowed(element) => element.encode(),
                ComptrollerG1Calls::MintVerify(element) => element.encode(),
                ComptrollerG1Calls::Oracle(element) => element.encode(),
                ComptrollerG1Calls::PendingAdmin(element) => element.encode(),
                ComptrollerG1Calls::PendingComptrollerImplementation(element) => element.encode(),
                ComptrollerG1Calls::RedeemAllowed(element) => element.encode(),
                ComptrollerG1Calls::RedeemVerify(element) => element.encode(),
                ComptrollerG1Calls::RepayBorrowAllowed(element) => element.encode(),
                ComptrollerG1Calls::RepayBorrowVerify(element) => element.encode(),
                ComptrollerG1Calls::SeizeAllowed(element) => element.encode(),
                ComptrollerG1Calls::SeizeVerify(element) => element.encode(),
                ComptrollerG1Calls::TransferAllowed(element) => element.encode(),
                ComptrollerG1Calls::TransferVerify(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for ComptrollerG1Calls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ComptrollerG1Calls::Become(element) => element.fmt(f),
                ComptrollerG1Calls::SetCloseFactor(element) => element.fmt(f),
                ComptrollerG1Calls::SetCollateralFactor(element) => element.fmt(f),
                ComptrollerG1Calls::SetLiquidationIncentive(element) => element.fmt(f),
                ComptrollerG1Calls::SetMaxAssets(element) => element.fmt(f),
                ComptrollerG1Calls::SetPriceOracle(element) => element.fmt(f),
                ComptrollerG1Calls::SupportMarket(element) => element.fmt(f),
                ComptrollerG1Calls::AccountAssets(element) => element.fmt(f),
                ComptrollerG1Calls::Admin(element) => element.fmt(f),
                ComptrollerG1Calls::BorrowAllowed(element) => element.fmt(f),
                ComptrollerG1Calls::BorrowVerify(element) => element.fmt(f),
                ComptrollerG1Calls::CheckMembership(element) => element.fmt(f),
                ComptrollerG1Calls::CloseFactorMantissa(element) => element.fmt(f),
                ComptrollerG1Calls::ComptrollerImplementation(element) => element.fmt(f),
                ComptrollerG1Calls::EnterMarkets(element) => element.fmt(f),
                ComptrollerG1Calls::ExitMarket(element) => element.fmt(f),
                ComptrollerG1Calls::GetAccountLiquidity(element) => element.fmt(f),
                ComptrollerG1Calls::GetAssetsIn(element) => element.fmt(f),
                ComptrollerG1Calls::IsComptroller(element) => element.fmt(f),
                ComptrollerG1Calls::LiquidateBorrowAllowed(element) => element.fmt(f),
                ComptrollerG1Calls::LiquidateBorrowVerify(element) => element.fmt(f),
                ComptrollerG1Calls::LiquidateCalculateSeizeTokens(element) => element.fmt(f),
                ComptrollerG1Calls::LiquidationIncentiveMantissa(element) => element.fmt(f),
                ComptrollerG1Calls::Markets(element) => element.fmt(f),
                ComptrollerG1Calls::MaxAssets(element) => element.fmt(f),
                ComptrollerG1Calls::MintAllowed(element) => element.fmt(f),
                ComptrollerG1Calls::MintVerify(element) => element.fmt(f),
                ComptrollerG1Calls::Oracle(element) => element.fmt(f),
                ComptrollerG1Calls::PendingAdmin(element) => element.fmt(f),
                ComptrollerG1Calls::PendingComptrollerImplementation(element) => element.fmt(f),
                ComptrollerG1Calls::RedeemAllowed(element) => element.fmt(f),
                ComptrollerG1Calls::RedeemVerify(element) => element.fmt(f),
                ComptrollerG1Calls::RepayBorrowAllowed(element) => element.fmt(f),
                ComptrollerG1Calls::RepayBorrowVerify(element) => element.fmt(f),
                ComptrollerG1Calls::SeizeAllowed(element) => element.fmt(f),
                ComptrollerG1Calls::SeizeVerify(element) => element.fmt(f),
                ComptrollerG1Calls::TransferAllowed(element) => element.fmt(f),
                ComptrollerG1Calls::TransferVerify(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<BecomeCall> for ComptrollerG1Calls {
        fn from(var: BecomeCall) -> Self {
            ComptrollerG1Calls::Become(var)
        }
    }
    impl ::std::convert::From<SetCloseFactorCall> for ComptrollerG1Calls {
        fn from(var: SetCloseFactorCall) -> Self {
            ComptrollerG1Calls::SetCloseFactor(var)
        }
    }
    impl ::std::convert::From<SetCollateralFactorCall> for ComptrollerG1Calls {
        fn from(var: SetCollateralFactorCall) -> Self {
            ComptrollerG1Calls::SetCollateralFactor(var)
        }
    }
    impl ::std::convert::From<SetLiquidationIncentiveCall> for ComptrollerG1Calls {
        fn from(var: SetLiquidationIncentiveCall) -> Self {
            ComptrollerG1Calls::SetLiquidationIncentive(var)
        }
    }
    impl ::std::convert::From<SetMaxAssetsCall> for ComptrollerG1Calls {
        fn from(var: SetMaxAssetsCall) -> Self {
            ComptrollerG1Calls::SetMaxAssets(var)
        }
    }
    impl ::std::convert::From<SetPriceOracleCall> for ComptrollerG1Calls {
        fn from(var: SetPriceOracleCall) -> Self {
            ComptrollerG1Calls::SetPriceOracle(var)
        }
    }
    impl ::std::convert::From<SupportMarketCall> for ComptrollerG1Calls {
        fn from(var: SupportMarketCall) -> Self {
            ComptrollerG1Calls::SupportMarket(var)
        }
    }
    impl ::std::convert::From<AccountAssetsCall> for ComptrollerG1Calls {
        fn from(var: AccountAssetsCall) -> Self {
            ComptrollerG1Calls::AccountAssets(var)
        }
    }
    impl ::std::convert::From<AdminCall> for ComptrollerG1Calls {
        fn from(var: AdminCall) -> Self {
            ComptrollerG1Calls::Admin(var)
        }
    }
    impl ::std::convert::From<BorrowAllowedCall> for ComptrollerG1Calls {
        fn from(var: BorrowAllowedCall) -> Self {
            ComptrollerG1Calls::BorrowAllowed(var)
        }
    }
    impl ::std::convert::From<BorrowVerifyCall> for ComptrollerG1Calls {
        fn from(var: BorrowVerifyCall) -> Self {
            ComptrollerG1Calls::BorrowVerify(var)
        }
    }
    impl ::std::convert::From<CheckMembershipCall> for ComptrollerG1Calls {
        fn from(var: CheckMembershipCall) -> Self {
            ComptrollerG1Calls::CheckMembership(var)
        }
    }
    impl ::std::convert::From<CloseFactorMantissaCall> for ComptrollerG1Calls {
        fn from(var: CloseFactorMantissaCall) -> Self {
            ComptrollerG1Calls::CloseFactorMantissa(var)
        }
    }
    impl ::std::convert::From<ComptrollerImplementationCall> for ComptrollerG1Calls {
        fn from(var: ComptrollerImplementationCall) -> Self {
            ComptrollerG1Calls::ComptrollerImplementation(var)
        }
    }
    impl ::std::convert::From<EnterMarketsCall> for ComptrollerG1Calls {
        fn from(var: EnterMarketsCall) -> Self {
            ComptrollerG1Calls::EnterMarkets(var)
        }
    }
    impl ::std::convert::From<ExitMarketCall> for ComptrollerG1Calls {
        fn from(var: ExitMarketCall) -> Self {
            ComptrollerG1Calls::ExitMarket(var)
        }
    }
    impl ::std::convert::From<GetAccountLiquidityCall> for ComptrollerG1Calls {
        fn from(var: GetAccountLiquidityCall) -> Self {
            ComptrollerG1Calls::GetAccountLiquidity(var)
        }
    }
    impl ::std::convert::From<GetAssetsInCall> for ComptrollerG1Calls {
        fn from(var: GetAssetsInCall) -> Self {
            ComptrollerG1Calls::GetAssetsIn(var)
        }
    }
    impl ::std::convert::From<IsComptrollerCall> for ComptrollerG1Calls {
        fn from(var: IsComptrollerCall) -> Self {
            ComptrollerG1Calls::IsComptroller(var)
        }
    }
    impl ::std::convert::From<LiquidateBorrowAllowedCall> for ComptrollerG1Calls {
        fn from(var: LiquidateBorrowAllowedCall) -> Self {
            ComptrollerG1Calls::LiquidateBorrowAllowed(var)
        }
    }
    impl ::std::convert::From<LiquidateBorrowVerifyCall> for ComptrollerG1Calls {
        fn from(var: LiquidateBorrowVerifyCall) -> Self {
            ComptrollerG1Calls::LiquidateBorrowVerify(var)
        }
    }
    impl ::std::convert::From<LiquidateCalculateSeizeTokensCall> for ComptrollerG1Calls {
        fn from(var: LiquidateCalculateSeizeTokensCall) -> Self {
            ComptrollerG1Calls::LiquidateCalculateSeizeTokens(var)
        }
    }
    impl ::std::convert::From<LiquidationIncentiveMantissaCall> for ComptrollerG1Calls {
        fn from(var: LiquidationIncentiveMantissaCall) -> Self {
            ComptrollerG1Calls::LiquidationIncentiveMantissa(var)
        }
    }
    impl ::std::convert::From<MarketsCall> for ComptrollerG1Calls {
        fn from(var: MarketsCall) -> Self {
            ComptrollerG1Calls::Markets(var)
        }
    }
    impl ::std::convert::From<MaxAssetsCall> for ComptrollerG1Calls {
        fn from(var: MaxAssetsCall) -> Self {
            ComptrollerG1Calls::MaxAssets(var)
        }
    }
    impl ::std::convert::From<MintAllowedCall> for ComptrollerG1Calls {
        fn from(var: MintAllowedCall) -> Self {
            ComptrollerG1Calls::MintAllowed(var)
        }
    }
    impl ::std::convert::From<MintVerifyCall> for ComptrollerG1Calls {
        fn from(var: MintVerifyCall) -> Self {
            ComptrollerG1Calls::MintVerify(var)
        }
    }
    impl ::std::convert::From<OracleCall> for ComptrollerG1Calls {
        fn from(var: OracleCall) -> Self {
            ComptrollerG1Calls::Oracle(var)
        }
    }
    impl ::std::convert::From<PendingAdminCall> for ComptrollerG1Calls {
        fn from(var: PendingAdminCall) -> Self {
            ComptrollerG1Calls::PendingAdmin(var)
        }
    }
    impl ::std::convert::From<PendingComptrollerImplementationCall> for ComptrollerG1Calls {
        fn from(var: PendingComptrollerImplementationCall) -> Self {
            ComptrollerG1Calls::PendingComptrollerImplementation(var)
        }
    }
    impl ::std::convert::From<RedeemAllowedCall> for ComptrollerG1Calls {
        fn from(var: RedeemAllowedCall) -> Self {
            ComptrollerG1Calls::RedeemAllowed(var)
        }
    }
    impl ::std::convert::From<RedeemVerifyCall> for ComptrollerG1Calls {
        fn from(var: RedeemVerifyCall) -> Self {
            ComptrollerG1Calls::RedeemVerify(var)
        }
    }
    impl ::std::convert::From<RepayBorrowAllowedCall> for ComptrollerG1Calls {
        fn from(var: RepayBorrowAllowedCall) -> Self {
            ComptrollerG1Calls::RepayBorrowAllowed(var)
        }
    }
    impl ::std::convert::From<RepayBorrowVerifyCall> for ComptrollerG1Calls {
        fn from(var: RepayBorrowVerifyCall) -> Self {
            ComptrollerG1Calls::RepayBorrowVerify(var)
        }
    }
    impl ::std::convert::From<SeizeAllowedCall> for ComptrollerG1Calls {
        fn from(var: SeizeAllowedCall) -> Self {
            ComptrollerG1Calls::SeizeAllowed(var)
        }
    }
    impl ::std::convert::From<SeizeVerifyCall> for ComptrollerG1Calls {
        fn from(var: SeizeVerifyCall) -> Self {
            ComptrollerG1Calls::SeizeVerify(var)
        }
    }
    impl ::std::convert::From<TransferAllowedCall> for ComptrollerG1Calls {
        fn from(var: TransferAllowedCall) -> Self {
            ComptrollerG1Calls::TransferAllowed(var)
        }
    }
    impl ::std::convert::From<TransferVerifyCall> for ComptrollerG1Calls {
        fn from(var: TransferVerifyCall) -> Self {
            ComptrollerG1Calls::TransferVerify(var)
        }
    }
    #[doc = "Container type for all return fields from the `_setCloseFactor` function with signature `_setCloseFactor(uint256)` and selector `[49, 123, 11, 119]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SetCloseFactorReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `_setCollateralFactor` function with signature `_setCollateralFactor(address,uint256)` and selector `[228, 2, 142, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SetCollateralFactorReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `_setLiquidationIncentive` function with signature `_setLiquidationIncentive(uint256)` and selector `[79, 212, 46, 23]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SetLiquidationIncentiveReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `_setMaxAssets` function with signature `_setMaxAssets(uint256)` and selector `[217, 34, 108, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SetMaxAssetsReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `_setPriceOracle` function with signature `_setPriceOracle(address)` and selector `[85, 238, 31, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SetPriceOracleReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `_supportMarket` function with signature `_supportMarket(address)` and selector `[167, 107, 63, 218]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SupportMarketReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `accountAssets` function with signature `accountAssets(address,uint256)` and selector `[220, 225, 84, 73]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AccountAssetsReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `admin` function with signature `admin()` and selector `[248, 81, 164, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AdminReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `borrowAllowed` function with signature `borrowAllowed(address,address,uint256)` and selector `[218, 61, 69, 76]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct BorrowAllowedReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `checkMembership` function with signature `checkMembership(address,address)` and selector `[146, 159, 233, 161]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CheckMembershipReturn(pub bool);
    #[doc = "Container type for all return fields from the `closeFactorMantissa` function with signature `closeFactorMantissa()` and selector `[232, 117, 84, 70]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CloseFactorMantissaReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `comptrollerImplementation` function with signature `comptrollerImplementation()` and selector `[187, 130, 170, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ComptrollerImplementationReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `enterMarkets` function with signature `enterMarkets(address[])` and selector `[194, 153, 130, 56]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct EnterMarketsReturn(pub ::std::vec::Vec<ethers::core::types::U256>);
    #[doc = "Container type for all return fields from the `exitMarket` function with signature `exitMarket(address)` and selector `[237, 228, 237, 208]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ExitMarketReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `getAccountLiquidity` function with signature `getAccountLiquidity(address)` and selector `[94, 200, 140, 121]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetAccountLiquidityReturn(
        pub ethers::core::types::U256,
        pub ethers::core::types::U256,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all return fields from the `getAssetsIn` function with signature `getAssetsIn(address)` and selector `[171, 252, 239, 252]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetAssetsInReturn(pub ::std::vec::Vec<ethers::core::types::Address>);
    #[doc = "Container type for all return fields from the `isComptroller` function with signature `isComptroller()` and selector `[0, 126, 61, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsComptrollerReturn(pub bool);
    #[doc = "Container type for all return fields from the `liquidateBorrowAllowed` function with signature `liquidateBorrowAllowed(address,address,address,address,uint256)` and selector `[95, 199, 231, 30]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct LiquidateBorrowAllowedReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `liquidateCalculateSeizeTokens` function with signature `liquidateCalculateSeizeTokens(address,address,uint256)` and selector `[196, 136, 132, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct LiquidateCalculateSeizeTokensReturn(
        pub ethers::core::types::U256,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all return fields from the `liquidationIncentiveMantissa` function with signature `liquidationIncentiveMantissa()` and selector `[74, 218, 144, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct LiquidationIncentiveMantissaReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `markets` function with signature `markets(address)` and selector `[142, 143, 41, 75]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MarketsReturn {
        pub is_listed: bool,
        pub collateral_factor_mantissa: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `maxAssets` function with signature `maxAssets()` and selector `[148, 178, 41, 75]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MaxAssetsReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `mintAllowed` function with signature `mintAllowed(address,address,uint256)` and selector `[78, 244, 195, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MintAllowedReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `oracle` function with signature `oracle()` and selector `[125, 192, 209, 208]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct OracleReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `pendingAdmin` function with signature `pendingAdmin()` and selector `[38, 120, 34, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct PendingAdminReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `pendingComptrollerImplementation` function with signature `pendingComptrollerImplementation()` and selector `[220, 251, 192, 199]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct PendingComptrollerImplementationReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `redeemAllowed` function with signature `redeemAllowed(address,address,uint256)` and selector `[234, 190, 125, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct RedeemAllowedReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `repayBorrowAllowed` function with signature `repayBorrowAllowed(address,address,address,uint256)` and selector `[36, 0, 138, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct RepayBorrowAllowedReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `seizeAllowed` function with signature `seizeAllowed(address,address,address,address,uint256)` and selector `[208, 47, 115, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SeizeAllowedReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `transferAllowed` function with signature `transferAllowed(address,address,address,uint256)` and selector `[189, 205, 194, 88]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TransferAllowedReturn(pub ethers::core::types::U256);
}
