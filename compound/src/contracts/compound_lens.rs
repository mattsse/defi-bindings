pub use compoundlens_mod::*;
#[allow(clippy::too_many_arguments)]
mod compoundlens_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CompoundLens was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static COMPOUNDLENS_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cTokenBalances\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CTokenBalances\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cTokenBalancesAll\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cTokenMetadata\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cTokenDecimals\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cTokenMetadataAll\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cTokenDecimals\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cTokenUnderlyingPrice\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CTokenUnderlyingPrice\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cTokenUnderlyingPriceAll\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CTokenUnderlyingPrice[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptroller\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getAccountLimits\",\"outputs\":[{\"internalType\":\"struct CompoundLens.AccountLimits\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract CToken[]\",\"name\":\"markets\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract Comp\",\"name\":\"comp\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCompBalanceMetadata\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CompBalanceMetadata\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract Comp\",\"name\":\"comp\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptroller\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getCompBalanceMetadataExt\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CompBalanceMetadataExt\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract Comp\",\"name\":\"comp\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32[]\",\"name\":\"blockNumbers\",\"type\":\"uint32[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCompVotes\",\"outputs\":[{\"internalType\":\"struct CompoundLens.CompVotes[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGovProposals\",\"outputs\":[{\"internalType\":\"struct CompoundLens.GovProposal[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\",\"components\":[]},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGovReceipts\",\"outputs\":[{\"internalType\":\"struct CompoundLens.GovReceipt[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\",\"components\":[]}]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static COMPOUNDLENS_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060405234801561001057600080fd5b506134f3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063595642191161007157806359564219146101825780637dd8f6d9146101a257806396994869146101c2578063995ed99f146101e2578063bdf950c914610202578063c5ae593414610222576100b4565b80630972bf8b146100b9578063158eca8b146100e25780631ea63741146101025780632b2d5ed614610122578063416405d7146101425780634b70d84b14610162575b600080fd5b6100cc6100c73660046124b4565b610242565b6040516100d99190613254565b60405180910390f35b6100f56100f0366004612576565b6102e5565b6040516100d991906132f8565b61011561011036600461262b565b610a69565b6040516100d99190613315565b610135610130366004612473565b610df0565b6040516100d99190613276565b610155610150366004612594565b610e8c565b6040516100d99190613323565b610175610170366004612473565b611035565b6040516100d99190613265565b6101956101903660046125c4565b6110c6565b6040516100d99190613287565b6101b56101b0366004612594565b61121e565b6040516100d991906132d9565b6101d56101d03660046126e6565b61135a565b6040516100d99190613298565b6101f56101f036600461268c565b611516565b6040516100d991906132a9565b610215610210366004612594565b611670565b6040516100d991906132ea565b610235610230366004612576565b611a10565b6040516100d99190613307565b6040805183815260208085028201019091526060908390829082801561028257816020015b61026f611d7d565b8152602001906001900390816102675790505b50905060005b828110156102d9576102ba87878381811061029f57fe5b90506020020160206102b49190810190612576565b86611670565b8282815181106102c657fe5b6020908102919091010152600101610288565b509150505b9392505050565b6102ed611dbc565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561032a57600080fd5b505af115801561033e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610362919081019061278d565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561039f57600080fd5b505afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103d7919081019061266e565b9050600080826001600160a01b0316638e8f294b876040518263ffffffff1660e01b81526004016104089190613202565b604080518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610457919081019061253c565b915091506000806104f8886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561049a57600080fd5b505afa1580156104ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d6919081019061273b565b604051806040016040528060048152602001630c68aa8960e31b815250611ba2565b156105095750600090506012610669565b6000889050806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561054757600080fd5b505afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061057f9190810190612391565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ba57600080fd5b505afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105f29190810190612391565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561062a57600080fd5b505afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061066291908101906128d0565b60ff169150505b604051806101c00160405280896001600160a01b03168152602001878152602001896001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c357600080fd5b505afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106fb919081019061278d565b8152602001896001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610771919081019061278d565b8152602001896001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b1580156107af57600080fd5b505afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107e7919081019061278d565b8152602001896001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561082557600080fd5b505afa158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061085d919081019061278d565b8152602001896001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089b57600080fd5b505afa1580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108d3919081019061278d565b8152602001896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091157600080fd5b505afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610949919081019061278d565b8152602001896001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561098757600080fd5b505afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109bf919081019061278d565b81526020018515158152602001848152602001836001600160a01b03168152602001896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a5291908101906128d0565b60ff16815260200191909152979650505050505050565b610a71611e3f565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190610aa0908690600401613202565b60206040518083038186803b158015610ab857600080fd5b505afa158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610af0919081019061278d565b6040516374d7814960e11b81529091506001600160a01b0385169063e9af029290610b1f908690600401613202565b600060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03881691506370a0823190610b80908790600401613202565b60206040518083038186803b158015610b9857600080fd5b505afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bd0919081019061278d565b90506000856001600160a01b031663cc7ebdc4866040518263ffffffff1660e01b8152600401610c009190613202565b60206040518083038186803b158015610c1857600080fd5b505afa158015610c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c50919081019061278d565b90506000610c8582846040518060400160405280600e81526020016d1cdd5b4818dbdb5c081d1bdd185b60921b815250611bfb565b90506000610cb982866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b815250611c2b565b905060405180608001604052808681526020018a6001600160a01b031663b4b5ea578a6040518263ffffffff1660e01b8152600401610cf89190613202565b60206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d4891908101906128ee565b6001600160601b031681526020018a6001600160a01b031663587cde1e8a6040518263ffffffff1660e01b8152600401610d829190613202565b60206040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dd29190810190612391565b6001600160a01b031681526020019190915298975050505050505050565b60408051828152602080840282010190915260609082908290828015610e3057816020015b610e1d611e70565b815260200190600190039081610e155790505b50905060005b82811015610e8157610e62868683818110610e4d57fe5b90506020020160206102309190810190612576565b828281518110610e6e57fe5b6020908102919091010152600101610e36565b509150505b92915050565b610e94611e87565b6040805160608101918290526370a0823160e01b909152806001600160a01b0385166370a08231610ec88660648501613202565b60206040518083038186803b158015610ee057600080fd5b505afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f18919081019061278d565b8152602001846001600160a01b031663b4b5ea57856040518263ffffffff1660e01b8152600401610f499190613202565b60206040518083038186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f9991908101906128ee565b6001600160601b03168152602001846001600160a01b031663587cde1e856040518263ffffffff1660e01b8152600401610fd39190613202565b60206040518083038186803b158015610feb57600080fd5b505afa158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110239190810190612391565b6001600160a01b031690529392505050565b6040805182815260208084028201019091526060908290829082801561107557816020015b611062611dbc565b81526020019060019003908161105a5790505b50905060005b82811015610e81576110a786868381811061109257fe5b90506020020160206100f09190810190612576565b8282815181106110b357fe5b602090810291909101015260010161107b565b6060808383905060405190808252806020026020018201604052801561110657816020015b6110f3611eb1565b8152602001906001900390816110eb5790505b50905060005b8381101561121457604051806040016040528086868481811061112b57fe5b905060200201602061114091908101906128b2565b63ffffffff168152602001886001600160a01b031663782d6fe18989898781811061116757fe5b905060200201602061117c91908101906128b2565b6040518363ffffffff1660e01b8152600401611199929190613239565b60206040518083038186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111e991908101906128ee565b6001600160601b031681525082828151811061120157fe5b602090810291909101015260010161110c565b5095945050505050565b611226611ecb565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b81526004016112579190613202565b60606040518083038186803b15801561126f57600080fd5b505afa158015611283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112a7919081019061286f565b925092509250826000146112ba57600080fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc6112ee8960648501613202565b60006040518083038186803b15801561130657600080fd5b505afa15801561131a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113429190810190612508565b81526020810193909352604090920152949350505050565b6060808383905060405190808252806020026020018201604052801561139a57816020015b611387611eec565b81526020019060019003908161137f5790505b50905060005b8381101561150d57606080606080896001600160a01b031663328dd9828a8a888181106113c957fe5b905060200201356040518263ffffffff1660e01b81526004016113ec9190613331565b60006040518083038186803b15801561140457600080fd5b505afa158015611418573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261144091908101906123b7565b9350935093509350604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200185815260200184815260200183815260200182815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152508686815181106114c257fe5b60200260200101819052506114fd8686815181106114dc57fe5b60200260200101518b8b8b898181106114f157fe5b90506020020135611c57565b5050600190920191506113a09050565b50949350505050565b606060008251905060608160405190808252806020026020018201604052801561155a57816020015b611547611f61565b81526020019060019003908161153f5790505b50905060005b828110156102d957611570611f88565b876001600160a01b031663e23a9a5287848151811061158b57fe5b6020026020010151896040518363ffffffff1660e01b81526004016115b192919061333f565b60606040518083038186803b1580156115c957600080fd5b505afa1580156115dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611601919081019061276f565b9050604051806080016040528087848151811061161a57fe5b6020026020010151815260200182600001511515815260200182602001511515815260200182604001516001600160601b031681525083838151811061165c57fe5b602090810291909101015250600101611560565b611678611d7d565b6040516370a0823160e01b81526000906001600160a01b038516906370a08231906116a7908690600401613210565b60206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116f7919081019061278d565b90506000846001600160a01b03166317bfdfbc856040518263ffffffff1660e01b81526004016117279190613210565b602060405180830381600087803b15801561174157600080fd5b505af1158015611755573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611779919081019061278d565b90506000856001600160a01b0316633af9e669866040518263ffffffff1660e01b81526004016117a99190613210565b602060405180830381600087803b1580156117c357600080fd5b505af11580156117d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117fb919081019061278d565b905060008061183c886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561049a57600080fd5b156118565750506001600160a01b038516803190316119d3565b60008890506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561189657600080fd5b505afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118ce9190810190612391565b6040516370a0823160e01b81529091506001600160a01b038216906370a08231906118fd908c90600401613210565b60206040518083038186803b15801561191557600080fd5b505afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061194d919081019061278d565b604051636eb1769f60e11b81529094506001600160a01b0382169063dd62ed3e9061197e908c908e9060040161321e565b60206040518083038186803b15801561199657600080fd5b505afa1580156119aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119ce919081019061278d565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b611a18611e70565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5357600080fd5b505afa158015611a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a8b919081019061266e565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac857600080fd5b505afa158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b00919081019061266e565b90506040518060400160405280856001600160a01b03168152602001826001600160a01b031663fc57d4df876040518263ffffffff1660e01b8152600401611b4891906132ba565b60206040518083038186803b158015611b6057600080fd5b505afa158015611b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b98919081019061278d565b9052949350505050565b600081604051602001611bb591906131f6565b6040516020818303038152906040528051906020012083604051602001611bdc91906131f6565b6040516020818303038152906040528051906020012014905092915050565b6000838301828582101561150d5760405162461bcd60e51b8152600401611c2291906132c8565b60405180910390fd5b60008184841115611c4f5760405162461bcd60e51b8152600401611c2291906132c8565b505050900390565b600080600080600080600080896001600160a01b031663013cf08b8a6040518263ffffffff1660e01b8152600401611c8f9190613331565b6101206040518083038186803b158015611ca857600080fd5b505afa158015611cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ce091908101906127ab565b9850985098509850985098509850985050888b6000018181525050878b602001906001600160a01b031690816001600160a01b031681525050868b6040018181525050858b60e0018181525050848b610100018181525050838b610120018181525050828b610140018181525050818b610160019015159081151581525050808b6101800190151590811515815250505050505050505050505050565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001600081525090565b604080518082019091526000808252602082015290565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806060815260200160008152602001600081525090565b604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b8035610e8681613463565b8051610e8681613463565b600082601f830112611fcf57600080fd5b8151611fe2611fdd82613373565b61334d565b9150818183526020840193506020810190508385602084028201111561200757600080fd5b60005b83811015612033578161201d8882611fb3565b845250602092830192919091019060010161200a565b5050505092915050565b600082601f83011261204e57600080fd5b815161205c611fdd82613373565b81815260209384019390925082018360005b838110156120335781518601612084888261229a565b845250602092830192919091019060010161206e565b60008083601f8401126120ac57600080fd5b5081356001600160401b038111156120c357600080fd5b6020830191508360208202830111156120db57600080fd5b9250929050565b600082601f8301126120f357600080fd5b8151612101611fdd82613373565b9150818183526020840193506020810190508385602084028201111561212657600080fd5b60005b83811015612033578161213c88826122f4565b8452506020928301929190910190600101612129565b600082601f83011261216357600080fd5b8151612171611fdd82613373565b81815260209384019390925082018360005b838110156120335781518601612199888261229a565b8452506020928301929190910190600101612183565b600082601f8301126121c057600080fd5b81356121ce611fdd82613373565b915081818352602084019350602081019050838560208402820111156121f357600080fd5b60005b838110156120335781612209888261235a565b84525060209283019291909101906001016121f6565b600082601f83011261223057600080fd5b815161223e611fdd82613373565b9150818183526020840193506020810190508385602084028201111561226357600080fd5b60005b8381101561203357816122798882612365565b8452506020928301929190910190600101612266565b8051610e868161347a565b600082601f8301126122ab57600080fd5b81516122b9611fdd82613393565b915080825260208301602083018583830111156122d557600080fd5b6122e083828461342d565b50505092915050565b8035610e8681613483565b8051610e8681613483565b60006060828403121561231157600080fd5b61231b606061334d565b90506000612329848461228f565b825250602061233a8484830161228f565b602083015250604061234e84828501612386565b60408301525092915050565b8035610e868161348c565b8051610e868161348c565b8035610e8681613495565b8051610e868161349e565b8051610e86816134a7565b6000602082840312156123a357600080fd5b60006123af8484611fb3565b949350505050565b600080600080608085870312156123cd57600080fd5b84516001600160401b038111156123e357600080fd5b6123ef87828801611fbe565b94505060208501516001600160401b0381111561240b57600080fd5b6124178782880161221f565b93505060408501516001600160401b0381111561243357600080fd5b61243f87828801612152565b92505060608501516001600160401b0381111561245b57600080fd5b6124678782880161203d565b91505092959194509250565b6000806020838503121561248657600080fd5b82356001600160401b0381111561249c57600080fd5b6124a88582860161209a565b92509250509250929050565b6000806000604084860312156124c957600080fd5b83356001600160401b038111156124df57600080fd5b6124eb8682870161209a565b935093505060206124fe86828701611fa8565b9150509250925092565b60006020828403121561251a57600080fd5b81516001600160401b0381111561253057600080fd5b6123af848285016120e2565b6000806040838503121561254f57600080fd5b600061255b858561228f565b925050602061256c85828601612365565b9150509250929050565b60006020828403121561258857600080fd5b60006123af84846122e9565b600080604083850312156125a757600080fd5b60006125b385856122e9565b925050602061256c85828601611fa8565b600080600080606085870312156125da57600080fd5b60006125e687876122e9565b94505060206125f787828801611fa8565b93505060408501356001600160401b0381111561261357600080fd5b61261f8782880161209a565b95989497509550505050565b60008060006060848603121561264057600080fd5b600061264c86866122e9565b935050602061265d868287016122e9565b92505060406124fe86828701611fa8565b60006020828403121561268057600080fd5b60006123af84846122f4565b6000806000606084860312156126a157600080fd5b60006126ad86866122e9565b93505060206126be86828701611fa8565b92505060408401356001600160401b038111156126da57600080fd5b6124fe868287016121af565b6000806000604084860312156126fb57600080fd5b600061270786866122e9565b93505060208401356001600160401b0381111561272357600080fd5b61272f8682870161209a565b92509250509250925092565b60006020828403121561274d57600080fd5b81516001600160401b0381111561276357600080fd5b6123af8482850161229a565b60006060828403121561278157600080fd5b60006123af84846122ff565b60006020828403121561279f57600080fd5b60006123af8484612365565b60008060008060008060008060006101208a8c0312156127ca57600080fd5b60006127d68c8c612365565b99505060206127e78c828d01611fb3565b98505060406127f88c828d01612365565b97505060606128098c828d01612365565b965050608061281a8c828d01612365565b95505060a061282b8c828d01612365565b94505060c061283c8c828d01612365565b93505060e061284d8c828d0161228f565b92505061010061285f8c828d0161228f565b9150509295985092959850929598565b60008060006060848603121561288457600080fd5b60006128908686612365565b93505060206128a186828701612365565b92505060406124fe86828701612365565b6000602082840312156128c457600080fd5b60006123af8484612370565b6000602082840312156128e257600080fd5b60006123af848461237b565b60006020828403121561290057600080fd5b60006123af8484612386565b600061291883836129bc565b505060200190565b60006102de8383612d79565b60006129188383612db1565b60006129448383612e31565b505060c00190565b60006129588383612ea7565b50506101c00190565b600061296d8383612fbc565b505060400190565b600061296d8383613061565b60006102de8383613072565b60006129998383613191565b505060800190565b600061291883836131db565b6129b681613417565b82525050565b6129b6816133d2565b60006129d0826133c0565b6129da81856133c4565b93506129e5836133ba565b8060005b83811015612a135781516129fd888261290c565b9750612a08836133ba565b9250506001016129e9565b509495945050505050565b6000612a29826133c0565b612a3381856133c4565b935083602082028501612a45856133ba565b8060005b85811015612a7f5784840389528151612a628582612920565b9450612a6d836133ba565b60209a909a0199925050600101612a49565b5091979650505050505050565b6000612a97826133c0565b612aa181856133c4565b9350612aac836133ba565b8060005b83811015612a13578151612ac4888261292c565b9750612acf836133ba565b925050600101612ab0565b6000612ae5826133c0565b612aef81856133c4565b935083602082028501612b01856133ba565b8060005b85811015612a7f5784840389528151612b1e8582612920565b9450612b29836133ba565b60209a909a0199925050600101612b05565b6000612b46826133c0565b612b5081856133c4565b9350612b5b836133ba565b8060005b83811015612a13578151612b738882612938565b9750612b7e836133ba565b925050600101612b5f565b6000612b94826133c0565b612b9e81856133c4565b9350612ba9836133ba565b8060005b83811015612a13578151612bc1888261294c565b9750612bcc836133ba565b925050600101612bad565b6000612be2826133c0565b612bec81856133c4565b9350612bf7836133ba565b8060005b83811015612a13578151612c0f8882612961565b9750612c1a836133ba565b925050600101612bfb565b6000612c30826133c0565b612c3a81856133c4565b9350612c45836133ba565b8060005b83811015612a13578151612c5d8882612975565b9750612c68836133ba565b925050600101612c49565b6000612c7e826133c0565b612c8881856133c4565b935083602082028501612c9a856133ba565b8060005b85811015612a7f5784840389528151612cb78582612981565b9450612cc2836133ba565b60209a909a0199925050600101612c9e565b6000612cdf826133c0565b612ce981856133c4565b9350612cf4836133ba565b8060005b83811015612a13578151612d0c888261298d565b9750612d17836133ba565b925050600101612cf8565b6000612d2d826133c0565b612d3781856133c4565b9350612d42836133ba565b8060005b83811015612a13578151612d5a88826129a1565b9750612d65836133ba565b925050600101612d46565b6129b6816133dd565b6000612d84826133c0565b612d8e81856133c4565b9350612d9e81856020860161342d565b612da781613459565b9093019392505050565b6129b6816133e2565b6000612dc5826133c0565b612dcf81856133cd565b9350612ddf81856020860161342d565b9290920192915050565b8051606080845260009190840190612e018282612a8c565b9150506020830151612e1660208601826131db565b506040830151612e2960408601826131db565b509392505050565b805160c0830190612e4284826129bc565b506020820151612e5560208501826131db565b506040820151612e6860408501826131db565b506060820151612e7b60608501826131db565b506080820151612e8e60808501826131db565b5060a0820151612ea160a08501826131db565b50505050565b80516101c0830190612eb984826129bc565b506020820151612ecc60208501826131db565b506040820151612edf60408501826131db565b506060820151612ef260608501826131db565b506080820151612f0560808501826131db565b5060a0820151612f1860a08501826131db565b5060c0820151612f2b60c08501826131db565b5060e0820151612f3e60e08501826131db565b50610100820151612f536101008501826131db565b50610120820151612f68610120850182612d70565b50610140820151612f7d6101408501826131db565b50610160820151612f926101608501826129bc565b50610180820151612fa76101808501826131db565b506101a0820151612ea16101a08501826131db565b80516040830190612fcd84826129bc565b506020820151612ea160208501826131db565b80516080830190612ff184826131db565b50602082015161300460208501826131db565b50604082015161301760408501826129bc565b506060820151612ea160608501826131db565b8051606083019061303b84826131db565b50602082015161304e60208501826131db565b506040820151612ea160408501826129bc565b80516040830190612fcd84826131db565b80516000906101a084019061308785826131db565b50602083015161309a60208601826129bc565b5060408301516130ad60408601826131db565b50606083015184820360608601526130c582826129c5565b915050608083015184820360808601526130df8282612d22565b91505060a083015184820360a08601526130f98282612ada565b91505060c083015184820360c08601526131138282612a1e565b91505060e083015161312860e08601826131db565b5061010083015161313d6101008601826131db565b506101208301516131526101208601826131db565b506101408301516131676101408601826131db565b5061016083015161317c610160860182612d70565b50610180830151612e29610180860182612d70565b805160808301906131a284826131db565b5060208201516131b56020850182612d70565b5060408201516131c86040850182612d70565b506060820151612ea160608501826131ed565b6129b6816133f9565b6129b681613422565b6129b68161340b565b60006102de8284612dba565b60208101610e8682846129bc565b60208101610e8682846129ad565b6040810161322c82856129ad565b6102de60208301846129bc565b6040810161324782856129bc565b6102de60208301846131e4565b602080825281016102de8184612b3b565b602080825281016102de8184612b89565b602080825281016102de8184612bd7565b602080825281016102de8184612c25565b602080825281016102de8184612c73565b602080825281016102de8184612cd4565b60208101610e868284612db1565b602080825281016102de8184612d79565b602080825281016102de8184612de9565b60c08101610e868284612e31565b6101c08101610e868284612ea7565b60408101610e868284612fbc565b60808101610e868284612fe0565b60608101610e86828461302a565b60208101610e8682846131db565b6040810161322c82856131db565b6040518181016001600160401b038111828210171561336b57600080fd5b604052919050565b60006001600160401b0382111561338957600080fd5b5060209081020190565b60006001600160401b038211156133a957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b6000610e86826133ed565b151590565b6000610e86826133d2565b6001600160a01b031690565b90565b63ffffffff1690565b60ff1690565b6001600160601b031690565b6000610e86826133e2565b6000610e86826133fc565b60005b83811015613448578181015183820152602001613430565b83811115612ea15750506000910152565b601f01601f191690565b61346c816133d2565b811461347757600080fd5b50565b61346c816133dd565b61346c816133e2565b61346c816133f9565b61346c816133fc565b61346c81613405565b61346c8161340b56fea365627a7a723158208b0971e12a57ecb20663d1ae44d53ed343f7e5b72202a8aa627a63ed44ca19596c6578706572696d656e74616cf564736f6c63430005110040" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct CompoundLens<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for CompoundLens<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CompoundLens<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CompoundLens))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> CompoundLens<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), COMPOUNDLENS_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                COMPOUNDLENS_ABI.clone(),
                COMPOUNDLENS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `cTokenBalances` (0xbdf950c9) function"]
        pub fn c_token_balances(
            &self,
            c_token: ethers::core::types::Address,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, CtokenBalances> {
            self.0
                .method_hash([189, 249, 80, 201], (c_token, account))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cTokenBalancesAll` (0x0972bf8b) function"]
        pub fn c_token_balances_all(
            &self,
            c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<CtokenBalances>> {
            self.0
                .method_hash([9, 114, 191, 139], (c_tokens, account))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cTokenMetadata` (0x158eca8b) function"]
        pub fn c_token_metadata(
            &self,
            c_token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, CtokenMetadata> {
            self.0
                .method_hash([21, 142, 202, 139], c_token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cTokenMetadataAll` (0x4b70d84b) function"]
        pub fn c_token_metadata_all(
            &self,
            c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<CtokenMetadata>> {
            self.0
                .method_hash([75, 112, 216, 75], c_tokens)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cTokenUnderlyingPrice` (0xc5ae5934) function"]
        pub fn c_token_underlying_price(
            &self,
            c_token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, CtokenUnderlyingPrice> {
            self.0
                .method_hash([197, 174, 89, 52], c_token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cTokenUnderlyingPriceAll` (0x2b2d5ed6) function"]
        pub fn c_token_underlying_price_all(
            &self,
            c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<CtokenUnderlyingPrice>>
        {
            self.0
                .method_hash([43, 45, 94, 214], c_tokens)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getAccountLimits` (0x7dd8f6d9) function"]
        pub fn get_account_limits(
            &self,
            comptroller: ethers::core::types::Address,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, AccountLimits> {
            self.0
                .method_hash([125, 216, 246, 217], (comptroller, account))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCompBalanceMetadata` (0x416405d7) function"]
        pub fn get_comp_balance_metadata(
            &self,
            comp: ethers::core::types::Address,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, CompBalanceMetadata> {
            self.0
                .method_hash([65, 100, 5, 215], (comp, account))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCompBalanceMetadataExt` (0x1ea63741) function"]
        pub fn get_comp_balance_metadata_ext(
            &self,
            comp: ethers::core::types::Address,
            comptroller: ethers::core::types::Address,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, CompBalanceMetadataExt> {
            self.0
                .method_hash([30, 166, 55, 65], (comp, comptroller, account))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCompVotes` (0x59564219) function"]
        pub fn get_comp_votes(
            &self,
            comp: ethers::core::types::Address,
            account: ethers::core::types::Address,
            block_numbers: ::std::vec::Vec<u32>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<CompVotes>> {
            self.0
                .method_hash([89, 86, 66, 25], (comp, account, block_numbers))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getGovProposals` (0x96994869) function"]
        pub fn get_gov_proposals(
            &self,
            governor: ethers::core::types::Address,
            proposal_ids: ::std::vec::Vec<ethers::core::types::U256>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<GovProposal>> {
            self.0
                .method_hash([150, 153, 72, 105], (governor, proposal_ids))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getGovReceipts` (0x995ed99f) function"]
        pub fn get_gov_receipts(
            &self,
            governor: ethers::core::types::Address,
            voter: ethers::core::types::Address,
            proposal_ids: ::std::vec::Vec<ethers::core::types::U256>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<GovReceipt>> {
            self.0
                .method_hash([153, 94, 217, 159], (governor, voter, proposal_ids))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for CompoundLens<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `cTokenBalances`function with signature `cTokenBalances(address,address)` and selector `[189, 249, 80, 201]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "cTokenBalances", abi = "cTokenBalances(address,address)")]
    pub struct CtokenBalancesCall {
        pub c_token: ethers::core::types::Address,
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `cTokenBalancesAll`function with signature `cTokenBalancesAll(address[],address)` and selector `[9, 114, 191, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "cTokenBalancesAll",
        abi = "cTokenBalancesAll(address[],address)"
    )]
    pub struct CtokenBalancesAllCall {
        pub c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `cTokenMetadata`function with signature `cTokenMetadata(address)` and selector `[21, 142, 202, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "cTokenMetadata", abi = "cTokenMetadata(address)")]
    pub struct CtokenMetadataCall {
        pub c_token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `cTokenMetadataAll`function with signature `cTokenMetadataAll(address[])` and selector `[75, 112, 216, 75]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "cTokenMetadataAll", abi = "cTokenMetadataAll(address[])")]
    pub struct CtokenMetadataAllCall {
        pub c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
    }
    #[doc = "Container type for all input parameters for the `cTokenUnderlyingPrice`function with signature `cTokenUnderlyingPrice(address)` and selector `[197, 174, 89, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "cTokenUnderlyingPrice", abi = "cTokenUnderlyingPrice(address)")]
    pub struct CtokenUnderlyingPriceCall {
        pub c_token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `cTokenUnderlyingPriceAll`function with signature `cTokenUnderlyingPriceAll(address[])` and selector `[43, 45, 94, 214]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "cTokenUnderlyingPriceAll",
        abi = "cTokenUnderlyingPriceAll(address[])"
    )]
    pub struct CtokenUnderlyingPriceAllCall {
        pub c_tokens: ::std::vec::Vec<ethers::core::types::Address>,
    }
    #[doc = "Container type for all input parameters for the `getAccountLimits`function with signature `getAccountLimits(address,address)` and selector `[125, 216, 246, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getAccountLimits", abi = "getAccountLimits(address,address)")]
    pub struct GetAccountLimitsCall {
        pub comptroller: ethers::core::types::Address,
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCompBalanceMetadata`function with signature `getCompBalanceMetadata(address,address)` and selector `[65, 100, 5, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCompBalanceMetadata",
        abi = "getCompBalanceMetadata(address,address)"
    )]
    pub struct GetCompBalanceMetadataCall {
        pub comp: ethers::core::types::Address,
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCompBalanceMetadataExt`function with signature `getCompBalanceMetadataExt(address,address,address)` and selector `[30, 166, 55, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCompBalanceMetadataExt",
        abi = "getCompBalanceMetadataExt(address,address,address)"
    )]
    pub struct GetCompBalanceMetadataExtCall {
        pub comp: ethers::core::types::Address,
        pub comptroller: ethers::core::types::Address,
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCompVotes`function with signature `getCompVotes(address,address,uint32[])` and selector `[89, 86, 66, 25]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getCompVotes", abi = "getCompVotes(address,address,uint32[])")]
    pub struct GetCompVotesCall {
        pub comp: ethers::core::types::Address,
        pub account: ethers::core::types::Address,
        pub block_numbers: ::std::vec::Vec<u32>,
    }
    #[doc = "Container type for all input parameters for the `getGovProposals`function with signature `getGovProposals(address,uint256[])` and selector `[150, 153, 72, 105]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getGovProposals", abi = "getGovProposals(address,uint256[])")]
    pub struct GetGovProposalsCall {
        pub governor: ethers::core::types::Address,
        pub proposal_ids: ::std::vec::Vec<ethers::core::types::U256>,
    }
    #[doc = "Container type for all input parameters for the `getGovReceipts`function with signature `getGovReceipts(address,address,uint256[])` and selector `[153, 94, 217, 159]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getGovReceipts",
        abi = "getGovReceipts(address,address,uint256[])"
    )]
    pub struct GetGovReceiptsCall {
        pub governor: ethers::core::types::Address,
        pub voter: ethers::core::types::Address,
        pub proposal_ids: ::std::vec::Vec<ethers::core::types::U256>,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundLensCalls {
        CtokenBalances(CtokenBalancesCall),
        CtokenBalancesAll(CtokenBalancesAllCall),
        CtokenMetadata(CtokenMetadataCall),
        CtokenMetadataAll(CtokenMetadataAllCall),
        CtokenUnderlyingPrice(CtokenUnderlyingPriceCall),
        CtokenUnderlyingPriceAll(CtokenUnderlyingPriceAllCall),
        GetAccountLimits(GetAccountLimitsCall),
        GetCompBalanceMetadata(GetCompBalanceMetadataCall),
        GetCompBalanceMetadataExt(GetCompBalanceMetadataExtCall),
        GetCompVotes(GetCompVotesCall),
        GetGovProposals(GetGovProposalsCall),
        GetGovReceipts(GetGovReceiptsCall),
    }
    impl ethers::core::abi::AbiDecode for CompoundLensCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <CtokenBalancesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::CtokenBalances(decoded));
            }
            if let Ok(decoded) =
                <CtokenBalancesAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::CtokenBalancesAll(decoded));
            }
            if let Ok(decoded) =
                <CtokenMetadataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::CtokenMetadata(decoded));
            }
            if let Ok(decoded) =
                <CtokenMetadataAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::CtokenMetadataAll(decoded));
            }
            if let Ok(decoded) =
                <CtokenUnderlyingPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::CtokenUnderlyingPrice(decoded));
            }
            if let Ok(decoded) =
                <CtokenUnderlyingPriceAllCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundLensCalls::CtokenUnderlyingPriceAll(decoded));
            }
            if let Ok(decoded) =
                <GetAccountLimitsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::GetAccountLimits(decoded));
            }
            if let Ok(decoded) =
                <GetCompBalanceMetadataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::GetCompBalanceMetadata(decoded));
            }
            if let Ok(decoded) =
                <GetCompBalanceMetadataExtCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundLensCalls::GetCompBalanceMetadataExt(decoded));
            }
            if let Ok(decoded) =
                <GetCompVotesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::GetCompVotes(decoded));
            }
            if let Ok(decoded) =
                <GetGovProposalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::GetGovProposals(decoded));
            }
            if let Ok(decoded) =
                <GetGovReceiptsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundLensCalls::GetGovReceipts(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CompoundLensCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CompoundLensCalls::CtokenBalances(element) => element.encode(),
                CompoundLensCalls::CtokenBalancesAll(element) => element.encode(),
                CompoundLensCalls::CtokenMetadata(element) => element.encode(),
                CompoundLensCalls::CtokenMetadataAll(element) => element.encode(),
                CompoundLensCalls::CtokenUnderlyingPrice(element) => element.encode(),
                CompoundLensCalls::CtokenUnderlyingPriceAll(element) => element.encode(),
                CompoundLensCalls::GetAccountLimits(element) => element.encode(),
                CompoundLensCalls::GetCompBalanceMetadata(element) => element.encode(),
                CompoundLensCalls::GetCompBalanceMetadataExt(element) => element.encode(),
                CompoundLensCalls::GetCompVotes(element) => element.encode(),
                CompoundLensCalls::GetGovProposals(element) => element.encode(),
                CompoundLensCalls::GetGovReceipts(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CompoundLensCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundLensCalls::CtokenBalances(element) => element.fmt(f),
                CompoundLensCalls::CtokenBalancesAll(element) => element.fmt(f),
                CompoundLensCalls::CtokenMetadata(element) => element.fmt(f),
                CompoundLensCalls::CtokenMetadataAll(element) => element.fmt(f),
                CompoundLensCalls::CtokenUnderlyingPrice(element) => element.fmt(f),
                CompoundLensCalls::CtokenUnderlyingPriceAll(element) => element.fmt(f),
                CompoundLensCalls::GetAccountLimits(element) => element.fmt(f),
                CompoundLensCalls::GetCompBalanceMetadata(element) => element.fmt(f),
                CompoundLensCalls::GetCompBalanceMetadataExt(element) => element.fmt(f),
                CompoundLensCalls::GetCompVotes(element) => element.fmt(f),
                CompoundLensCalls::GetGovProposals(element) => element.fmt(f),
                CompoundLensCalls::GetGovReceipts(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<CtokenBalancesCall> for CompoundLensCalls {
        fn from(var: CtokenBalancesCall) -> Self {
            CompoundLensCalls::CtokenBalances(var)
        }
    }
    impl ::std::convert::From<CtokenBalancesAllCall> for CompoundLensCalls {
        fn from(var: CtokenBalancesAllCall) -> Self {
            CompoundLensCalls::CtokenBalancesAll(var)
        }
    }
    impl ::std::convert::From<CtokenMetadataCall> for CompoundLensCalls {
        fn from(var: CtokenMetadataCall) -> Self {
            CompoundLensCalls::CtokenMetadata(var)
        }
    }
    impl ::std::convert::From<CtokenMetadataAllCall> for CompoundLensCalls {
        fn from(var: CtokenMetadataAllCall) -> Self {
            CompoundLensCalls::CtokenMetadataAll(var)
        }
    }
    impl ::std::convert::From<CtokenUnderlyingPriceCall> for CompoundLensCalls {
        fn from(var: CtokenUnderlyingPriceCall) -> Self {
            CompoundLensCalls::CtokenUnderlyingPrice(var)
        }
    }
    impl ::std::convert::From<CtokenUnderlyingPriceAllCall> for CompoundLensCalls {
        fn from(var: CtokenUnderlyingPriceAllCall) -> Self {
            CompoundLensCalls::CtokenUnderlyingPriceAll(var)
        }
    }
    impl ::std::convert::From<GetAccountLimitsCall> for CompoundLensCalls {
        fn from(var: GetAccountLimitsCall) -> Self {
            CompoundLensCalls::GetAccountLimits(var)
        }
    }
    impl ::std::convert::From<GetCompBalanceMetadataCall> for CompoundLensCalls {
        fn from(var: GetCompBalanceMetadataCall) -> Self {
            CompoundLensCalls::GetCompBalanceMetadata(var)
        }
    }
    impl ::std::convert::From<GetCompBalanceMetadataExtCall> for CompoundLensCalls {
        fn from(var: GetCompBalanceMetadataExtCall) -> Self {
            CompoundLensCalls::GetCompBalanceMetadataExt(var)
        }
    }
    impl ::std::convert::From<GetCompVotesCall> for CompoundLensCalls {
        fn from(var: GetCompVotesCall) -> Self {
            CompoundLensCalls::GetCompVotes(var)
        }
    }
    impl ::std::convert::From<GetGovProposalsCall> for CompoundLensCalls {
        fn from(var: GetGovProposalsCall) -> Self {
            CompoundLensCalls::GetGovProposals(var)
        }
    }
    impl ::std::convert::From<GetGovReceiptsCall> for CompoundLensCalls {
        fn from(var: GetGovReceiptsCall) -> Self {
            CompoundLensCalls::GetGovReceipts(var)
        }
    }
    #[doc = "`AccountLimits(address[],uint256,uint256)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AccountLimits {
        pub markets: Vec<ethers::core::types::Address>,
        pub liquidity: ethers::core::types::U256,
        pub shortfall: ethers::core::types::U256,
    }
    #[doc = "`CtokenBalances(address,uint256,uint256,uint256,uint256,uint256)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CtokenBalances {
        pub c_token: ethers::core::types::Address,
        pub balance_of: ethers::core::types::U256,
        pub borrow_balance_current: ethers::core::types::U256,
        pub balance_of_underlying: ethers::core::types::U256,
        pub token_balance: ethers::core::types::U256,
        pub token_allowance: ethers::core::types::U256,
    }
    #[doc = "`CtokenMetadata(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256,address,uint256,uint256)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CtokenMetadata {
        pub c_token: ethers::core::types::Address,
        pub exchange_rate_current: ethers::core::types::U256,
        pub supply_rate_per_block: ethers::core::types::U256,
        pub borrow_rate_per_block: ethers::core::types::U256,
        pub reserve_factor_mantissa: ethers::core::types::U256,
        pub total_borrows: ethers::core::types::U256,
        pub total_reserves: ethers::core::types::U256,
        pub total_supply: ethers::core::types::U256,
        pub total_cash: ethers::core::types::U256,
        pub is_listed: bool,
        pub collateral_factor_mantissa: ethers::core::types::U256,
        pub underlying_asset_address: ethers::core::types::Address,
        pub c_token_decimals: ethers::core::types::U256,
        pub underlying_decimals: ethers::core::types::U256,
    }
    #[doc = "`CtokenUnderlyingPrice(address,uint256)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CtokenUnderlyingPrice {
        pub c_token: ethers::core::types::Address,
        pub underlying_price: ethers::core::types::U256,
    }
    #[doc = "`CompBalanceMetadata(uint256,uint256,address)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CompBalanceMetadata {
        pub balance: ethers::core::types::U256,
        pub votes: ethers::core::types::U256,
        pub delegate: ethers::core::types::Address,
    }
    #[doc = "`CompBalanceMetadataExt(uint256,uint256,address,uint256)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CompBalanceMetadataExt {
        pub balance: ethers::core::types::U256,
        pub votes: ethers::core::types::U256,
        pub delegate: ethers::core::types::Address,
        pub allocated: ethers::core::types::U256,
    }
    #[doc = "`CompVotes(uint256,uint256)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CompVotes {
        pub block_number: ethers::core::types::U256,
        pub votes: ethers::core::types::U256,
    }
    #[doc = "`GovProposal(uint256,address,uint256,address[],uint256[],string[],bytes[],uint256,uint256,uint256,uint256,bool,bool)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GovProposal {
        pub proposal_id: ethers::core::types::U256,
        pub proposer: ethers::core::types::Address,
        pub eta: ethers::core::types::U256,
        pub targets: Vec<ethers::core::types::Address>,
        pub values: Vec<ethers::core::types::U256>,
        pub signatures: Vec<String>,
        pub calldatas: Vec<ethers::core::types::Bytes>,
        pub start_block: ethers::core::types::U256,
        pub end_block: ethers::core::types::U256,
        pub for_votes: ethers::core::types::U256,
        pub against_votes: ethers::core::types::U256,
        pub canceled: bool,
        pub executed: bool,
    }
    #[doc = "`GovReceipt(uint256,bool,bool,uint96)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GovReceipt {
        pub proposal_id: ethers::core::types::U256,
        pub has_voted: bool,
        pub support: bool,
        pub votes: u128,
    }
}
