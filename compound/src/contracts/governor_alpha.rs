pub use governor_alpha::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod governor_alpha {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "GovernorAlpha was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static GOVERNORALPHA_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"comp_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ProposalCanceled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ProposalCreated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ProposalExecuted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ProposalQueued\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"VoteCast\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"__abdicate\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"__acceptAdmin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"__executeSetTimelockPendingAdmin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"__queueSetTimelockPendingAdmin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cancel\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"castVote\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"castVoteBySig\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract CompInterface\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"execute\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\",\"components\":[]},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getReceipt\",\"outputs\":[{\"internalType\":\"struct GovernorAlpha.Receipt\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\",\"components\":[]}]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\",\"components\":[]},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"queue\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorAlpha.ProposalState\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract TimelockInterface\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static GOVERNORALPHA_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040523480156200001157600080fd5b506040516200391d3803806200391d83398101604081905262000034916200008a565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556200010a565b80516200008481620000f0565b92915050565b600080600060608486031215620000a057600080fd5b6000620000ae868662000077565b9350506020620000c18682870162000077565b9250506040620000d48682870162000077565b9150509250925092565b60006001600160a01b03821662000084565b620000fb81620000de565b81146200010757600080fd5b50565b613803806200011a6000396000f3fe60806040526004361061019c5760003560e01c8063452a9320116100ec578063d33219b41161008a578063ddf0b00911610064578063ddf0b00914610463578063deaaa7cc14610483578063e23a9a5214610498578063fe0d94c1146104c55761019c565b8063d33219b414610419578063da35c6641461042e578063da95691a146104435761019c565b80637bdbe4d0116100c65780637bdbe4d0146103ba57806391500671146103cf578063b58131b0146103ef578063b9a61961146104045761019c565b8063452a9320146103635780634634c61f14610385578063760fbc13146103a55761019c565b806320606b7011610159578063328dd98211610133578063328dd982146102d15780633932abb1146103015780633e4f49e61461031657806340e58ee5146103435761019c565b806320606b701461028757806321f43e421461029c57806324bc1a64146102bc5761019c565b8063013cf08b146101a157806302a251a3146101df57806306fdde0314610201578063109d0af81461022357806315373e3d1461024557806317977c6114610267575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612449565b6104d8565b6040516101d6999897969594939291906135ae565b60405180910390f35b3480156101eb57600080fd5b506101f4610531565b6040516101d691906132db565b34801561020d57600080fd5b50610216610538565b6040516101d69190613397565b34801561022f57600080fd5b5061023861056b565b6040516101d6919061337b565b34801561025157600080fd5b50610265610260366004612497565b61057a565b005b34801561027357600080fd5b506101f461028236600461228c565b610589565b34801561029357600080fd5b506101f461059b565b3480156102a857600080fd5b506102656102b73660046122b2565b6105b2565b3480156102c857600080fd5b506101f4610699565b3480156102dd57600080fd5b506102f16102ec366004612449565b6106a7565b6040516101d6949392919061328e565b34801561030d57600080fd5b506101f4610936565b34801561032257600080fd5b50610336610331366004612449565b61093b565b6040516101d69190613389565b34801561034f57600080fd5b5061026561035e366004612449565b610abd565b34801561036f57600080fd5b50610378610d26565b6040516101d69190613138565b34801561039157600080fd5b506102656103a03660046124c7565b610d35565b3480156103b157600080fd5b50610265610ecc565b3480156103c657600080fd5b506101f4610f08565b3480156103db57600080fd5b506102656103ea3660046122b2565b610f0d565b3480156103fb57600080fd5b506101f4610fe2565b34801561041057600080fd5b50610265610ff0565b34801561042557600080fd5b50610238611075565b34801561043a57600080fd5b506101f4611084565b34801561044f57600080fd5b506101f461045e3660046122ec565b61108a565b34801561046f57600080fd5b5061026561047e366004612449565b6114ac565b34801561048f57600080fd5b506101f4611716565b3480156104a457600080fd5b506104b86104b3366004612467565b611722565b6040516101d691906134f8565b6102656104d3366004612449565b611791565b6004602052600090815260409020805460018201546002830154600784015460088501546009860154600a870154600b9097015495966001600160a01b0390951695939492939192909160ff8082169161010090041689565b6143805b90565b60405180604001604052806017815260200176436f6d706f756e6420476f7665726e6f7220416c70686160481b81525081565b6001546001600160a01b031681565b610585338383611956565b5050565b60056020526000908152604090205481565b6040516105a790613122565b604051809103902081565b6002546001600160a01b031633146105e55760405162461bcd60e51b81526004016105dc906133d8565b60405180910390fd5b600080546040516001600160a01b0390911691630825f38f9183919061060f908790602001613138565b604051602081830303815290604052856040518563ffffffff1660e01b815260040161063e9493929190613161565b600060405180830381600087803b15801561065857600080fd5b505af115801561066c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106949190810190612414565b505050565b6954b40b1f852bda00000090565b6060806060806000600460008781526020019081526020016000209050806003018160040182600501836006018380548060200260200160405190810160405280929190818152602001828054801561072957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161070b575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561077b57602002820191906000526020600020905b815481526020019060010190808311610767575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b8282101561084e5760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561083a5780601f1061080f5761010080835404028352916020019161083a565b820191906000526020600020905b81548152906001019060200180831161081d57829003601f168201915b5050505050815260200190600101906107a3565b50505050915080805480602002602001604051908101604052809291908181526020016000905b828210156109205760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561090c5780601f106108e15761010080835404028352916020019161090c565b820191906000526020600020905b8154815290600101906020018083116108ef57829003601f168201915b505050505081526020019060010190610875565b5050505090509450945094509450509193509193565b600190565b6000816003541015801561094f5750600082115b61096b5760405162461bcd60e51b81526004016105dc906133e8565b6000828152600460205260409020600b81015460ff1615610990576002915050610ab8565b806007015443116109a5576000915050610ab8565b806008015443116109ba576001915050610ab8565b80600a015481600901541115806109db57506109d4610699565b8160090154105b156109ea576003915050610ab8565b60028101546109fd576004915050610ab8565b600b810154610100900460ff1615610a19576007915050610ab8565b6002810154600054604080516360d143f160e11b81529051610aa293926001600160a01b03169163c1a287e2916004808301926020929190829003018186803b158015610a6557600080fd5b505afa158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a9d91908101906123f6565b611b1f565b4210610ab2576006915050610ab8565b60059150505b919050565b6000610ac88261093b565b90506007816007811115610ad857fe5b1415610af65760405162461bcd60e51b81526004016105dc906134b8565b60008281526004602052604090206002546001600160a01b0316331480610bc15750610b20610fe2565b60018054838201546001600160a01b039182169263782d6fe19290911690610b49904390611b4b565b6040518363ffffffff1660e01b8152600401610b669291906131b0565b60206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bb6919081019061252f565b6001600160601b0316105b610bdd5760405162461bcd60e51b81526004016105dc90613458565b600b8101805460ff1916600117905560005b6003820154811015610ce9576000546003830180546001600160a01b039092169163591fcdfe919084908110610c2157fe5b6000918252602090912001546004850180546001600160a01b039092169185908110610c4957fe5b9060005260206000200154856005018581548110610c6357fe5b90600052602060002001866006018681548110610c7c57fe5b9060005260206000200187600201546040518663ffffffff1660e01b8152600401610cab95949392919061324d565b600060405180830381600087803b158015610cc557600080fd5b505af1158015610cd9573d6000803e3d6000fd5b505060019092019150610bef9050565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c83604051610d1991906132db565b60405180910390a1505050565b6002546001600160a01b031681565b6000604051610d4390613122565b604080519182900382208282019091526017825276436f6d706f756e6420476f7665726e6f7220416c70686160481b6020909201919091527ff5eb22c2e7100465020c98b00537528808db4fec6eb24c550685a92742247bc5610da4611b73565b30604051602001610db894939291906132e9565b6040516020818303038152906040528051906020012090506000604051610dde9061312d565b604051908190038120610df7918990899060200161331e565b60405160208183030381529060405280519060200120905060008282604051602001610e249291906130f1565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610e619493929190613346565b6020604051602081039080840390855afa158015610e83573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610eb65760405162461bcd60e51b81526004016105dc90613498565b610ec1818a8a611956565b505050505050505050565b6002546001600160a01b03163314610ef65760405162461bcd60e51b81526004016105dc906134e8565b600280546001600160a01b0319169055565b600a90565b6002546001600160a01b03163314610f375760405162461bcd60e51b81526004016105dc90613418565b600080546040516001600160a01b0390911691633a66f90191839190610f61908790602001613138565b604051602081830303815290604052856040518563ffffffff1660e01b8152600401610f909493929190613161565b602060405180830381600087803b158015610faa57600080fd5b505af1158015610fbe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061069491908101906123f6565b69152d02c7e14af680000090565b6002546001600160a01b0316331461101a5760405162461bcd60e51b81526004016105dc906133a8565b6000805460408051630e18b68160e01b815290516001600160a01b0390921692630e18b6819260048084019382900301818387803b15801561105b57600080fd5b505af115801561106f573d6000803e3d6000fd5b50505050565b6000546001600160a01b031681565b60035481565b6000611094610fe2565b600180546001600160a01b03169063782d6fe19033906110b5904390611b4b565b6040518363ffffffff1660e01b81526004016110d2929190613146565b60206040518083038186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611122919081019061252f565b6001600160601b0316116111485760405162461bcd60e51b81526004016105dc90613488565b8451865114801561115a575083518651145b8015611167575082518651145b6111835760405162461bcd60e51b81526004016105dc90613448565b85516111a15760405162461bcd60e51b81526004016105dc90613478565b6111a9610f08565b865111156111c95760405162461bcd60e51b81526004016105dc90613428565b3360009081526005602052604090205480156112465760006111ea8261093b565b905060018160078111156111fa57fe5b14156112185760405162461bcd60e51b81526004016105dc906134a8565b600081600781111561122657fe5b14156112445760405162461bcd60e51b81526004016105dc90613408565b505b600061125443610a9d610936565b9050600061126482610a9d610531565b6003805460010190559050611277611cd6565b604051806101a001604052806003548152602001336001600160a01b03168152602001600081526020018b81526020018a815260200189815260200188815260200184815260200183815260200160008152602001600081526020016000151581526020016000151581525090508060046000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301908051906020019061135a929190611d4b565b5060808201518051611376916004840191602090910190611db0565b5060a08201518051611392916005840191602090910190611df7565b5060c082015180516113ae916006840191602090910190611e50565b5060e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b0160006101000a81548160ff02191690831515021790555061018082015181600b0160016101000a81548160ff02191690831515021790555090505080600001516005600083602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e08160000151338c8c8c8c89898e60405161149499989796959493929190613506565b60405180910390a15193505050505b95945050505050565b60046114b78261093b565b60078111156114c257fe5b146114df5760405162461bcd60e51b81526004016105dc906133b8565b600081815260046020818152604080842084548251630d48571f60e31b815292519195946115349442946001600160a01b0390931693636a42b8f8938084019390829003018186803b158015610a6557600080fd5b905060005b60038301548110156116dc576116d483600301828154811061155757fe5b6000918252602090912001546004850180546001600160a01b03909216918490811061157f57fe5b906000526020600020015485600501848154811061159957fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156116275780601f106115fc57610100808354040283529160200191611627565b820191906000526020600020905b81548152906001019060200180831161160a57829003601f168201915b505050505086600601858154811061163b57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156116c95780601f1061169e576101008083540402835291602001916116c9565b820191906000526020600020905b8154815290600101906020018083116116ac57829003601f168201915b505050505086611b77565b600101611539565b50600282018190556040517f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290610d199085908490613634565b6040516105a79061312d565b61172a611ea9565b5060008281526004602090815260408083206001600160a01b0385168452600c018252918290208251606081018452905460ff80821615158352610100820416151592820192909252620100009091046001600160601b0316918101919091525b92915050565b600561179c8261093b565b60078111156117a757fe5b146117c45760405162461bcd60e51b81526004016105dc906133c8565b6000818152600460205260408120600b8101805461ff001916610100179055905b600382015481101561191a576000546004830180546001600160a01b0390921691630825f38f91908490811061181757fe5b906000526020600020015484600301848154811061183157fe5b6000918252602090912001546004860180546001600160a01b03909216918690811061185957fe5b906000526020600020015486600501868154811061187357fe5b9060005260206000200187600601878154811061188c57fe5b9060005260206000200188600201546040518763ffffffff1660e01b81526004016118bb95949392919061324d565b6000604051808303818588803b1580156118d457600080fd5b505af11580156118e8573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526119119190810190612414565b506001016117e5565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f8260405161194a91906132db565b60405180910390a15050565b60016119618361093b565b600781111561196c57fe5b146119895760405162461bcd60e51b81526004016105dc906134c8565b60008281526004602090815260408083206001600160a01b0387168452600c8101909252909120805460ff16156119d25760405162461bcd60e51b81526004016105dc906133f8565b600154600783015460405163782d6fe160e01b81526000926001600160a01b03169163782d6fe191611a08918a916004016131b0565b60206040518083038186803b158015611a2057600080fd5b505afa158015611a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a58919081019061252f565b90508315611a8157611a778360090154826001600160601b0316611b1f565b6009840155611a9e565b611a9883600a0154826001600160601b0316611b1f565b600a8401555b8154600160ff199091161761ff00191661010085151502176dffffffffffffffffffffffff00001916620100006001600160601b038316021782556040517f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c4690611b0f9088908890889086906131be565b60405180910390a1505050505050565b600082820183811015611b445760405162461bcd60e51b81526004016105dc90613438565b9392505050565b600082821115611b6d5760405162461bcd60e51b81526004016105dc906134d8565b50900390565b4690565b6000546040516001600160a01b039091169063f2b0653790611ba590889088908890889088906020016131f3565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611bd791906132db565b60206040518083038186803b158015611bef57600080fd5b505afa158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c2791908101906123d8565b15611c445760405162461bcd60e51b81526004016105dc90613468565b600054604051633a66f90160e01b81526001600160a01b0390911690633a66f90190611c7c90889088908890889088906004016131f3565b602060405180830381600087803b158015611c9657600080fd5b505af1158015611caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cce91908101906123f6565b505050505050565b604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b828054828255906000526020600020908101928215611da0579160200282015b82811115611da057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611d6b565b50611dac929150611ec9565b5090565b828054828255906000526020600020908101928215611deb579160200282015b82811115611deb578251825591602001919060010190611dd0565b50611dac929150611eed565b828054828255906000526020600020908101928215611e44579160200282015b82811115611e445782518051611e34918491602090910190611f07565b5091602001919060010190611e17565b50611dac929150611f74565b828054828255906000526020600020908101928215611e9d579160200282015b82811115611e9d5782518051611e8d918491602090910190611f07565b5091602001919060010190611e70565b50611dac929150611f97565b604080516060810182526000808252602082018190529181019190915290565b61053591905b80821115611dac5780546001600160a01b0319168155600101611ecf565b61053591905b80821115611dac5760008155600101611ef3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f4857805160ff1916838001178555611deb565b82800160010185558215611deb5791820182811115611deb578251825591602001919060010190611dd0565b61053591905b80821115611dac576000611f8e8282611fba565b50600101611f7a565b61053591905b80821115611dac576000611fb18282611fba565b50600101611f9d565b50805460018160011615610100020316600290046000825580601f10611fe05750611ffe565b601f016020900490600052602060002090810190611ffe9190611eed565b50565b803561178b81613788565b600082601f83011261201d57600080fd5b813561203061202b82613669565b613642565b9150818183526020840193506020810190508385602084028201111561205557600080fd5b60005b83811015612081578161206b8882612001565b8452506020928301929190910190600101612058565b5050505092915050565b600082601f83011261209c57600080fd5b81356120aa61202b82613669565b81815260209384019390925082018360005b8381101561208157813586016120d288826121e1565b84525060209283019291909101906001016120bc565b600082601f8301126120f957600080fd5b813561210761202b82613669565b81815260209384019390925082018360005b83811015612081578135860161212f88826121e1565b8452506020928301929190910190600101612119565b600082601f83011261215657600080fd5b813561216461202b82613669565b9150818183526020840193506020810190508385602084028201111561218957600080fd5b60005b83811015612081578161219f88826121cb565b845250602092830192919091019060010161218c565b803561178b8161379c565b805161178b8161379c565b803561178b816137a5565b805161178b816137a5565b600082601f8301126121f257600080fd5b813561220061202b8261368a565b9150808252602083016020830185838301111561221c57600080fd5b61222783828461373c565b50505092915050565b600082601f83011261224157600080fd5b815161224f61202b8261368a565b9150808252602083016020830185838301111561226b57600080fd5b612227838284613748565b803561178b816137ae565b805161178b816137b7565b60006020828403121561229e57600080fd5b60006122aa8484612001565b949350505050565b600080604083850312156122c557600080fd5b60006122d18585612001565b92505060206122e2858286016121cb565b9150509250929050565b600080600080600060a0868803121561230457600080fd5b853567ffffffffffffffff81111561231b57600080fd5b6123278882890161200c565b955050602086013567ffffffffffffffff81111561234457600080fd5b61235088828901612145565b945050604086013567ffffffffffffffff81111561236d57600080fd5b612379888289016120e8565b935050606086013567ffffffffffffffff81111561239657600080fd5b6123a28882890161208b565b925050608086013567ffffffffffffffff8111156123bf57600080fd5b6123cb888289016121e1565b9150509295509295909350565b6000602082840312156123ea57600080fd5b60006122aa84846121c0565b60006020828403121561240857600080fd5b60006122aa84846121d6565b60006020828403121561242657600080fd5b815167ffffffffffffffff81111561243d57600080fd5b6122aa84828501612230565b60006020828403121561245b57600080fd5b60006122aa84846121cb565b6000806040838503121561247a57600080fd5b600061248685856121cb565b92505060206122e285828601612001565b600080604083850312156124aa57600080fd5b60006124b685856121cb565b92505060206122e2858286016121b5565b600080600080600060a086880312156124df57600080fd5b60006124eb88886121cb565b95505060206124fc888289016121b5565b945050604061250d88828901612276565b935050606061251e888289016121cb565b92505060806123cb888289016121cb565b60006020828403121561254157600080fd5b60006122aa8484612281565b60006125598383612588565b505060200190565b6000611b44838361272a565b60006125598383612710565b61258281613709565b82525050565b612582816136d1565b600061259c826136c4565b6125a681856136c8565b93506125b1836136b2565b8060005b838110156125df5781516125c9888261254d565b97506125d4836136b2565b9250506001016125b5565b509495945050505050565b60006125f5826136c4565b6125ff81856136c8565b935083602082028501612611856136b2565b8060005b8581101561264b578484038952815161262e8582612561565b9450612639836136b2565b60209a909a0199925050600101612615565b5091979650505050505050565b6000612663826136c4565b61266d81856136c8565b93508360208202850161267f856136b2565b8060005b8581101561264b578484038952815161269c8582612561565b94506126a7836136b2565b60209a909a0199925050600101612683565b60006126c4826136c4565b6126ce81856136c8565b93506126d9836136b2565b8060005b838110156125df5781516126f1888261256d565b97506126fc836136b2565b9250506001016126dd565b612582816136dc565b61258281610535565b61258261272582610535565b610535565b6000612735826136c4565b61273f81856136c8565b935061274f818560208601613748565b61275881613774565b9093019392505050565b60008154600181166000811461277f57600181146127a5576127e4565b607f600283041661279081876136c8565b60ff19841681529550506020850192506127e4565b600282046127b381876136c8565b95506127be856136b8565b60005b828110156127dd578154888201526001909101906020016127c1565b8701945050505b505092915050565b61258281613710565b6125828161371b565b61258281613726565b60006128146039836136c8565b7f476f7665726e6f72416c7068613a3a5f5f61636365707441646d696e3a20736581527f6e646572206d75737420626520676f7620677561726469616e00000000000000602082015260400192915050565b60006128736044836136c8565b7f476f7665726e6f72416c7068613a3a71756575653a2070726f706f73616c206381527f616e206f6e6c79206265207175657565642069662069742069732073756363656020820152631959195960e21b604082015260600192915050565b60006128df6045836136c8565b7f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c81527f2063616e206f6e6c7920626520657865637574656420696620697420697320716020820152641d595d595960da1b604082015260600192915050565b600061294c600283610ab8565b61190160f01b815260020192915050565b600061296a604c836136c8565b7f476f7665726e6f72416c7068613a3a5f5f6578656375746553657454696d656c81527f6f636b50656e64696e6741646d696e3a2073656e646572206d7573742062652060208201526b33b7bb1033bab0b93234b0b760a11b604082015260600192915050565b60006129de6018836136c8565b7f73657450656e64696e6741646d696e2861646472657373290000000000000000815260200192915050565b6000612a176029836136c8565b7f476f7665726e6f72416c7068613a3a73746174653a20696e76616c69642070728152681bdc1bdcd85b081a5960ba1b602082015260400192915050565b6000612a62602d836136c8565b7f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465722081526c185b1c9958591e481d9bdd1959609a1b602082015260400192915050565b6000612ab16059836136c8565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766581527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000604082015260600192915050565b6000612b36604a836136c8565b7f476f7665726e6f72416c7068613a3a5f5f717565756553657454696d656c6f6381527f6b50656e64696e6741646d696e3a2073656e646572206d75737420626520676f6020820152693b1033bab0b93234b0b760b11b604082015260600192915050565b6000612ba86028836136c8565b7f476f7665726e6f72416c7068613a3a70726f706f73653a20746f6f206d616e7981526720616374696f6e7360c01b602082015260400192915050565b6000612bf26011836136c8565b706164646974696f6e206f766572666c6f7760781b815260200192915050565b6000612c1f604383610ab8565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000612c8a602783610ab8565b7f42616c6c6f742875696e743235362070726f706f73616c49642c626f6f6c20738152667570706f72742960c81b602082015260270192915050565b6000612cd36044836136c8565b7f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73616c81527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d6020820152630c2e8c6d60e31b604082015260600192915050565b6000612d3f602f836136c8565b7f476f7665726e6f72416c7068613a3a63616e63656c3a2070726f706f7365722081526e18589bdd99481d1a1c995cda1bdb19608a1b602082015260400192915050565b6000612d906044836136c8565b7f476f7665726e6f72416c7068613a3a5f71756575654f725265766572743a207081527f726f706f73616c20616374696f6e20616c7265616479207175657565642061746020820152632065746160e01b604082015260600192915050565b6000612dfc602c836136c8565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206d7573742070726f81526b7669646520616374696f6e7360a01b602082015260400192915050565b6000612e4a603f836136c8565b7f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73657281527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c6400602082015260400192915050565b6000612ea9602f836136c8565b7f476f7665726e6f72416c7068613a3a63617374566f746542795369673a20696e81526e76616c6964207369676e617475726560881b602082015260400192915050565b6000612efa6058836136c8565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766581527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208201527f20616c7265616479206163746976652070726f706f73616c0000000000000000604082015260600192915050565b6000612f7f6036836136c8565b7f476f7665726e6f72416c7068613a3a63616e63656c3a2063616e6e6f742063618152751b98d95b08195e1958dd5d1959081c1c9bdc1bdcd85b60521b602082015260400192915050565b6000612fd7602a836136c8565b7f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f74696e67815269081a5cc818db1bdcd95960b21b602082015260400192915050565b60006130236015836136c8565b747375627472616374696f6e20756e646572666c6f7760581b815260200192915050565b60006130546036836136c8565b7f476f7665726e6f72416c7068613a3a5f5f61626469636174653a2073656e6465815275391036bab9ba1031329033b7bb1033bab0b93234b0b760511b602082015260400192915050565b805160608301906130b08482612707565b5060208201516130c36020850182612707565b50604082015161106f60408501826130e8565b612582816136f7565b61258281613731565b612582816136fd565b60006130fc8261293f565b91506131088285612719565b6020820191506131188284612719565b5060200192915050565b600061178b82612c12565b600061178b82612c7d565b6020810161178b8284612588565b604081016131548285612579565b611b446020830184612710565b60a0810161316f8287612588565b61317c60208301866127fe565b818103604083015261318d816129d1565b905081810360608301526131a1818561272a565b90506114a36080830184612710565b604081016131548285612588565b608081016131cc8287612588565b6131d96020830186612710565b6131e66040830185612707565b6114a360608301846130df565b60a081016132018288612588565b61320e6020830187612710565b8181036040830152613220818661272a565b90508181036060830152613234818561272a565b90506132436080830184612710565b9695505050505050565b60a0810161325b8288612588565b6132686020830187612710565b818103604083015261327a8186612762565b905081810360608301526132348185612762565b6080808252810161329f8187612591565b905081810360208301526132b381866126b9565b905081810360408301526132c78185612658565b9050818103606083015261324381846125ea565b6020810161178b8284612710565b608081016132f78287612710565b6133046020830186612710565b6133116040830185612710565b6114a36060830184612588565b6060810161332c8286612710565b6133396020830185612710565b6122aa6040830184612707565b608081016133548287612710565b61336160208301866130d6565b61336e6040830185612710565b6114a36060830184612710565b6020810161178b82846127ec565b6020810161178b82846127f5565b60208082528101611b44818461272a565b6020808252810161178b81612807565b6020808252810161178b81612866565b6020808252810161178b816128d2565b6020808252810161178b8161295d565b6020808252810161178b81612a0a565b6020808252810161178b81612a55565b6020808252810161178b81612aa4565b6020808252810161178b81612b29565b6020808252810161178b81612b9b565b6020808252810161178b81612be5565b6020808252810161178b81612cc6565b6020808252810161178b81612d32565b6020808252810161178b81612d83565b6020808252810161178b81612def565b6020808252810161178b81612e3d565b6020808252810161178b81612e9c565b6020808252810161178b81612eed565b6020808252810161178b81612f72565b6020808252810161178b81612fca565b6020808252810161178b81613016565b6020808252810161178b81613047565b6060810161178b828461309f565b6101208101613515828c612710565b613522602083018b612579565b8181036040830152613534818a612591565b9050818103606083015261354881896126b9565b9050818103608083015261355c8188612658565b905081810360a083015261357081876125ea565b905061357f60c0830186612710565b61358c60e0830185612710565b81810361010083015261359f818461272a565b9b9a5050505050505050505050565b61012081016135bd828c612710565b6135ca602083018b612588565b6135d7604083018a612710565b6135e46060830189612710565b6135f16080830188612710565b6135fe60a0830187612710565b61360b60c0830186612710565b61361860e0830185612707565b613626610100830184612707565b9a9950505050505050505050565b604081016131548285612710565b60405181810167ffffffffffffffff8111828210171561366157600080fd5b604052919050565b600067ffffffffffffffff82111561368057600080fd5b5060209081020190565b600067ffffffffffffffff8211156136a157600080fd5b506020601f91909101601f19160190565b60200190565b60009081526020902090565b5190565b90815260200190565b600061178b826136eb565b151590565b80610ab88161377e565b6001600160a01b031690565b60ff1690565b6001600160601b031690565b600061178b825b600061178b826136d1565b600061178b826136e1565b600061178b82610535565b600061178b826136fd565b82818337506000910152565b60005b8381101561376357818101518382015260200161374b565b8381111561106f5750506000910152565b601f01601f191690565b60088110611ffe57fe5b613791816136d1565b8114611ffe57600080fd5b613791816136dc565b61379181610535565b613791816136f7565b613791816136fd56fea365627a7a72315820a35186f3a4877b4c49d2b9a40eb4c4eafbb66480e3f3c043035697647e4779176c6578706572696d656e74616cf564736f6c63430005110040" . parse () . expect ("invalid bytecode")
        });
    pub struct GovernorAlpha<M>(ethers::contract::Contract<M>);
    impl<M> Clone for GovernorAlpha<M> {
        fn clone(&self) -> Self {
            GovernorAlpha(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for GovernorAlpha<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for GovernorAlpha<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(GovernorAlpha))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> GovernorAlpha<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), GOVERNORALPHA_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                GOVERNORALPHA_ABI.clone(),
                GOVERNORALPHA_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `BALLOT_TYPEHASH` (0xdeaaa7cc) function"]
        pub fn ballot_typehash(&self) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([222, 170, 167, 204], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `DOMAIN_TYPEHASH` (0x20606b70) function"]
        pub fn domain_typehash(&self) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([32, 96, 107, 112], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `__abdicate` (0x760fbc13) function"]
        pub fn abdicate(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([118, 15, 188, 19], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `__acceptAdmin` (0xb9a61961) function"]
        pub fn accept_admin(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 166, 25, 97], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `__executeSetTimelockPendingAdmin` (0x21f43e42) function"]
        pub fn execute_set_timelock_pending_admin(
            &self,
            new_pending_admin: ethers::core::types::Address,
            eta: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([33, 244, 62, 66], (new_pending_admin, eta))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `__queueSetTimelockPendingAdmin` (0x91500671) function"]
        pub fn queue_set_timelock_pending_admin(
            &self,
            new_pending_admin: ethers::core::types::Address,
            eta: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([145, 80, 6, 113], (new_pending_admin, eta))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cancel` (0x40e58ee5) function"]
        pub fn cancel(
            &self,
            proposal_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([64, 229, 142, 229], proposal_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `castVote` (0x15373e3d) function"]
        pub fn cast_vote(
            &self,
            proposal_id: ethers::core::types::U256,
            support: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([21, 55, 62, 61], (proposal_id, support))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `castVoteBySig` (0x4634c61f) function"]
        pub fn cast_vote_by_sig(
            &self,
            proposal_id: ethers::core::types::U256,
            support: bool,
            v: u8,
            r: [u8; 32],
            s: [u8; 32],
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([70, 52, 198, 31], (proposal_id, support, v, r, s))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `comp` (0x109d0af8) function"]
        pub fn comp(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([16, 157, 10, 248], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `execute` (0xfe0d94c1) function"]
        pub fn execute(
            &self,
            proposal_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([254, 13, 148, 193], proposal_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getActions` (0x328dd982) function"]
        pub fn get_actions(
            &self,
            proposal_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ::std::vec::Vec<ethers::core::types::Address>,
                ::std::vec::Vec<ethers::core::types::U256>,
                ::std::vec::Vec<String>,
                ::std::vec::Vec<ethers::core::types::Bytes>,
            ),
        > {
            self.0
                .method_hash([50, 141, 217, 130], proposal_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReceipt` (0xe23a9a52) function"]
        pub fn get_receipt(
            &self,
            proposal_id: ethers::core::types::U256,
            voter: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, Receipt> {
            self.0
                .method_hash([226, 58, 154, 82], (proposal_id, voter))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `guardian` (0x452a9320) function"]
        pub fn guardian(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([69, 42, 147, 32], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `latestProposalIds` (0x17977c61) function"]
        pub fn latest_proposal_ids(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([23, 151, 124, 97], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `name` (0x06fdde03) function"]
        pub fn name(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([6, 253, 222, 3], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proposalCount` (0xda35c664) function"]
        pub fn proposal_count(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([218, 53, 198, 100], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proposalMaxOperations` (0x7bdbe4d0) function"]
        pub fn proposal_max_operations(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([123, 219, 228, 208], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proposalThreshold` (0xb58131b0) function"]
        pub fn proposal_threshold(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([181, 129, 49, 176], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proposals` (0x013cf08b) function"]
        pub fn proposals(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::Address,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                bool,
                bool,
            ),
        > {
            self.0
                .method_hash([1, 60, 240, 139], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `propose` (0xda95691a) function"]
        pub fn propose(
            &self,
            targets: ::std::vec::Vec<ethers::core::types::Address>,
            values: ::std::vec::Vec<ethers::core::types::U256>,
            signatures: ::std::vec::Vec<String>,
            calldatas: ::std::vec::Vec<ethers::core::types::Bytes>,
            description: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [218, 149, 105, 26],
                    (targets, values, signatures, calldatas, description),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `queue` (0xddf0b009) function"]
        pub fn queue(
            &self,
            proposal_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([221, 240, 176, 9], proposal_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `quorumVotes` (0x24bc1a64) function"]
        pub fn quorum_votes(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([36, 188, 26, 100], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `state` (0x3e4f49e6) function"]
        pub fn state(
            &self,
            proposal_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([62, 79, 73, 230], proposal_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `timelock` (0xd33219b4) function"]
        pub fn timelock(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([211, 50, 25, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `votingDelay` (0x3932abb1) function"]
        pub fn voting_delay(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([57, 50, 171, 177], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `votingPeriod` (0x02a251a3) function"]
        pub fn voting_period(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([2, 162, 81, 163], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `ProposalCanceled` event"]
        pub fn proposal_canceled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ProposalCanceledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ProposalCreated` event"]
        pub fn proposal_created_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ProposalCreatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ProposalExecuted` event"]
        pub fn proposal_executed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ProposalExecutedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ProposalQueued` event"]
        pub fn proposal_queued_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ProposalQueuedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `VoteCast` event"]
        pub fn vote_cast_filter(&self) -> ethers::contract::builders::Event<M, VoteCastFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, GovernorAlphaEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for GovernorAlpha<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ProposalCanceled", abi = "ProposalCanceled(uint256)")]
    pub struct ProposalCanceledFilter {
        pub id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "ProposalCreated",
        abi = "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"
    )]
    pub struct ProposalCreatedFilter {
        pub id: ethers::core::types::U256,
        pub proposer: ethers::core::types::Address,
        pub targets: Vec<ethers::core::types::Address>,
        pub values: Vec<ethers::core::types::U256>,
        pub signatures: Vec<String>,
        pub calldatas: Vec<ethers::core::types::Bytes>,
        pub start_block: ethers::core::types::U256,
        pub end_block: ethers::core::types::U256,
        pub description: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ProposalExecuted", abi = "ProposalExecuted(uint256)")]
    pub struct ProposalExecutedFilter {
        pub id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ProposalQueued", abi = "ProposalQueued(uint256,uint256)")]
    pub struct ProposalQueuedFilter {
        pub id: ethers::core::types::U256,
        pub eta: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "VoteCast", abi = "VoteCast(address,uint256,bool,uint256)")]
    pub struct VoteCastFilter {
        pub voter: ethers::core::types::Address,
        pub proposal_id: ethers::core::types::U256,
        pub support: bool,
        pub votes: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum GovernorAlphaEvents {
        ProposalCanceledFilter(ProposalCanceledFilter),
        ProposalCreatedFilter(ProposalCreatedFilter),
        ProposalExecutedFilter(ProposalExecutedFilter),
        ProposalQueuedFilter(ProposalQueuedFilter),
        VoteCastFilter(VoteCastFilter),
    }
    impl ethers::contract::EthLogDecode for GovernorAlphaEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ProposalCanceledFilter::decode_log(log) {
                return Ok(GovernorAlphaEvents::ProposalCanceledFilter(decoded));
            }
            if let Ok(decoded) = ProposalCreatedFilter::decode_log(log) {
                return Ok(GovernorAlphaEvents::ProposalCreatedFilter(decoded));
            }
            if let Ok(decoded) = ProposalExecutedFilter::decode_log(log) {
                return Ok(GovernorAlphaEvents::ProposalExecutedFilter(decoded));
            }
            if let Ok(decoded) = ProposalQueuedFilter::decode_log(log) {
                return Ok(GovernorAlphaEvents::ProposalQueuedFilter(decoded));
            }
            if let Ok(decoded) = VoteCastFilter::decode_log(log) {
                return Ok(GovernorAlphaEvents::VoteCastFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for GovernorAlphaEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                GovernorAlphaEvents::ProposalCanceledFilter(element) => element.fmt(f),
                GovernorAlphaEvents::ProposalCreatedFilter(element) => element.fmt(f),
                GovernorAlphaEvents::ProposalExecutedFilter(element) => element.fmt(f),
                GovernorAlphaEvents::ProposalQueuedFilter(element) => element.fmt(f),
                GovernorAlphaEvents::VoteCastFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `BALLOT_TYPEHASH` function with signature `BALLOT_TYPEHASH()` and selector `[222, 170, 167, 204]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "BALLOT_TYPEHASH", abi = "BALLOT_TYPEHASH()")]
    pub struct BallotTypehashCall;
    #[doc = "Container type for all input parameters for the `DOMAIN_TYPEHASH` function with signature `DOMAIN_TYPEHASH()` and selector `[32, 96, 107, 112]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "DOMAIN_TYPEHASH", abi = "DOMAIN_TYPEHASH()")]
    pub struct DomainTypehashCall;
    #[doc = "Container type for all input parameters for the `__abdicate` function with signature `__abdicate()` and selector `[118, 15, 188, 19]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "__abdicate", abi = "__abdicate()")]
    pub struct AbdicateCall;
    #[doc = "Container type for all input parameters for the `__acceptAdmin` function with signature `__acceptAdmin()` and selector `[185, 166, 25, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "__acceptAdmin", abi = "__acceptAdmin()")]
    pub struct AcceptAdminCall;
    #[doc = "Container type for all input parameters for the `__executeSetTimelockPendingAdmin` function with signature `__executeSetTimelockPendingAdmin(address,uint256)` and selector `[33, 244, 62, 66]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "__executeSetTimelockPendingAdmin",
        abi = "__executeSetTimelockPendingAdmin(address,uint256)"
    )]
    pub struct ExecuteSetTimelockPendingAdminCall {
        pub new_pending_admin: ethers::core::types::Address,
        pub eta: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `__queueSetTimelockPendingAdmin` function with signature `__queueSetTimelockPendingAdmin(address,uint256)` and selector `[145, 80, 6, 113]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "__queueSetTimelockPendingAdmin",
        abi = "__queueSetTimelockPendingAdmin(address,uint256)"
    )]
    pub struct QueueSetTimelockPendingAdminCall {
        pub new_pending_admin: ethers::core::types::Address,
        pub eta: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `cancel` function with signature `cancel(uint256)` and selector `[64, 229, 142, 229]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "cancel", abi = "cancel(uint256)")]
    pub struct CancelCall {
        pub proposal_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `castVote` function with signature `castVote(uint256,bool)` and selector `[21, 55, 62, 61]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "castVote", abi = "castVote(uint256,bool)")]
    pub struct CastVoteCall {
        pub proposal_id: ethers::core::types::U256,
        pub support: bool,
    }
    #[doc = "Container type for all input parameters for the `castVoteBySig` function with signature `castVoteBySig(uint256,bool,uint8,bytes32,bytes32)` and selector `[70, 52, 198, 31]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "castVoteBySig",
        abi = "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"
    )]
    pub struct CastVoteBySigCall {
        pub proposal_id: ethers::core::types::U256,
        pub support: bool,
        pub v: u8,
        pub r: [u8; 32],
        pub s: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `comp` function with signature `comp()` and selector `[16, 157, 10, 248]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "comp", abi = "comp()")]
    pub struct CompCall;
    #[doc = "Container type for all input parameters for the `execute` function with signature `execute(uint256)` and selector `[254, 13, 148, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "execute", abi = "execute(uint256)")]
    pub struct ExecuteCall {
        pub proposal_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getActions` function with signature `getActions(uint256)` and selector `[50, 141, 217, 130]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getActions", abi = "getActions(uint256)")]
    pub struct GetActionsCall {
        pub proposal_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getReceipt` function with signature `getReceipt(uint256,address)` and selector `[226, 58, 154, 82]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getReceipt", abi = "getReceipt(uint256,address)")]
    pub struct GetReceiptCall {
        pub proposal_id: ethers::core::types::U256,
        pub voter: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `guardian` function with signature `guardian()` and selector `[69, 42, 147, 32]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "guardian", abi = "guardian()")]
    pub struct GuardianCall;
    #[doc = "Container type for all input parameters for the `latestProposalIds` function with signature `latestProposalIds(address)` and selector `[23, 151, 124, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "latestProposalIds", abi = "latestProposalIds(address)")]
    pub struct LatestProposalIdsCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `name` function with signature `name()` and selector `[6, 253, 222, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "name", abi = "name()")]
    pub struct NameCall;
    #[doc = "Container type for all input parameters for the `proposalCount` function with signature `proposalCount()` and selector `[218, 53, 198, 100]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "proposalCount", abi = "proposalCount()")]
    pub struct ProposalCountCall;
    #[doc = "Container type for all input parameters for the `proposalMaxOperations` function with signature `proposalMaxOperations()` and selector `[123, 219, 228, 208]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "proposalMaxOperations", abi = "proposalMaxOperations()")]
    pub struct ProposalMaxOperationsCall;
    #[doc = "Container type for all input parameters for the `proposalThreshold` function with signature `proposalThreshold()` and selector `[181, 129, 49, 176]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "proposalThreshold", abi = "proposalThreshold()")]
    pub struct ProposalThresholdCall;
    #[doc = "Container type for all input parameters for the `proposals` function with signature `proposals(uint256)` and selector `[1, 60, 240, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "proposals", abi = "proposals(uint256)")]
    pub struct ProposalsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `propose` function with signature `propose(address[],uint256[],string[],bytes[],string)` and selector `[218, 149, 105, 26]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "propose",
        abi = "propose(address[],uint256[],string[],bytes[],string)"
    )]
    pub struct ProposeCall {
        pub targets: ::std::vec::Vec<ethers::core::types::Address>,
        pub values: ::std::vec::Vec<ethers::core::types::U256>,
        pub signatures: ::std::vec::Vec<String>,
        pub calldatas: ::std::vec::Vec<ethers::core::types::Bytes>,
        pub description: String,
    }
    #[doc = "Container type for all input parameters for the `queue` function with signature `queue(uint256)` and selector `[221, 240, 176, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "queue", abi = "queue(uint256)")]
    pub struct QueueCall {
        pub proposal_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `quorumVotes` function with signature `quorumVotes()` and selector `[36, 188, 26, 100]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "quorumVotes", abi = "quorumVotes()")]
    pub struct QuorumVotesCall;
    #[doc = "Container type for all input parameters for the `state` function with signature `state(uint256)` and selector `[62, 79, 73, 230]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "state", abi = "state(uint256)")]
    pub struct StateCall {
        pub proposal_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `timelock` function with signature `timelock()` and selector `[211, 50, 25, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "timelock", abi = "timelock()")]
    pub struct TimelockCall;
    #[doc = "Container type for all input parameters for the `votingDelay` function with signature `votingDelay()` and selector `[57, 50, 171, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "votingDelay", abi = "votingDelay()")]
    pub struct VotingDelayCall;
    #[doc = "Container type for all input parameters for the `votingPeriod` function with signature `votingPeriod()` and selector `[2, 162, 81, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "votingPeriod", abi = "votingPeriod()")]
    pub struct VotingPeriodCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum GovernorAlphaCalls {
        BallotTypehash(BallotTypehashCall),
        DomainTypehash(DomainTypehashCall),
        Abdicate(AbdicateCall),
        AcceptAdmin(AcceptAdminCall),
        ExecuteSetTimelockPendingAdmin(ExecuteSetTimelockPendingAdminCall),
        QueueSetTimelockPendingAdmin(QueueSetTimelockPendingAdminCall),
        Cancel(CancelCall),
        CastVote(CastVoteCall),
        CastVoteBySig(CastVoteBySigCall),
        Comp(CompCall),
        Execute(ExecuteCall),
        GetActions(GetActionsCall),
        GetReceipt(GetReceiptCall),
        Guardian(GuardianCall),
        LatestProposalIds(LatestProposalIdsCall),
        Name(NameCall),
        ProposalCount(ProposalCountCall),
        ProposalMaxOperations(ProposalMaxOperationsCall),
        ProposalThreshold(ProposalThresholdCall),
        Proposals(ProposalsCall),
        Propose(ProposeCall),
        Queue(QueueCall),
        QuorumVotes(QuorumVotesCall),
        State(StateCall),
        Timelock(TimelockCall),
        VotingDelay(VotingDelayCall),
        VotingPeriod(VotingPeriodCall),
    }
    impl ethers::core::abi::AbiDecode for GovernorAlphaCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <BallotTypehashCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::BallotTypehash(decoded));
            }
            if let Ok(decoded) =
                <DomainTypehashCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::DomainTypehash(decoded));
            }
            if let Ok(decoded) =
                <AbdicateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Abdicate(decoded));
            }
            if let Ok(decoded) =
                <AcceptAdminCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::AcceptAdmin(decoded));
            }
            if let Ok(decoded) =
                <ExecuteSetTimelockPendingAdminCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(GovernorAlphaCalls::ExecuteSetTimelockPendingAdmin(decoded));
            }
            if let Ok(decoded) =
                <QueueSetTimelockPendingAdminCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(GovernorAlphaCalls::QueueSetTimelockPendingAdmin(decoded));
            }
            if let Ok(decoded) = <CancelCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Cancel(decoded));
            }
            if let Ok(decoded) =
                <CastVoteCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::CastVote(decoded));
            }
            if let Ok(decoded) =
                <CastVoteBySigCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::CastVoteBySig(decoded));
            }
            if let Ok(decoded) = <CompCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(GovernorAlphaCalls::Comp(decoded));
            }
            if let Ok(decoded) =
                <ExecuteCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Execute(decoded));
            }
            if let Ok(decoded) =
                <GetActionsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::GetActions(decoded));
            }
            if let Ok(decoded) =
                <GetReceiptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::GetReceipt(decoded));
            }
            if let Ok(decoded) =
                <GuardianCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Guardian(decoded));
            }
            if let Ok(decoded) =
                <LatestProposalIdsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::LatestProposalIds(decoded));
            }
            if let Ok(decoded) = <NameCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(GovernorAlphaCalls::Name(decoded));
            }
            if let Ok(decoded) =
                <ProposalCountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::ProposalCount(decoded));
            }
            if let Ok(decoded) =
                <ProposalMaxOperationsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::ProposalMaxOperations(decoded));
            }
            if let Ok(decoded) =
                <ProposalThresholdCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::ProposalThreshold(decoded));
            }
            if let Ok(decoded) =
                <ProposalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Proposals(decoded));
            }
            if let Ok(decoded) =
                <ProposeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Propose(decoded));
            }
            if let Ok(decoded) = <QueueCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Queue(decoded));
            }
            if let Ok(decoded) =
                <QuorumVotesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::QuorumVotes(decoded));
            }
            if let Ok(decoded) = <StateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::State(decoded));
            }
            if let Ok(decoded) =
                <TimelockCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::Timelock(decoded));
            }
            if let Ok(decoded) =
                <VotingDelayCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::VotingDelay(decoded));
            }
            if let Ok(decoded) =
                <VotingPeriodCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(GovernorAlphaCalls::VotingPeriod(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for GovernorAlphaCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                GovernorAlphaCalls::BallotTypehash(element) => element.encode(),
                GovernorAlphaCalls::DomainTypehash(element) => element.encode(),
                GovernorAlphaCalls::Abdicate(element) => element.encode(),
                GovernorAlphaCalls::AcceptAdmin(element) => element.encode(),
                GovernorAlphaCalls::ExecuteSetTimelockPendingAdmin(element) => element.encode(),
                GovernorAlphaCalls::QueueSetTimelockPendingAdmin(element) => element.encode(),
                GovernorAlphaCalls::Cancel(element) => element.encode(),
                GovernorAlphaCalls::CastVote(element) => element.encode(),
                GovernorAlphaCalls::CastVoteBySig(element) => element.encode(),
                GovernorAlphaCalls::Comp(element) => element.encode(),
                GovernorAlphaCalls::Execute(element) => element.encode(),
                GovernorAlphaCalls::GetActions(element) => element.encode(),
                GovernorAlphaCalls::GetReceipt(element) => element.encode(),
                GovernorAlphaCalls::Guardian(element) => element.encode(),
                GovernorAlphaCalls::LatestProposalIds(element) => element.encode(),
                GovernorAlphaCalls::Name(element) => element.encode(),
                GovernorAlphaCalls::ProposalCount(element) => element.encode(),
                GovernorAlphaCalls::ProposalMaxOperations(element) => element.encode(),
                GovernorAlphaCalls::ProposalThreshold(element) => element.encode(),
                GovernorAlphaCalls::Proposals(element) => element.encode(),
                GovernorAlphaCalls::Propose(element) => element.encode(),
                GovernorAlphaCalls::Queue(element) => element.encode(),
                GovernorAlphaCalls::QuorumVotes(element) => element.encode(),
                GovernorAlphaCalls::State(element) => element.encode(),
                GovernorAlphaCalls::Timelock(element) => element.encode(),
                GovernorAlphaCalls::VotingDelay(element) => element.encode(),
                GovernorAlphaCalls::VotingPeriod(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for GovernorAlphaCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                GovernorAlphaCalls::BallotTypehash(element) => element.fmt(f),
                GovernorAlphaCalls::DomainTypehash(element) => element.fmt(f),
                GovernorAlphaCalls::Abdicate(element) => element.fmt(f),
                GovernorAlphaCalls::AcceptAdmin(element) => element.fmt(f),
                GovernorAlphaCalls::ExecuteSetTimelockPendingAdmin(element) => element.fmt(f),
                GovernorAlphaCalls::QueueSetTimelockPendingAdmin(element) => element.fmt(f),
                GovernorAlphaCalls::Cancel(element) => element.fmt(f),
                GovernorAlphaCalls::CastVote(element) => element.fmt(f),
                GovernorAlphaCalls::CastVoteBySig(element) => element.fmt(f),
                GovernorAlphaCalls::Comp(element) => element.fmt(f),
                GovernorAlphaCalls::Execute(element) => element.fmt(f),
                GovernorAlphaCalls::GetActions(element) => element.fmt(f),
                GovernorAlphaCalls::GetReceipt(element) => element.fmt(f),
                GovernorAlphaCalls::Guardian(element) => element.fmt(f),
                GovernorAlphaCalls::LatestProposalIds(element) => element.fmt(f),
                GovernorAlphaCalls::Name(element) => element.fmt(f),
                GovernorAlphaCalls::ProposalCount(element) => element.fmt(f),
                GovernorAlphaCalls::ProposalMaxOperations(element) => element.fmt(f),
                GovernorAlphaCalls::ProposalThreshold(element) => element.fmt(f),
                GovernorAlphaCalls::Proposals(element) => element.fmt(f),
                GovernorAlphaCalls::Propose(element) => element.fmt(f),
                GovernorAlphaCalls::Queue(element) => element.fmt(f),
                GovernorAlphaCalls::QuorumVotes(element) => element.fmt(f),
                GovernorAlphaCalls::State(element) => element.fmt(f),
                GovernorAlphaCalls::Timelock(element) => element.fmt(f),
                GovernorAlphaCalls::VotingDelay(element) => element.fmt(f),
                GovernorAlphaCalls::VotingPeriod(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<BallotTypehashCall> for GovernorAlphaCalls {
        fn from(var: BallotTypehashCall) -> Self {
            GovernorAlphaCalls::BallotTypehash(var)
        }
    }
    impl ::std::convert::From<DomainTypehashCall> for GovernorAlphaCalls {
        fn from(var: DomainTypehashCall) -> Self {
            GovernorAlphaCalls::DomainTypehash(var)
        }
    }
    impl ::std::convert::From<AbdicateCall> for GovernorAlphaCalls {
        fn from(var: AbdicateCall) -> Self {
            GovernorAlphaCalls::Abdicate(var)
        }
    }
    impl ::std::convert::From<AcceptAdminCall> for GovernorAlphaCalls {
        fn from(var: AcceptAdminCall) -> Self {
            GovernorAlphaCalls::AcceptAdmin(var)
        }
    }
    impl ::std::convert::From<ExecuteSetTimelockPendingAdminCall> for GovernorAlphaCalls {
        fn from(var: ExecuteSetTimelockPendingAdminCall) -> Self {
            GovernorAlphaCalls::ExecuteSetTimelockPendingAdmin(var)
        }
    }
    impl ::std::convert::From<QueueSetTimelockPendingAdminCall> for GovernorAlphaCalls {
        fn from(var: QueueSetTimelockPendingAdminCall) -> Self {
            GovernorAlphaCalls::QueueSetTimelockPendingAdmin(var)
        }
    }
    impl ::std::convert::From<CancelCall> for GovernorAlphaCalls {
        fn from(var: CancelCall) -> Self {
            GovernorAlphaCalls::Cancel(var)
        }
    }
    impl ::std::convert::From<CastVoteCall> for GovernorAlphaCalls {
        fn from(var: CastVoteCall) -> Self {
            GovernorAlphaCalls::CastVote(var)
        }
    }
    impl ::std::convert::From<CastVoteBySigCall> for GovernorAlphaCalls {
        fn from(var: CastVoteBySigCall) -> Self {
            GovernorAlphaCalls::CastVoteBySig(var)
        }
    }
    impl ::std::convert::From<CompCall> for GovernorAlphaCalls {
        fn from(var: CompCall) -> Self {
            GovernorAlphaCalls::Comp(var)
        }
    }
    impl ::std::convert::From<ExecuteCall> for GovernorAlphaCalls {
        fn from(var: ExecuteCall) -> Self {
            GovernorAlphaCalls::Execute(var)
        }
    }
    impl ::std::convert::From<GetActionsCall> for GovernorAlphaCalls {
        fn from(var: GetActionsCall) -> Self {
            GovernorAlphaCalls::GetActions(var)
        }
    }
    impl ::std::convert::From<GetReceiptCall> for GovernorAlphaCalls {
        fn from(var: GetReceiptCall) -> Self {
            GovernorAlphaCalls::GetReceipt(var)
        }
    }
    impl ::std::convert::From<GuardianCall> for GovernorAlphaCalls {
        fn from(var: GuardianCall) -> Self {
            GovernorAlphaCalls::Guardian(var)
        }
    }
    impl ::std::convert::From<LatestProposalIdsCall> for GovernorAlphaCalls {
        fn from(var: LatestProposalIdsCall) -> Self {
            GovernorAlphaCalls::LatestProposalIds(var)
        }
    }
    impl ::std::convert::From<NameCall> for GovernorAlphaCalls {
        fn from(var: NameCall) -> Self {
            GovernorAlphaCalls::Name(var)
        }
    }
    impl ::std::convert::From<ProposalCountCall> for GovernorAlphaCalls {
        fn from(var: ProposalCountCall) -> Self {
            GovernorAlphaCalls::ProposalCount(var)
        }
    }
    impl ::std::convert::From<ProposalMaxOperationsCall> for GovernorAlphaCalls {
        fn from(var: ProposalMaxOperationsCall) -> Self {
            GovernorAlphaCalls::ProposalMaxOperations(var)
        }
    }
    impl ::std::convert::From<ProposalThresholdCall> for GovernorAlphaCalls {
        fn from(var: ProposalThresholdCall) -> Self {
            GovernorAlphaCalls::ProposalThreshold(var)
        }
    }
    impl ::std::convert::From<ProposalsCall> for GovernorAlphaCalls {
        fn from(var: ProposalsCall) -> Self {
            GovernorAlphaCalls::Proposals(var)
        }
    }
    impl ::std::convert::From<ProposeCall> for GovernorAlphaCalls {
        fn from(var: ProposeCall) -> Self {
            GovernorAlphaCalls::Propose(var)
        }
    }
    impl ::std::convert::From<QueueCall> for GovernorAlphaCalls {
        fn from(var: QueueCall) -> Self {
            GovernorAlphaCalls::Queue(var)
        }
    }
    impl ::std::convert::From<QuorumVotesCall> for GovernorAlphaCalls {
        fn from(var: QuorumVotesCall) -> Self {
            GovernorAlphaCalls::QuorumVotes(var)
        }
    }
    impl ::std::convert::From<StateCall> for GovernorAlphaCalls {
        fn from(var: StateCall) -> Self {
            GovernorAlphaCalls::State(var)
        }
    }
    impl ::std::convert::From<TimelockCall> for GovernorAlphaCalls {
        fn from(var: TimelockCall) -> Self {
            GovernorAlphaCalls::Timelock(var)
        }
    }
    impl ::std::convert::From<VotingDelayCall> for GovernorAlphaCalls {
        fn from(var: VotingDelayCall) -> Self {
            GovernorAlphaCalls::VotingDelay(var)
        }
    }
    impl ::std::convert::From<VotingPeriodCall> for GovernorAlphaCalls {
        fn from(var: VotingPeriodCall) -> Self {
            GovernorAlphaCalls::VotingPeriod(var)
        }
    }
    #[doc = "Container type for all return fields from the `BALLOT_TYPEHASH` function with signature `BALLOT_TYPEHASH()` and selector `[222, 170, 167, 204]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct BallotTypehashReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `DOMAIN_TYPEHASH` function with signature `DOMAIN_TYPEHASH()` and selector `[32, 96, 107, 112]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DomainTypehashReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `comp` function with signature `comp()` and selector `[16, 157, 10, 248]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CompReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `getActions` function with signature `getActions(uint256)` and selector `[50, 141, 217, 130]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetActionsReturn {
        pub targets: ::std::vec::Vec<ethers::core::types::Address>,
        pub values: ::std::vec::Vec<ethers::core::types::U256>,
        pub signatures: ::std::vec::Vec<String>,
        pub calldatas: ::std::vec::Vec<ethers::core::types::Bytes>,
    }
    #[doc = "Container type for all return fields from the `getReceipt` function with signature `getReceipt(uint256,address)` and selector `[226, 58, 154, 82]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetReceiptReturn(pub Receipt);
    #[doc = "Container type for all return fields from the `guardian` function with signature `guardian()` and selector `[69, 42, 147, 32]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GuardianReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `latestProposalIds` function with signature `latestProposalIds(address)` and selector `[23, 151, 124, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct LatestProposalIdsReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `name` function with signature `name()` and selector `[6, 253, 222, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct NameReturn(pub String);
    #[doc = "Container type for all return fields from the `proposalCount` function with signature `proposalCount()` and selector `[218, 53, 198, 100]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ProposalCountReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `proposalMaxOperations` function with signature `proposalMaxOperations()` and selector `[123, 219, 228, 208]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ProposalMaxOperationsReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `proposalThreshold` function with signature `proposalThreshold()` and selector `[181, 129, 49, 176]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ProposalThresholdReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `proposals` function with signature `proposals(uint256)` and selector `[1, 60, 240, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ProposalsReturn {
        pub id: ethers::core::types::U256,
        pub proposer: ethers::core::types::Address,
        pub eta: ethers::core::types::U256,
        pub start_block: ethers::core::types::U256,
        pub end_block: ethers::core::types::U256,
        pub for_votes: ethers::core::types::U256,
        pub against_votes: ethers::core::types::U256,
        pub canceled: bool,
        pub executed: bool,
    }
    #[doc = "Container type for all return fields from the `propose` function with signature `propose(address[],uint256[],string[],bytes[],string)` and selector `[218, 149, 105, 26]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ProposeReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `quorumVotes` function with signature `quorumVotes()` and selector `[36, 188, 26, 100]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct QuorumVotesReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `state` function with signature `state(uint256)` and selector `[62, 79, 73, 230]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct StateReturn(pub u8);
    #[doc = "Container type for all return fields from the `timelock` function with signature `timelock()` and selector `[211, 50, 25, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TimelockReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `votingDelay` function with signature `votingDelay()` and selector `[57, 50, 171, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VotingDelayReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `votingPeriod` function with signature `votingPeriod()` and selector `[2, 162, 81, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VotingPeriodReturn(pub ethers::core::types::U256);
    #[doc = "`Receipt(bool,bool,uint96)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct Receipt {
        pub has_voted: bool,
        pub support: bool,
        pub votes: u128,
    }
}
